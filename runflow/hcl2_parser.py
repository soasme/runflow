# The file was automatically generated by Lark v0.11.3
__version__ = "0.11.3"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from io import open



class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass


class UnexpectedInput(LarkError):
    #--
    pos_in_stream = None
    _terminals_by_name = None

    def get_context(self, text, span=40):
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn, examples, token_type_match_fallback=False, use_accepts=False):
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, dict):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, STRING_TYPE)

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if use_accepts and hasattr(self, 'accepts') and ut.accepts != self.accepts:
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        try:
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        except AttributeError:
                            pass
                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    def __init__(self, expected, state=None, terminals_by_name=None):
        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name

        super(UnexpectedEOF, self).__init__()

    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)

        super(UnexpectedCharacters, self).__init__()

    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history

        super(UnexpectedToken, self).__init__()

    @property
    def accepts(self):
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message

    @property
    def puppet(self):
        warn("UnexpectedToken.puppet attribute has been renamed to interactive_parser", DeprecationWarning)
        return self.interactive_parser
    


class VisitError(LarkError):
    #--

    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)


import sys, re
import logging
from io import open
logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)

if sys.version_info[0]>2:
    from abc import ABC, abstractmethod
else:
    from abc import ABCMeta, abstractmethod
    class ABC(object): ##

        __slots__ = ()
        __metclass__ = ABCMeta


Py36 = (sys.version_info[:2] >= (3, 6))

NO_VALUE = object()


def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    #--

    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)


try:
    STRING_TYPE = basestring
except NameError:   ##

    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType  ##

except AttributeError:
    classtype = type    ##



def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        ##

        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)


try:
    import regex
except ImportError:
    regex = None

import sre_parse
import sre_constants
categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr):
    if regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]
    except sre_constants.error:
        raise ValueError(expr)


from collections import OrderedDict


class Meta:
    def __init__(self):
        self.empty = True


class Tree(object):
    #--
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [indent_str*level, self._pretty_label(), '\n']
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [indent_str*(level+1), '%s' % (n,), '\n']

        return l

    def pretty(self, indent_str='  '):
        #--
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            queue += [c for c in reversed(subtree.children)
                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def find_pred(self, pred):
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        #--
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro


class Discard(Exception):
    #--
    pass

##



class _Decoratable:
    #--

    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if hasattr(cls.__dict__[name], 'vargs_applied') or hasattr(value, 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        #--
        return self._transform_tree(tree)

    def __mul__(self, other):
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    #--

    def transform(self, tree):
        ##

        rev_postfix = []
        q = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []
                stack.append(self._call_userfunc(x, args))
            elif self.__visit_tokens__ and isinstance(x, Token):
                stack.append(self._call_userfunc_token(x))
            else:
                stack.append(x)

        t ,= stack  ##

        return t


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase):
    #--

    def visit(self, tree):
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase):
    #--

    def visit(self, tree):
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


def visit_children_decor(func):
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter(_Decoratable):
    #--

    def visit(self, tree):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


##


def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)


def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   ##

    return _apply_decorator(obj, _inline_args__func)


def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(children, meta)   ##

def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline=False, meta=False, tree=False, wrapper=None):
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec




class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, template_source=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy


class Pattern(Serialize):
    raw = None
    type = None

    def __init__(self, value, flags=(), raw=None):
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    def min_width(self):
        raise NotImplementedError()

    def max_width(self):
        raise NotImplementedError()

    if Py36:
        ##

        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value



class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]

    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self):
        if self.name.startswith('__'): ##

            return self.pattern.raw or self.name
        else:
            return self.name


class Token(Str):
    #--
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re_.match(retok.pattern.to_regexp(), s, g_regex_flags)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, g_regex_flags, match_whole, re_, use_bytes):
    ##

    ##

    ##

    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
        if use_bytes:
            pattern = pattern.encode('latin-1')
        try:
            mre = re_.compile(pattern, g_regex_flags)
        except AssertionError:  ##

            return _build_mres(terminals, max_size//2, g_regex_flags, match_whole, re_, use_bytes)

        mres.append((mre, {i: n for n, i in mre.groupindex.items()}))
        terminals = terminals[max_size:]
    return mres


def build_mres(terminals, g_regex_flags, re_, use_bytes, match_whole=False):
    return _build_mres(terminals, len(terminals), g_regex_flags, match_whole, re_, use_bytes)


def _regexp_has_newline(r):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class Lexer(object):
    #--
    lex = NotImplemented

    def make_lexer_state(self, text):
        line_ctr = LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        return LexerState(text, line_ctr)


class TraditionalLexer(Lexer):

    def __init__(self, conf):
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            for t in terminals:
                try:
                    self.re.compile(t.pattern.to_regexp(), conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._mres = None

    def _build(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._mres = build_mres(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def mres(self):
        if self._mres is None:
            self._build()
        return self._mres

    def match(self, text, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, state, parser_state):
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)

    def next_token(self, lex_state, parser_state=None):
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in self.mres for v in tfi.values()} - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            if type_ not in self.ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in self.newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                lex_state.last_token = t
                return t
            else:
                if type_ in self.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    self.callback[type_](t2)
                line_ctr.feed(value, type_ in self.newline_types)

        ##

        raise EOFError(self)


class LexerState(object):
    __slots__ = 'text', 'line_ctr', 'last_token'

    def __init__(self, text, line_ctr, last_token=None):
        self.text = text
        self.line_ctr = line_ctr
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class ContextualLexer(Lexer):

    def __init__(self, conf, states, always_accept=()):
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = TraditionalLexer(lexer_conf)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        self.root_lexer = TraditionalLexer(trad_conf)

    def make_lexer_state(self, text):
        return self.root_lexer.make_lexer_state(text)

    def lex(self, lexer_state, parser_state):
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##


class LexerThread(object):
    #--

    def __init__(self, lexer, text):
        self.lexer = lexer
        self.state = lexer.make_lexer_state(text)

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        copied = object.__new__(LexerThread)
        copied.lexer = self.lexer
        copied.state = copy(self.state)
        return copied



class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, terminals, re_module, ignore=(), postlex=None, callbacks=None, g_regex_flags=0, skip_validation=False, use_bytes=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.lexer_type = None

    @property
    def tokens(self):
        warn("LexerConf.tokens is deprecated. Use LexerConf.terminals instead", DeprecationWarning)
        return self.terminals

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}



class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    def __init__(self, rules, callbacks, start):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start

        self.parser_type = None


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)


class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        ##

        if isinstance(res, Tree):
            res_meta = res.meta
            for c in children:
                if isinstance(c, Tree):
                    child_meta = c.meta
                    if not child_meta.empty:
                        res_meta.line = child_meta.line
                        res_meta.column = child_meta.column
                        res_meta.start_pos = child_meta.start_pos
                        res_meta.empty = False
                        break
                elif isinstance(c, Token):
                    res_meta.line = c.line
                    res_meta.column = c.column
                    res_meta.start_pos = c.pos_in_stream
                    res_meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree):
                    child_meta = c.meta
                    if not child_meta.empty:
                        res_meta.end_line = child_meta.end_line
                        res_meta.end_column = child_meta.end_column
                        res_meta.end_pos = child_meta.end_pos
                        res_meta.empty = False
                        break
                elif isinstance(c, Token):
                    res_meta.end_line = c.end_line
                    res_meta.end_column = c.end_column
                    res_meta.end_pos = c.end_pos
                    res_meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)


def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f


def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                ##

                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(Serialize):
    def __init__(self, parser_conf, debug=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)
    
    def parse_interactive(self, lexer, start):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_state.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class ParseConf(object):
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    def __init__(self, parse_table, callbacks, start):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState(object):
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    def __init__(self, parse_conf, lexer, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self):
        return self.state_stack[-1]

    ##

    def __eq__(self, other):
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self):
        return copy(self)

    def feed_token(self, token, is_end=False):
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s)

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]

class _Parser(object):
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer, start, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)
    

    def parse_from_state(self, state):
        ##

        try:
            token = None
            for token in state.lexer.lex(state):
                state.feed_token(token)

            token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


class MakeParsingFrontend:
    def __init__(self, parser_type, lexer_type):
        self.parser_type = parser_type
        self.lexer_type = lexer_type

    def __call__(self, lexer_conf, parser_conf, options):
        assert isinstance(lexer_conf, LexerConf)
        assert isinstance(parser_conf, ParserConf)
        parser_conf.parser_type = self.parser_type
        lexer_conf.lexer_type = self.lexer_type
        return ParsingFrontend(lexer_conf, parser_conf, options)

    @classmethod
    def deserialize(cls, data, memo, lexer_conf, callbacks, options):
        parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
        parser = LALR_Parser.deserialize(data['parser'], memo, callbacks, options.debug)
        parser_conf.callbacks = callbacks
        return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)




class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser', 'options'

    def __init__(self, lexer_conf, parser_conf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = {
                'lalr': create_lalr_parser,
                'earley': create_earley_parser,
                'cyk': CYK_FrontEnd,
            }[parser_conf.parser_type]
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        try:
            create_lexer = {
                'standard': create_traditional_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
        except KeyError:
            assert issubclass(lexer_type, Lexer), lexer_type
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        else:
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex)

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)
    
    def _verify_start(self, start=None):
        if start is None:
            start = self.parser_conf.start
            if len(start) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def parse(self, text, start=None, on_error=None):
        start = self._verify_start(start)
        stream = text if self.skip_lexer else LexerThread(self.lexer, text)
        kw = {} if on_error is None else {'on_error': on_error}
        return self.parser.parse(stream, start, **kw)
    
    def parse_interactive(self, text=None, start=None):
        start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = text if self.skip_lexer else LexerThread(self.lexer, text)
        return self.parser.parse_interactive(stream, start)


def get_frontend(parser, lexer):
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('standard', 'contextual'),
            'earley': ('standard', 'dynamic', 'dynamic_complete'),
            'cyk': ('standard', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)

    return MakeParsingFrontend(parser, lexer)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def make_lexer_state(self, text):
        return self.lexer.make_lexer_state(text)

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_traditional_lexer(lexer_conf, parser, postlex):
    return TraditionalLexer(lexer_conf)

def create_contextual_lexer(lexer_conf, parser, postlex):
    states = {idx:list(t.keys()) for idx, t in parser._parse_table.states.items()}
    always_accept = postlex.always_accept if postlex else ()
    return ContextualLexer(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf, parser_conf, options=None):
    debug = options.debug if options else False
    return LALR_Parser(parser_conf, debug=debug)


create_earley_parser = NotImplemented
CYK_FrontEnd = NotImplemented



class LarkOptions(Serialize):
    #--
    OPTIONS_DOC = """
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (default: False)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates (line, column, end_line, end_column) attributes into all tree branches.
    maybe_placeholders
            When True, the ``[]`` operator returns ``None`` when not matched.

            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``False``. Recommended to set to ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (default: False)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "standard": Use a standard lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: None) Only works with the standard and contextual lexers.
    priority
            How priorities should be evaluated - auto, none, normal, invert (Default: auto)
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str`` (Python 3 only).
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    ##

    ##

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'import_paths': [],
        'source_path': None,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


class PostLex(ABC):
    @abstractmethod
    def process(self, stream):
        return stream

    always_accept = ()


class Lark(Serialize):
    #--
    def __init__(self, grammar, **options):
        self.options = LarkOptions(options)

        ##

        use_regex = self.options.regex
        if use_regex:
            if regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name
            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_md5 = None
        if isinstance(grammar, STRING_TYPE):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")
                if sys.version_info[0] == 2 and self.options.use_bytes != 'force':
                    raise ConfigurationError("`use_bytes=True` may have issues on python2."
                                              "Use `use_bytes='force'` to use it at your own risk.")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_md5 = hashlib.md5(s.encode('utf8')).hexdigest()

                if isinstance(self.options.cache, STRING_TYPE):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")
                    ##

                    cache_fn = tempfile.gettempdir() + '/.lark_cache_%s_%s_%s.tmp' % ((cache_md5,) + sys.version_info[:2])

                if FS.exists(cache_fn):
                    logger.debug('Loading grammar from cache: %s', cache_fn)
                    ##

                    for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                        del options[name]
                    with FS.open(cache_fn, 'rb') as f:
                        old_options = self.options
                        try:
                            file_md5 = f.readline().rstrip(b'\n')
                            cached_used_files = pickle.load(f)
                            if file_md5 == cache_md5.encode('utf8') and verify_used_files(cached_used_files):
                                cached_parser_data = pickle.load(f)
                                self._load(cached_parser_data, **options)
                                return
                        except Exception: ##

                            logger.exception("Failed to load Lark from cache: %r. We will try to carry on." % cache_fn)
                            
                            ##

                            ##

                            self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use standard instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'standard'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('standard', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use standard or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            with FS.open(cache_fn, 'wb') as f:
                f.write(cache_md5.encode('utf8') + b'\n')
                pickle.dump(used_files, f)
                self.save(f)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore=False):
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return TraditionalLexer(lexer_conf)

    def _prepare_callbacks(self):
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self):
        self._prepare_callbacks()
        parser_class = get_frontend(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return parser_class(self.lexer_conf, parser_conf, options=self.options)

    def save(self, f):
        #--
        data, m = self.memo_serialize([TerminalDef, Rule])
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls, f):
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data, memo, options):
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self, f, **kwargs):
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo = d['memo']
        data = d['data']

        assert memo
        memo = SerializeMemoizer.deserialize(memo, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        parser_class = get_frontend(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = parser_class.deserialize(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls, package, grammar_path, search_paths=("",), **options):
        #--
        package = FromPackageLoader(package, search_paths)
        full_path, text = package(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text, dont_ignore=False):
        #--
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        #--
        return self._terminals_dict[name]
    
    def parse_interactive(self, text=None, start=None):
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text, start=None, on_error=None):
        #--
        return self.parser.parse(text, start=start, on_error=on_error)

    @property
    def source(self):
        warn("Lark.source attribute has been renamed to Lark.source_path", DeprecationWarning)
        return self.source_path

    @source.setter
    def source(self, value):
        self.source_path = value

    @property
    def grammar_source(self):
        warn("Lark.grammar_source attribute has been renamed to Lark.source_grammar", DeprecationWarning)
        return self.source_grammar

    @grammar_source.setter
    def grammar_source(self, value):
        self.source_grammar = value



class DedentError(LarkError):
    pass

class Indenter(PostLex):
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)


import pickle, zlib, base64
DATA = (
{'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}], 'ignore': ['__IGNORE_0', '__IGNORE_1'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}], 'start': ['eval', 'module'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: 'LSQB', 1: 'operation', 2: 'identifier', 3: 'object_elem', 4: 'for_object_expr', 5: 'float_lit', 6: 'binary_and_op', 7: 'unary_op', 8: '__ANON_10', 9: 'LBRACE', 10: 'heredoc_template_trim', 11: 'LPAR', 12: 'STRING_LIT', 13: 'expression', 14: 'BANG', 15: 'function_call', 16: 'expr_term', 17: '__int_lit_plus_9', 18: 'binary_or_op', 19: 'full_splat_expr_term', 20: 'conditional', 21: 'binary_factor_op', 22: 'binary_term_op', 23: 'get_attr_expr_term', 24: 'object', 25: 'attr_splat_expr_term', 26: 'tuple', 27: 'binary_test_op', 28: 'binary_eq_op', 29: 'quoted_template_expr', 30: 'DECIMAL', 31: '__ANON_11', 32: 'int_lit', 33: 'MINUS', 34: 'RBRACE', 35: 'for_tuple_expr', 36: 'heredoc_template', 37: '__ANON_3', 38: 'index_expr_term', 39: 'LESSTHAN', 40: '__ANON_7', 41: '__ANON_9', 42: 'QMARK', 43: '__ANON_6', 44: 'PERCENT', 45: 'DOT', 46: '__ANON_8', 47: 'PLUS', 48: 'COLON', 49: 'STAR', 50: 'EQUAL', 51: 'SLASH', 52: 'MORETHAN', 53: '__ANON_5', 54: '__ANON_4', 55: '__ANON_13', 56: '$END', 57: '__ANON_2', 58: 'COMMA', 59: '__ANON_0', 60: '__ANON_1', 61: 'RSQB', 62: '__ANON_14', 63: '__ANON_12', 64: 'RPAR', 65: 'IF', 66: '__new_line_or_comment_plus_2', 67: 'new_line_or_comment', 68: '__attr_splat_star_12', 69: 'get_attr', 70: 'body', 71: 'module', 72: 'block', 73: '__body_star_0', 74: 'attribute', 75: 'binary_and_operator', 76: '__binary_and_op_star_4', 77: 'eval', 78: 'EXP_MARK', 79: 'IN', 80: 'FOR', 81: 'index', 82: 'full_splat', 83: 'attr_splat', 84: '__tuple_star_10', 85: 'new_line_and_or_comma', 86: 'for_cond', 87: 'binary_term_operator', 88: 'binary_eq_operator', 89: '__object_star_11', 90: 'for_intro', 91: 'binary_or_operator', 92: 'binary_factor_operator', 93: '__binary_or_op_star_3', 94: '__binary_term_op_star_7', 95: '__binary_factor_op_star_8', 96: 'binary_test_operator', 97: '__block_star_1', 98: 'string_lit', 99: 'arguments', 100: '__binary_eq_op_star_5', 101: '__binary_test_op_star_6', 102: '__full_splat_star_13'}, 'states': {0: {0: (0, 525), 1: (0, 229), 2: (0, 324), 3: (0, 416), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 13: (0, 262), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 34: (0, 236), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 1: {34: (0, 27)}, 2: {39: (1, {'@': 151}), 40: (1, {'@': 151}), 41: (1, {'@': 151}), 42: (1, {'@': 151}), 43: (1, {'@': 151}), 0: (1, {'@': 151}), 44: (1, {'@': 151}), 45: (1, {'@': 151}), 46: (1, {'@': 151}), 47: (1, {'@': 151}), 48: (1, {'@': 151}), 49: (1, {'@': 151}), 50: (1, {'@': 151}), 51: (1, {'@': 151}), 52: (1, {'@': 151}), 53: (1, {'@': 151}), 54: (1, {'@': 151}), 33: (1, {'@': 151}), 55: (1, {'@': 151}), 56: (1, {'@': 151}), 57: (1, {'@': 151}), 58: (1, {'@': 151}), 59: (1, {'@': 151}), 34: (1, {'@': 151}), 60: (1, {'@': 151}), 61: (1, {'@': 151}), 62: (1, {'@': 151}), 37: (1, {'@': 151}), 63: (1, {'@': 151}), 64: (1, {'@': 151}), 65: (1, {'@': 151})}, 3: {66: (0, 280), 58: (0, 370), 67: (0, 530), 61: (0, 532), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 4: {39: (1, {'@': 242}), 40: (1, {'@': 242}), 41: (1, {'@': 242}), 42: (1, {'@': 242}), 43: (1, {'@': 242}), 0: (1, {'@': 242}), 44: (1, {'@': 242}), 45: (1, {'@': 242}), 46: (1, {'@': 242}), 47: (1, {'@': 242}), 48: (1, {'@': 242}), 49: (1, {'@': 242}), 50: (1, {'@': 242}), 51: (1, {'@': 242}), 52: (1, {'@': 242}), 53: (1, {'@': 242}), 54: (1, {'@': 242}), 33: (1, {'@': 242}), 55: (1, {'@': 242}), 56: (1, {'@': 242}), 57: (1, {'@': 242}), 58: (1, {'@': 242}), 59: (1, {'@': 242}), 34: (1, {'@': 242}), 60: (1, {'@': 242}), 61: (1, {'@': 242}), 62: (1, {'@': 242}), 37: (1, {'@': 242}), 63: (1, {'@': 242}), 64: (1, {'@': 242}), 65: (1, {'@': 242})}, 5: {39: (1, {'@': 239}), 40: (1, {'@': 239}), 41: (1, {'@': 239}), 42: (1, {'@': 239}), 43: (1, {'@': 239}), 0: (1, {'@': 239}), 44: (1, {'@': 239}), 45: (1, {'@': 239}), 46: (1, {'@': 239}), 47: (1, {'@': 239}), 48: (1, {'@': 239}), 49: (1, {'@': 239}), 50: (1, {'@': 239}), 51: (1, {'@': 239}), 52: (1, {'@': 239}), 53: (1, {'@': 239}), 54: (1, {'@': 239}), 33: (1, {'@': 239}), 55: (1, {'@': 239}), 56: (1, {'@': 239}), 57: (1, {'@': 239}), 58: (1, {'@': 239}), 59: (1, {'@': 239}), 34: (1, {'@': 239}), 60: (1, {'@': 239}), 61: (1, {'@': 239}), 62: (1, {'@': 239}), 37: (1, {'@': 239}), 63: (1, {'@': 239}), 64: (1, {'@': 239}), 65: (1, {'@': 239})}, 6: {34: (0, 33)}, 7: {68: (0, 317), 69: (0, 313), 45: (0, 309), 42: (1, {'@': 200}), 57: (1, {'@': 200}), 0: (1, {'@': 200}), 62: (1, {'@': 200}), 48: (1, {'@': 200}), 50: (1, {'@': 200}), 59: (1, {'@': 200}), 37: (1, {'@': 200}), 61: (1, {'@': 200}), 63: (1, {'@': 200}), 34: (1, {'@': 200}), 55: (1, {'@': 200}), 60: (1, {'@': 200}), 64: (1, {'@': 200}), 65: (1, {'@': 200}), 56: (1, {'@': 200}), 58: (1, {'@': 200}), 39: (1, {'@': 200}), 40: (1, {'@': 200}), 43: (1, {'@': 200}), 41: (1, {'@': 200}), 44: (1, {'@': 200}), 46: (1, {'@': 200}), 47: (1, {'@': 200}), 49: (1, {'@': 200}), 51: (1, {'@': 200}), 52: (1, {'@': 200}), 53: (1, {'@': 200}), 54: (1, {'@': 200}), 33: (1, {'@': 200})}, 8: {66: (0, 280), 67: (0, 176), 2: (0, 29), 59: (0, 536), 37: (0, 158), 60: (0, 538), 57: (0, 547)}, 9: {0: (0, 525), 1: (0, 229), 2: (0, 217), 13: (0, 38), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 10: {11: (1, {'@': 271}), 57: (1, {'@': 271}), 33: (1, {'@': 271}), 30: (1, {'@': 271}), 0: (1, {'@': 271}), 31: (1, {'@': 271}), 8: (1, {'@': 271}), 9: (1, {'@': 271}), 60: (1, {'@': 271}), 59: (1, {'@': 271}), 37: (1, {'@': 271}), 12: (1, {'@': 271}), 14: (1, {'@': 271})}, 11: {70: (0, 284), 71: (0, 234), 66: (0, 280), 2: (0, 287), 72: (0, 257), 37: (0, 158), 59: (0, 536), 73: (0, 543), 74: (0, 503), 67: (0, 531), 60: (0, 538), 57: (0, 547), 56: (1, {'@': 48})}, 12: {66: (0, 280), 60: (0, 538), 59: (0, 536), 67: (0, 247), 57: (0, 547), 11: (1, {'@': 280}), 33: (1, {'@': 280}), 30: (1, {'@': 280}), 0: (1, {'@': 280}), 31: (1, {'@': 280}), 8: (1, {'@': 280}), 9: (1, {'@': 280}), 37: (1, {'@': 280}), 12: (1, {'@': 280}), 14: (1, {'@': 280})}, 13: {75: (0, 209), 53: (0, 202), 76: (0, 205), 50: (1, {'@': 77}), 42: (1, {'@': 77}), 54: (1, {'@': 77}), 48: (1, {'@': 77}), 56: (1, {'@': 77}), 57: (1, {'@': 77}), 60: (1, {'@': 77}), 59: (1, {'@': 77}), 34: (1, {'@': 77}), 58: (1, {'@': 77}), 61: (1, {'@': 77}), 65: (1, {'@': 77}), 62: (1, {'@': 77}), 63: (1, {'@': 77}), 64: (1, {'@': 77}), 37: (1, {'@': 77})}, 14: {11: (1, {'@': 269}), 57: (1, {'@': 269}), 33: (1, {'@': 269}), 30: (1, {'@': 269}), 0: (1, {'@': 269}), 31: (1, {'@': 269}), 8: (1, {'@': 269}), 9: (1, {'@': 269}), 60: (1, {'@': 269}), 59: (1, {'@': 269}), 37: (1, {'@': 269}), 12: (1, {'@': 269}), 14: (1, {'@': 269})}, 15: {66: (0, 280), 60: (0, 538), 59: (0, 536), 67: (0, 36), 57: (0, 547), 11: (1, {'@': 268}), 33: (1, {'@': 268}), 30: (1, {'@': 268}), 0: (1, {'@': 268}), 31: (1, {'@': 268}), 8: (1, {'@': 268}), 9: (1, {'@': 268}), 37: (1, {'@': 268}), 12: (1, {'@': 268}), 14: (1, {'@': 268})}, 16: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 13: (0, 62), 77: (0, 66), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 17: {39: (1, {'@': 327}), 40: (1, {'@': 327}), 41: (1, {'@': 327}), 42: (1, {'@': 327}), 43: (1, {'@': 327}), 0: (1, {'@': 327}), 45: (1, {'@': 327}), 44: (1, {'@': 327}), 78: (1, {'@': 327}), 46: (1, {'@': 327}), 47: (1, {'@': 327}), 48: (1, {'@': 327}), 49: (1, {'@': 327}), 50: (1, {'@': 327}), 51: (1, {'@': 327}), 52: (1, {'@': 327}), 30: (1, {'@': 327}), 53: (1, {'@': 327}), 54: (1, {'@': 327}), 33: (1, {'@': 327}), 55: (1, {'@': 327}), 56: (1, {'@': 327}), 57: (1, {'@': 327}), 59: (1, {'@': 327}), 34: (1, {'@': 327}), 60: (1, {'@': 327}), 58: (1, {'@': 327}), 61: (1, {'@': 327}), 62: (1, {'@': 327}), 37: (1, {'@': 327}), 63: (1, {'@': 327}), 64: (1, {'@': 327}), 65: (1, {'@': 327})}, 18: {59: (1, {'@': 314}), 57: (1, {'@': 314}), 60: (1, {'@': 314}), 61: (1, {'@': 314}), 37: (1, {'@': 314}), 56: (1, {'@': 314}), 0: (1, {'@': 314}), 8: (1, {'@': 314}), 9: (1, {'@': 314}), 12: (1, {'@': 314}), 30: (1, {'@': 314}), 11: (1, {'@': 314}), 31: (1, {'@': 314}), 33: (1, {'@': 314}), 14: (1, {'@': 314}), 79: (1, {'@': 314}), 64: (1, {'@': 314}), 58: (1, {'@': 314}), 34: (1, {'@': 314}), 65: (1, {'@': 314}), 48: (1, {'@': 314}), 80: (1, {'@': 314})}, 19: {48: (0, 40)}, 20: {11: (1, {'@': 285}), 57: (1, {'@': 285}), 33: (1, {'@': 285}), 30: (1, {'@': 285}), 0: (1, {'@': 285}), 31: (1, {'@': 285}), 8: (1, {'@': 285}), 9: (1, {'@': 285}), 60: (1, {'@': 285}), 59: (1, {'@': 285}), 37: (1, {'@': 285}), 12: (1, {'@': 285}), 14: (1, {'@': 285})}, 21: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 13: (0, 34), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 22: {34: (0, 321)}, 23: {0: (0, 506), 55: (0, 7), 45: (0, 150), 81: (0, 94), 82: (0, 77), 83: (0, 144), 69: (0, 80), 50: (1, {'@': 73}), 42: (1, {'@': 73}), 48: (1, {'@': 73}), 56: (1, {'@': 73}), 57: (1, {'@': 73}), 60: (1, {'@': 73}), 59: (1, {'@': 73}), 34: (1, {'@': 73}), 58: (1, {'@': 73}), 61: (1, {'@': 73}), 65: (1, {'@': 73}), 62: (1, {'@': 73}), 63: (1, {'@': 73}), 64: (1, {'@': 73}), 37: (1, {'@': 73})}, 24: {30: (0, 243), 39: (1, {'@': 123}), 40: (1, {'@': 123}), 41: (1, {'@': 123}), 42: (1, {'@': 123}), 43: (1, {'@': 123}), 0: (1, {'@': 123}), 44: (1, {'@': 123}), 45: (1, {'@': 123}), 46: (1, {'@': 123}), 47: (1, {'@': 123}), 48: (1, {'@': 123}), 49: (1, {'@': 123}), 50: (1, {'@': 123}), 51: (1, {'@': 123}), 52: (1, {'@': 123}), 53: (1, {'@': 123}), 54: (1, {'@': 123}), 33: (1, {'@': 123}), 55: (1, {'@': 123}), 56: (1, {'@': 123}), 57: (1, {'@': 123}), 58: (1, {'@': 123}), 59: (1, {'@': 123}), 34: (1, {'@': 123}), 60: (1, {'@': 123}), 61: (1, {'@': 123}), 62: (1, {'@': 123}), 37: (1, {'@': 123}), 63: (1, {'@': 123}), 64: (1, {'@': 123}), 65: (1, {'@': 123})}, 25: {39: (1, {'@': 232}), 40: (1, {'@': 232}), 41: (1, {'@': 232}), 42: (1, {'@': 232}), 43: (1, {'@': 232}), 0: (1, {'@': 232}), 44: (1, {'@': 232}), 45: (1, {'@': 232}), 46: (1, {'@': 232}), 47: (1, {'@': 232}), 48: (1, {'@': 232}), 49: (1, {'@': 232}), 50: (1, {'@': 232}), 51: (1, {'@': 232}), 52: (1, {'@': 232}), 53: (1, {'@': 232}), 54: (1, {'@': 232}), 33: (1, {'@': 232}), 55: (1, {'@': 232}), 56: (1, {'@': 232}), 57: (1, {'@': 232}), 58: (1, {'@': 232}), 59: (1, {'@': 232}), 34: (1, {'@': 232}), 60: (1, {'@': 232}), 61: (1, {'@': 232}), 62: (1, {'@': 232}), 37: (1, {'@': 232}), 63: (1, {'@': 232}), 64: (1, {'@': 232}), 65: (1, {'@': 232})}, 26: {39: (1, {'@': 159}), 40: (1, {'@': 159}), 41: (1, {'@': 159}), 42: (1, {'@': 159}), 43: (1, {'@': 159}), 0: (1, {'@': 159}), 44: (1, {'@': 159}), 45: (1, {'@': 159}), 46: (1, {'@': 159}), 47: (1, {'@': 159}), 48: (1, {'@': 159}), 49: (1, {'@': 159}), 50: (1, {'@': 159}), 51: (1, {'@': 159}), 52: (1, {'@': 159}), 53: (1, {'@': 159}), 54: (1, {'@': 159}), 33: (1, {'@': 159}), 55: (1, {'@': 159}), 56: (1, {'@': 159}), 57: (1, {'@': 159}), 58: (1, {'@': 159}), 59: (1, {'@': 159}), 34: (1, {'@': 159}), 60: (1, {'@': 159}), 61: (1, {'@': 159}), 62: (1, {'@': 159}), 37: (1, {'@': 159}), 63: (1, {'@': 159}), 64: (1, {'@': 159}), 65: (1, {'@': 159})}, 27: {39: (1, {'@': 233}), 40: (1, {'@': 233}), 41: (1, {'@': 233}), 42: (1, {'@': 233}), 43: (1, {'@': 233}), 0: (1, {'@': 233}), 44: (1, {'@': 233}), 45: (1, {'@': 233}), 46: (1, {'@': 233}), 47: (1, {'@': 233}), 48: (1, {'@': 233}), 49: (1, {'@': 233}), 50: (1, {'@': 233}), 51: (1, {'@': 233}), 52: (1, {'@': 233}), 53: (1, {'@': 233}), 54: (1, {'@': 233}), 33: (1, {'@': 233}), 55: (1, {'@': 233}), 56: (1, {'@': 233}), 57: (1, {'@': 233}), 58: (1, {'@': 233}), 59: (1, {'@': 233}), 34: (1, {'@': 233}), 60: (1, {'@': 233}), 61: (1, {'@': 233}), 62: (1, {'@': 233}), 37: (1, {'@': 233}), 63: (1, {'@': 233}), 64: (1, {'@': 233}), 65: (1, {'@': 233})}, 28: {66: (0, 280), 67: (0, 52), 60: (0, 538), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 282}), 33: (1, {'@': 282}), 30: (1, {'@': 282}), 0: (1, {'@': 282}), 31: (1, {'@': 282}), 8: (1, {'@': 282}), 9: (1, {'@': 282}), 37: (1, {'@': 282}), 12: (1, {'@': 282}), 14: (1, {'@': 282})}, 29: {66: (0, 280), 58: (0, 361), 67: (0, 548), 79: (0, 398), 59: (0, 536), 60: (0, 538), 57: (0, 547)}, 30: {11: (1, {'@': 287}), 57: (1, {'@': 287}), 33: (1, {'@': 287}), 30: (1, {'@': 287}), 0: (1, {'@': 287}), 31: (1, {'@': 287}), 8: (1, {'@': 287}), 9: (1, {'@': 287}), 60: (1, {'@': 287}), 59: (1, {'@': 287}), 37: (1, {'@': 287}), 12: (1, {'@': 287}), 14: (1, {'@': 287})}, 31: {39: (1, {'@': 235}), 40: (1, {'@': 235}), 41: (1, {'@': 235}), 42: (1, {'@': 235}), 43: (1, {'@': 235}), 0: (1, {'@': 235}), 44: (1, {'@': 235}), 45: (1, {'@': 235}), 46: (1, {'@': 235}), 47: (1, {'@': 235}), 48: (1, {'@': 235}), 49: (1, {'@': 235}), 50: (1, {'@': 235}), 51: (1, {'@': 235}), 52: (1, {'@': 235}), 53: (1, {'@': 235}), 54: (1, {'@': 235}), 33: (1, {'@': 235}), 55: (1, {'@': 235}), 56: (1, {'@': 235}), 57: (1, {'@': 235}), 58: (1, {'@': 235}), 59: (1, {'@': 235}), 34: (1, {'@': 235}), 60: (1, {'@': 235}), 61: (1, {'@': 235}), 62: (1, {'@': 235}), 37: (1, {'@': 235}), 63: (1, {'@': 235}), 64: (1, {'@': 235}), 65: (1, {'@': 235})}, 32: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 13: (0, 344), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 67: (0, 540), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 61: (0, 542), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 33: {39: (1, {'@': 238}), 40: (1, {'@': 238}), 41: (1, {'@': 238}), 42: (1, {'@': 238}), 43: (1, {'@': 238}), 0: (1, {'@': 238}), 44: (1, {'@': 238}), 45: (1, {'@': 238}), 46: (1, {'@': 238}), 47: (1, {'@': 238}), 48: (1, {'@': 238}), 49: (1, {'@': 238}), 50: (1, {'@': 238}), 51: (1, {'@': 238}), 52: (1, {'@': 238}), 53: (1, {'@': 238}), 54: (1, {'@': 238}), 33: (1, {'@': 238}), 55: (1, {'@': 238}), 56: (1, {'@': 238}), 57: (1, {'@': 238}), 58: (1, {'@': 238}), 59: (1, {'@': 238}), 34: (1, {'@': 238}), 60: (1, {'@': 238}), 61: (1, {'@': 238}), 62: (1, {'@': 238}), 37: (1, {'@': 238}), 63: (1, {'@': 238}), 64: (1, {'@': 238}), 65: (1, {'@': 238})}, 34: {57: (1, {'@': 167}), 60: (1, {'@': 167}), 59: (1, {'@': 167}), 34: (1, {'@': 167}), 58: (1, {'@': 167})}, 35: {39: (1, {'@': 169}), 40: (1, {'@': 169}), 41: (1, {'@': 169}), 42: (1, {'@': 169}), 43: (1, {'@': 169}), 0: (1, {'@': 169}), 44: (1, {'@': 169}), 45: (1, {'@': 169}), 46: (1, {'@': 169}), 47: (1, {'@': 169}), 48: (1, {'@': 169}), 49: (1, {'@': 169}), 50: (1, {'@': 169}), 51: (1, {'@': 169}), 52: (1, {'@': 169}), 53: (1, {'@': 169}), 54: (1, {'@': 169}), 33: (1, {'@': 169}), 55: (1, {'@': 169}), 56: (1, {'@': 169}), 57: (1, {'@': 169}), 58: (1, {'@': 169}), 59: (1, {'@': 169}), 34: (1, {'@': 169}), 60: (1, {'@': 169}), 61: (1, {'@': 169}), 62: (1, {'@': 169}), 37: (1, {'@': 169}), 63: (1, {'@': 169}), 64: (1, {'@': 169}), 65: (1, {'@': 169})}, 36: {11: (1, {'@': 267}), 57: (1, {'@': 267}), 33: (1, {'@': 267}), 30: (1, {'@': 267}), 0: (1, {'@': 267}), 31: (1, {'@': 267}), 8: (1, {'@': 267}), 9: (1, {'@': 267}), 60: (1, {'@': 267}), 59: (1, {'@': 267}), 37: (1, {'@': 267}), 12: (1, {'@': 267}), 14: (1, {'@': 267})}, 37: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 181), 17: (0, 264), 19: (0, 465), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 38: {48: (0, 237)}, 39: {78: (0, 413), 30: (0, 243), 39: (1, {'@': 122}), 40: (1, {'@': 122}), 41: (1, {'@': 122}), 42: (1, {'@': 122}), 43: (1, {'@': 122}), 0: (1, {'@': 122}), 44: (1, {'@': 122}), 45: (1, {'@': 122}), 46: (1, {'@': 122}), 47: (1, {'@': 122}), 48: (1, {'@': 122}), 49: (1, {'@': 122}), 50: (1, {'@': 122}), 51: (1, {'@': 122}), 52: (1, {'@': 122}), 53: (1, {'@': 122}), 54: (1, {'@': 122}), 33: (1, {'@': 122}), 55: (1, {'@': 122}), 56: (1, {'@': 122}), 57: (1, {'@': 122}), 58: (1, {'@': 122}), 59: (1, {'@': 122}), 34: (1, {'@': 122}), 60: (1, {'@': 122}), 61: (1, {'@': 122}), 62: (1, {'@': 122}), 37: (1, {'@': 122}), 63: (1, {'@': 122}), 64: (1, {'@': 122}), 65: (1, {'@': 122})}, 40: {66: (0, 280), 60: (0, 538), 67: (0, 241), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 262}), 33: (1, {'@': 262}), 30: (1, {'@': 262}), 0: (1, {'@': 262}), 31: (1, {'@': 262}), 8: (1, {'@': 262}), 9: (1, {'@': 262}), 37: (1, {'@': 262}), 12: (1, {'@': 262}), 14: (1, {'@': 262})}, 41: {63: (0, 74), 67: (0, 436), 84: (0, 411), 66: (0, 280), 58: (0, 448), 59: (0, 536), 60: (0, 538), 57: (0, 547), 64: (1, {'@': 188})}, 42: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 13: (0, 359), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 43: {66: (0, 280), 67: (0, 213), 60: (0, 538), 85: (0, 498), 34: (0, 493), 58: (0, 216), 59: (0, 536), 57: (0, 547)}, 44: {11: (1, {'@': 265}), 57: (1, {'@': 265}), 33: (1, {'@': 265}), 30: (1, {'@': 265}), 0: (1, {'@': 265}), 31: (1, {'@': 265}), 8: (1, {'@': 265}), 9: (1, {'@': 265}), 60: (1, {'@': 265}), 59: (1, {'@': 265}), 37: (1, {'@': 265}), 12: (1, {'@': 265}), 14: (1, {'@': 265})}, 45: {61: (0, 460)}, 46: {39: (1, {'@': 105}), 40: (1, {'@': 105}), 41: (1, {'@': 105}), 42: (1, {'@': 105}), 43: (1, {'@': 105}), 0: (1, {'@': 105}), 44: (1, {'@': 105}), 45: (1, {'@': 105}), 46: (1, {'@': 105}), 47: (1, {'@': 105}), 48: (1, {'@': 105}), 49: (1, {'@': 105}), 50: (1, {'@': 105}), 51: (1, {'@': 105}), 52: (1, {'@': 105}), 53: (1, {'@': 105}), 54: (1, {'@': 105}), 33: (1, {'@': 105}), 55: (1, {'@': 105}), 56: (1, {'@': 105}), 57: (1, {'@': 105}), 58: (1, {'@': 105}), 59: (1, {'@': 105}), 34: (1, {'@': 105}), 60: (1, {'@': 105}), 61: (1, {'@': 105}), 62: (1, {'@': 105}), 37: (1, {'@': 105}), 63: (1, {'@': 105}), 64: (1, {'@': 105}), 65: (1, {'@': 105})}, 47: {42: (1, {'@': 315}), 57: (1, {'@': 315}), 62: (1, {'@': 315}), 48: (1, {'@': 315}), 50: (1, {'@': 315}), 59: (1, {'@': 315}), 37: (1, {'@': 315}), 61: (1, {'@': 315}), 63: (1, {'@': 315}), 34: (1, {'@': 315}), 54: (1, {'@': 315}), 60: (1, {'@': 315}), 64: (1, {'@': 315}), 65: (1, {'@': 315}), 56: (1, {'@': 315}), 58: (1, {'@': 315})}, 48: {66: (0, 280), 67: (0, 242), 60: (0, 538), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 264}), 33: (1, {'@': 264}), 30: (1, {'@': 264}), 0: (1, {'@': 264}), 31: (1, {'@': 264}), 8: (1, {'@': 264}), 9: (1, {'@': 264}), 37: (1, {'@': 264}), 12: (1, {'@': 264}), 14: (1, {'@': 264})}, 49: {11: (1, {'@': 283}), 57: (1, {'@': 283}), 33: (1, {'@': 283}), 30: (1, {'@': 283}), 0: (1, {'@': 283}), 31: (1, {'@': 283}), 8: (1, {'@': 283}), 9: (1, {'@': 283}), 60: (1, {'@': 283}), 59: (1, {'@': 283}), 37: (1, {'@': 283}), 12: (1, {'@': 283}), 14: (1, {'@': 283})}, 50: {66: (0, 280), 67: (0, 527), 65: (0, 352), 86: (0, 297), 59: (0, 536), 61: (0, 409), 60: (0, 538), 57: (0, 547)}, 51: {66: (0, 280), 48: (0, 526), 60: (0, 538), 67: (0, 537), 59: (0, 536), 57: (0, 547)}, 52: {11: (1, {'@': 281}), 57: (1, {'@': 281}), 33: (1, {'@': 281}), 30: (1, {'@': 281}), 0: (1, {'@': 281}), 31: (1, {'@': 281}), 8: (1, {'@': 281}), 9: (1, {'@': 281}), 60: (1, {'@': 281}), 59: (1, {'@': 281}), 37: (1, {'@': 281}), 12: (1, {'@': 281}), 14: (1, {'@': 281})}, 53: {11: (1, {'@': 293}), 57: (1, {'@': 293}), 33: (1, {'@': 293}), 30: (1, {'@': 293}), 0: (1, {'@': 293}), 31: (1, {'@': 293}), 8: (1, {'@': 293}), 9: (1, {'@': 293}), 60: (1, {'@': 293}), 59: (1, {'@': 293}), 37: (1, {'@': 293}), 12: (1, {'@': 293}), 14: (1, {'@': 293})}, 54: {39: (1, {'@': 102}), 40: (1, {'@': 102}), 41: (1, {'@': 102}), 42: (1, {'@': 102}), 43: (1, {'@': 102}), 0: (1, {'@': 102}), 44: (1, {'@': 102}), 45: (1, {'@': 102}), 46: (1, {'@': 102}), 47: (1, {'@': 102}), 48: (1, {'@': 102}), 49: (1, {'@': 102}), 50: (1, {'@': 102}), 51: (1, {'@': 102}), 52: (1, {'@': 102}), 53: (1, {'@': 102}), 54: (1, {'@': 102}), 33: (1, {'@': 102}), 55: (1, {'@': 102}), 56: (1, {'@': 102}), 57: (1, {'@': 102}), 58: (1, {'@': 102}), 59: (1, {'@': 102}), 34: (1, {'@': 102}), 60: (1, {'@': 102}), 61: (1, {'@': 102}), 62: (1, {'@': 102}), 37: (1, {'@': 102}), 63: (1, {'@': 102}), 64: (1, {'@': 102}), 65: (1, {'@': 102})}, 55: {66: (0, 280), 60: (0, 538), 61: (0, 151), 59: (0, 536), 57: (0, 547), 67: (0, 157)}, 56: {39: (1, {'@': 244}), 40: (1, {'@': 244}), 41: (1, {'@': 244}), 42: (1, {'@': 244}), 43: (1, {'@': 244}), 0: (1, {'@': 244}), 44: (1, {'@': 244}), 45: (1, {'@': 244}), 46: (1, {'@': 244}), 47: (1, {'@': 244}), 48: (1, {'@': 244}), 49: (1, {'@': 244}), 50: (1, {'@': 244}), 51: (1, {'@': 244}), 52: (1, {'@': 244}), 53: (1, {'@': 244}), 54: (1, {'@': 244}), 33: (1, {'@': 244}), 55: (1, {'@': 244}), 56: (1, {'@': 244}), 57: (1, {'@': 244}), 58: (1, {'@': 244}), 59: (1, {'@': 244}), 34: (1, {'@': 244}), 60: (1, {'@': 244}), 61: (1, {'@': 244}), 62: (1, {'@': 244}), 37: (1, {'@': 244}), 63: (1, {'@': 244}), 64: (1, {'@': 244}), 65: (1, {'@': 244})}, 57: {64: (0, 466), 66: (0, 280), 67: (0, 245), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 58: {66: (0, 280), 86: (0, 275), 34: (0, 179), 65: (0, 352), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 215)}, 59: {39: (1, {'@': 209}), 40: (1, {'@': 209}), 41: (1, {'@': 209}), 42: (1, {'@': 209}), 43: (1, {'@': 209}), 0: (1, {'@': 209}), 44: (1, {'@': 209}), 45: (1, {'@': 209}), 46: (1, {'@': 209}), 47: (1, {'@': 209}), 48: (1, {'@': 209}), 49: (1, {'@': 209}), 50: (1, {'@': 209}), 51: (1, {'@': 209}), 52: (1, {'@': 209}), 53: (1, {'@': 209}), 54: (1, {'@': 209}), 33: (1, {'@': 209}), 55: (1, {'@': 209}), 56: (1, {'@': 209}), 57: (1, {'@': 209}), 58: (1, {'@': 209}), 59: (1, {'@': 209}), 34: (1, {'@': 209}), 60: (1, {'@': 209}), 61: (1, {'@': 209}), 62: (1, {'@': 209}), 37: (1, {'@': 209}), 63: (1, {'@': 209}), 64: (1, {'@': 209}), 65: (1, {'@': 209})}, 60: {39: (1, {'@': 212}), 40: (1, {'@': 212}), 41: (1, {'@': 212}), 42: (1, {'@': 212}), 43: (1, {'@': 212}), 0: (1, {'@': 212}), 44: (1, {'@': 212}), 45: (1, {'@': 212}), 46: (1, {'@': 212}), 47: (1, {'@': 212}), 48: (1, {'@': 212}), 49: (1, {'@': 212}), 50: (1, {'@': 212}), 51: (1, {'@': 212}), 52: (1, {'@': 212}), 53: (1, {'@': 212}), 54: (1, {'@': 212}), 33: (1, {'@': 212}), 55: (1, {'@': 212}), 56: (1, {'@': 212}), 57: (1, {'@': 212}), 58: (1, {'@': 212}), 59: (1, {'@': 212}), 34: (1, {'@': 212}), 60: (1, {'@': 212}), 61: (1, {'@': 212}), 62: (1, {'@': 212}), 37: (1, {'@': 212}), 63: (1, {'@': 212}), 64: (1, {'@': 212}), 65: (1, {'@': 212})}, 61: {66: (0, 280), 67: (0, 141), 34: (0, 304), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 62: {56: (1, {'@': 46})}, 63: {66: (0, 280), 67: (0, 166), 61: (0, 167), 65: (0, 352), 60: (0, 538), 86: (0, 169), 59: (0, 536), 57: (0, 547)}, 64: {39: (1, {'@': 215}), 40: (1, {'@': 215}), 41: (1, {'@': 215}), 42: (1, {'@': 215}), 43: (1, {'@': 215}), 0: (1, {'@': 215}), 44: (1, {'@': 215}), 45: (1, {'@': 215}), 46: (1, {'@': 215}), 47: (1, {'@': 215}), 48: (1, {'@': 215}), 49: (1, {'@': 215}), 50: (1, {'@': 215}), 51: (1, {'@': 215}), 52: (1, {'@': 215}), 53: (1, {'@': 215}), 54: (1, {'@': 215}), 33: (1, {'@': 215}), 55: (1, {'@': 215}), 56: (1, {'@': 215}), 57: (1, {'@': 215}), 58: (1, {'@': 215}), 59: (1, {'@': 215}), 34: (1, {'@': 215}), 60: (1, {'@': 215}), 61: (1, {'@': 215}), 62: (1, {'@': 215}), 37: (1, {'@': 215}), 63: (1, {'@': 215}), 64: (1, {'@': 215}), 65: (1, {'@': 215})}, 65: {11: (1, {'@': 295}), 57: (1, {'@': 295}), 33: (1, {'@': 295}), 30: (1, {'@': 295}), 0: (1, {'@': 295}), 31: (1, {'@': 295}), 8: (1, {'@': 295}), 9: (1, {'@': 295}), 60: (1, {'@': 295}), 59: (1, {'@': 295}), 37: (1, {'@': 295}), 12: (1, {'@': 295}), 14: (1, {'@': 295})}, 66: {}, 67: {39: (1, {'@': 258}), 40: (1, {'@': 258}), 41: (1, {'@': 258}), 42: (1, {'@': 258}), 43: (1, {'@': 258}), 0: (1, {'@': 258}), 44: (1, {'@': 258}), 45: (1, {'@': 258}), 46: (1, {'@': 258}), 47: (1, {'@': 258}), 48: (1, {'@': 258}), 49: (1, {'@': 258}), 50: (1, {'@': 258}), 51: (1, {'@': 258}), 52: (1, {'@': 258}), 53: (1, {'@': 258}), 54: (1, {'@': 258}), 33: (1, {'@': 258}), 55: (1, {'@': 258}), 56: (1, {'@': 258}), 57: (1, {'@': 258}), 58: (1, {'@': 258}), 59: (1, {'@': 258}), 34: (1, {'@': 258}), 60: (1, {'@': 258}), 61: (1, {'@': 258}), 62: (1, {'@': 258}), 37: (1, {'@': 258}), 63: (1, {'@': 258}), 64: (1, {'@': 258}), 65: (1, {'@': 258})}, 68: {47: (0, 142), 87: (0, 171), 33: (0, 282), 39: (1, {'@': 82}), 40: (1, {'@': 82}), 41: (1, {'@': 82}), 42: (1, {'@': 82}), 43: (1, {'@': 82}), 46: (1, {'@': 82}), 53: (1, {'@': 82}), 48: (1, {'@': 82}), 54: (1, {'@': 82}), 50: (1, {'@': 82}), 52: (1, {'@': 82}), 56: (1, {'@': 82}), 57: (1, {'@': 82}), 34: (1, {'@': 82}), 60: (1, {'@': 82}), 59: (1, {'@': 82}), 58: (1, {'@': 82}), 61: (1, {'@': 82}), 65: (1, {'@': 82}), 62: (1, {'@': 82}), 37: (1, {'@': 82}), 63: (1, {'@': 82}), 64: (1, {'@': 82})}, 69: {66: (0, 280), 34: (0, 478), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 185)}, 70: {61: (0, 60)}, 71: {39: (1, {'@': 218}), 40: (1, {'@': 218}), 41: (1, {'@': 218}), 42: (1, {'@': 218}), 43: (1, {'@': 218}), 0: (1, {'@': 218}), 44: (1, {'@': 218}), 45: (1, {'@': 218}), 46: (1, {'@': 218}), 47: (1, {'@': 218}), 48: (1, {'@': 218}), 49: (1, {'@': 218}), 50: (1, {'@': 218}), 51: (1, {'@': 218}), 52: (1, {'@': 218}), 53: (1, {'@': 218}), 54: (1, {'@': 218}), 33: (1, {'@': 218}), 55: (1, {'@': 218}), 56: (1, {'@': 218}), 57: (1, {'@': 218}), 58: (1, {'@': 218}), 59: (1, {'@': 218}), 34: (1, {'@': 218}), 60: (1, {'@': 218}), 61: (1, {'@': 218}), 62: (1, {'@': 218}), 37: (1, {'@': 218}), 63: (1, {'@': 218}), 64: (1, {'@': 218}), 65: (1, {'@': 218})}, 72: {39: (1, {'@': 112}), 40: (1, {'@': 112}), 41: (1, {'@': 112}), 42: (1, {'@': 112}), 43: (1, {'@': 112}), 0: (1, {'@': 112}), 44: (1, {'@': 112}), 45: (1, {'@': 112}), 46: (1, {'@': 112}), 47: (1, {'@': 112}), 48: (1, {'@': 112}), 49: (1, {'@': 112}), 50: (1, {'@': 112}), 51: (1, {'@': 112}), 52: (1, {'@': 112}), 53: (1, {'@': 112}), 54: (1, {'@': 112}), 33: (1, {'@': 112}), 55: (1, {'@': 112}), 56: (1, {'@': 112}), 57: (1, {'@': 112}), 58: (1, {'@': 112}), 59: (1, {'@': 112}), 34: (1, {'@': 112}), 60: (1, {'@': 112}), 61: (1, {'@': 112}), 62: (1, {'@': 112}), 37: (1, {'@': 112}), 63: (1, {'@': 112}), 64: (1, {'@': 112}), 65: (1, {'@': 112})}, 73: {48: (0, 83)}, 74: {66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 265), 64: (1, {'@': 186})}, 75: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 61: (0, 175), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 13: (0, 338), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 76: {39: (1, {'@': 116}), 40: (1, {'@': 116}), 41: (1, {'@': 116}), 42: (1, {'@': 116}), 43: (1, {'@': 116}), 0: (1, {'@': 116}), 44: (1, {'@': 116}), 45: (1, {'@': 116}), 46: (1, {'@': 116}), 47: (1, {'@': 116}), 48: (1, {'@': 116}), 49: (1, {'@': 116}), 50: (1, {'@': 116}), 51: (1, {'@': 116}), 52: (1, {'@': 116}), 53: (1, {'@': 116}), 54: (1, {'@': 116}), 33: (1, {'@': 116}), 55: (1, {'@': 116}), 56: (1, {'@': 116}), 57: (1, {'@': 116}), 58: (1, {'@': 116}), 59: (1, {'@': 116}), 34: (1, {'@': 116}), 60: (1, {'@': 116}), 61: (1, {'@': 116}), 62: (1, {'@': 116}), 37: (1, {'@': 116}), 63: (1, {'@': 116}), 64: (1, {'@': 116}), 65: (1, {'@': 116})}, 77: {39: (1, {'@': 192}), 40: (1, {'@': 192}), 41: (1, {'@': 192}), 42: (1, {'@': 192}), 43: (1, {'@': 192}), 0: (1, {'@': 192}), 44: (1, {'@': 192}), 45: (1, {'@': 192}), 46: (1, {'@': 192}), 47: (1, {'@': 192}), 48: (1, {'@': 192}), 49: (1, {'@': 192}), 50: (1, {'@': 192}), 51: (1, {'@': 192}), 52: (1, {'@': 192}), 53: (1, {'@': 192}), 54: (1, {'@': 192}), 33: (1, {'@': 192}), 55: (1, {'@': 192}), 56: (1, {'@': 192}), 57: (1, {'@': 192}), 58: (1, {'@': 192}), 59: (1, {'@': 192}), 34: (1, {'@': 192}), 60: (1, {'@': 192}), 61: (1, {'@': 192}), 62: (1, {'@': 192}), 37: (1, {'@': 192}), 63: (1, {'@': 192}), 64: (1, {'@': 192}), 65: (1, {'@': 192})}, 78: {79: (0, 434)}, 79: {48: (0, 48)}, 80: {39: (1, {'@': 190}), 40: (1, {'@': 190}), 41: (1, {'@': 190}), 42: (1, {'@': 190}), 43: (1, {'@': 190}), 0: (1, {'@': 190}), 44: (1, {'@': 190}), 45: (1, {'@': 190}), 46: (1, {'@': 190}), 47: (1, {'@': 190}), 48: (1, {'@': 190}), 49: (1, {'@': 190}), 50: (1, {'@': 190}), 51: (1, {'@': 190}), 52: (1, {'@': 190}), 53: (1, {'@': 190}), 54: (1, {'@': 190}), 33: (1, {'@': 190}), 55: (1, {'@': 190}), 56: (1, {'@': 190}), 57: (1, {'@': 190}), 58: (1, {'@': 190}), 59: (1, {'@': 190}), 34: (1, {'@': 190}), 60: (1, {'@': 190}), 61: (1, {'@': 190}), 62: (1, {'@': 190}), 37: (1, {'@': 190}), 63: (1, {'@': 190}), 64: (1, {'@': 190}), 65: (1, {'@': 190})}, 81: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 20: (0, 462), 21: (0, 238), 22: (0, 497), 67: (0, 187), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 61: (0, 191), 32: (0, 476), 33: (0, 37), 13: (0, 326), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 82: {39: (1, {'@': 127}), 40: (1, {'@': 127}), 41: (1, {'@': 127}), 42: (1, {'@': 127}), 43: (1, {'@': 127}), 0: (1, {'@': 127}), 44: (1, {'@': 127}), 45: (1, {'@': 127}), 46: (1, {'@': 127}), 47: (1, {'@': 127}), 48: (1, {'@': 127}), 49: (1, {'@': 127}), 50: (1, {'@': 127}), 51: (1, {'@': 127}), 52: (1, {'@': 127}), 53: (1, {'@': 127}), 54: (1, {'@': 127}), 33: (1, {'@': 127}), 55: (1, {'@': 127}), 56: (1, {'@': 127}), 57: (1, {'@': 127}), 58: (1, {'@': 127}), 59: (1, {'@': 127}), 34: (1, {'@': 127}), 60: (1, {'@': 127}), 61: (1, {'@': 127}), 62: (1, {'@': 127}), 37: (1, {'@': 127}), 63: (1, {'@': 127}), 64: (1, {'@': 127}), 65: (1, {'@': 127})}, 83: {66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 14), 11: (1, {'@': 270}), 33: (1, {'@': 270}), 30: (1, {'@': 270}), 0: (1, {'@': 270}), 31: (1, {'@': 270}), 8: (1, {'@': 270}), 9: (1, {'@': 270}), 37: (1, {'@': 270}), 12: (1, {'@': 270}), 14: (1, {'@': 270})}, 84: {39: (1, {'@': 175}), 40: (1, {'@': 175}), 41: (1, {'@': 175}), 42: (1, {'@': 175}), 43: (1, {'@': 175}), 0: (1, {'@': 175}), 44: (1, {'@': 175}), 45: (1, {'@': 175}), 46: (1, {'@': 175}), 47: (1, {'@': 175}), 48: (1, {'@': 175}), 49: (1, {'@': 175}), 50: (1, {'@': 175}), 51: (1, {'@': 175}), 52: (1, {'@': 175}), 53: (1, {'@': 175}), 54: (1, {'@': 175}), 33: (1, {'@': 175}), 55: (1, {'@': 175}), 56: (1, {'@': 175}), 57: (1, {'@': 175}), 58: (1, {'@': 175}), 59: (1, {'@': 175}), 34: (1, {'@': 175}), 60: (1, {'@': 175}), 61: (1, {'@': 175}), 62: (1, {'@': 175}), 37: (1, {'@': 175}), 63: (1, {'@': 175}), 64: (1, {'@': 175}), 65: (1, {'@': 175})}, 85: {61: (0, 135)}, 86: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 67: (0, 9), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 13: (0, 19), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 87: {67: (0, 194), 66: (0, 280), 79: (0, 204), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 88: {48: (0, 233)}, 89: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 13: (0, 147), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 90: {46: (0, 168), 88: (0, 377), 41: (0, 193), 42: (1, {'@': 78}), 54: (1, {'@': 78}), 50: (1, {'@': 78}), 53: (1, {'@': 78}), 48: (1, {'@': 78}), 56: (1, {'@': 78}), 57: (1, {'@': 78}), 34: (1, {'@': 78}), 60: (1, {'@': 78}), 59: (1, {'@': 78}), 58: (1, {'@': 78}), 61: (1, {'@': 78}), 65: (1, {'@': 78}), 62: (1, {'@': 78}), 37: (1, {'@': 78}), 63: (1, {'@': 78}), 64: (1, {'@': 78})}, 91: {39: (1, {'@': 254}), 40: (1, {'@': 254}), 41: (1, {'@': 254}), 42: (1, {'@': 254}), 43: (1, {'@': 254}), 0: (1, {'@': 254}), 44: (1, {'@': 254}), 45: (1, {'@': 254}), 46: (1, {'@': 254}), 47: (1, {'@': 254}), 48: (1, {'@': 254}), 49: (1, {'@': 254}), 50: (1, {'@': 254}), 51: (1, {'@': 254}), 52: (1, {'@': 254}), 53: (1, {'@': 254}), 54: (1, {'@': 254}), 33: (1, {'@': 254}), 55: (1, {'@': 254}), 56: (1, {'@': 254}), 57: (1, {'@': 254}), 58: (1, {'@': 254}), 59: (1, {'@': 254}), 34: (1, {'@': 254}), 60: (1, {'@': 254}), 61: (1, {'@': 254}), 62: (1, {'@': 254}), 37: (1, {'@': 254}), 63: (1, {'@': 254}), 64: (1, {'@': 254}), 65: (1, {'@': 254})}, 92: {39: (1, {'@': 203}), 40: (1, {'@': 203}), 41: (1, {'@': 203}), 42: (1, {'@': 203}), 43: (1, {'@': 203}), 0: (1, {'@': 203}), 44: (1, {'@': 203}), 45: (1, {'@': 203}), 46: (1, {'@': 203}), 47: (1, {'@': 203}), 48: (1, {'@': 203}), 49: (1, {'@': 203}), 50: (1, {'@': 203}), 51: (1, {'@': 203}), 52: (1, {'@': 203}), 53: (1, {'@': 203}), 54: (1, {'@': 203}), 33: (1, {'@': 203}), 55: (1, {'@': 203}), 56: (1, {'@': 203}), 57: (1, {'@': 203}), 58: (1, {'@': 203}), 59: (1, {'@': 203}), 34: (1, {'@': 203}), 60: (1, {'@': 203}), 61: (1, {'@': 203}), 62: (1, {'@': 203}), 37: (1, {'@': 203}), 63: (1, {'@': 203}), 64: (1, {'@': 203}), 65: (1, {'@': 203})}, 93: {66: (0, 280), 60: (0, 538), 67: (0, 335), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 274}), 33: (1, {'@': 274}), 30: (1, {'@': 274}), 0: (1, {'@': 274}), 31: (1, {'@': 274}), 8: (1, {'@': 274}), 9: (1, {'@': 274}), 37: (1, {'@': 274}), 12: (1, {'@': 274}), 14: (1, {'@': 274})}, 94: {39: (1, {'@': 189}), 40: (1, {'@': 189}), 41: (1, {'@': 189}), 42: (1, {'@': 189}), 43: (1, {'@': 189}), 0: (1, {'@': 189}), 44: (1, {'@': 189}), 45: (1, {'@': 189}), 46: (1, {'@': 189}), 47: (1, {'@': 189}), 48: (1, {'@': 189}), 49: (1, {'@': 189}), 50: (1, {'@': 189}), 51: (1, {'@': 189}), 52: (1, {'@': 189}), 53: (1, {'@': 189}), 54: (1, {'@': 189}), 33: (1, {'@': 189}), 55: (1, {'@': 189}), 56: (1, {'@': 189}), 57: (1, {'@': 189}), 58: (1, {'@': 189}), 59: (1, {'@': 189}), 34: (1, {'@': 189}), 60: (1, {'@': 189}), 61: (1, {'@': 189}), 62: (1, {'@': 189}), 37: (1, {'@': 189}), 63: (1, {'@': 189}), 64: (1, {'@': 189}), 65: (1, {'@': 189})}, 95: {57: (1, {'@': 333}), 63: (1, {'@': 333}), 60: (1, {'@': 333}), 64: (1, {'@': 333}), 59: (1, {'@': 333}), 58: (1, {'@': 333}), 61: (1, {'@': 333})}, 96: {48: (0, 358)}, 97: {86: (0, 188), 67: (0, 183), 66: (0, 280), 65: (0, 352), 59: (0, 536), 34: (0, 211), 60: (0, 538), 57: (0, 547)}, 98: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 67: (0, 227), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 13: (0, 73), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 99: {39: (1, {'@': 176}), 40: (1, {'@': 176}), 41: (1, {'@': 176}), 42: (1, {'@': 176}), 43: (1, {'@': 176}), 0: (1, {'@': 176}), 44: (1, {'@': 176}), 45: (1, {'@': 176}), 46: (1, {'@': 176}), 47: (1, {'@': 176}), 48: (1, {'@': 176}), 49: (1, {'@': 176}), 50: (1, {'@': 176}), 51: (1, {'@': 176}), 52: (1, {'@': 176}), 53: (1, {'@': 176}), 54: (1, {'@': 176}), 33: (1, {'@': 176}), 55: (1, {'@': 176}), 56: (1, {'@': 176}), 57: (1, {'@': 176}), 58: (1, {'@': 176}), 59: (1, {'@': 176}), 34: (1, {'@': 176}), 60: (1, {'@': 176}), 61: (1, {'@': 176}), 62: (1, {'@': 176}), 37: (1, {'@': 176}), 63: (1, {'@': 176}), 64: (1, {'@': 176}), 65: (1, {'@': 176})}, 100: {11: (1, {'@': 297}), 57: (1, {'@': 297}), 33: (1, {'@': 297}), 30: (1, {'@': 297}), 0: (1, {'@': 297}), 31: (1, {'@': 297}), 8: (1, {'@': 297}), 9: (1, {'@': 297}), 60: (1, {'@': 297}), 59: (1, {'@': 297}), 37: (1, {'@': 297}), 12: (1, {'@': 297}), 14: (1, {'@': 297})}, 101: {39: (1, {'@': 207}), 40: (1, {'@': 207}), 41: (1, {'@': 207}), 42: (1, {'@': 207}), 43: (1, {'@': 207}), 0: (1, {'@': 207}), 44: (1, {'@': 207}), 45: (1, {'@': 207}), 46: (1, {'@': 207}), 47: (1, {'@': 207}), 48: (1, {'@': 207}), 49: (1, {'@': 207}), 50: (1, {'@': 207}), 51: (1, {'@': 207}), 52: (1, {'@': 207}), 53: (1, {'@': 207}), 54: (1, {'@': 207}), 33: (1, {'@': 207}), 55: (1, {'@': 207}), 56: (1, {'@': 207}), 57: (1, {'@': 207}), 58: (1, {'@': 207}), 59: (1, {'@': 207}), 34: (1, {'@': 207}), 60: (1, {'@': 207}), 61: (1, {'@': 207}), 62: (1, {'@': 207}), 37: (1, {'@': 207}), 63: (1, {'@': 207}), 64: (1, {'@': 207}), 65: (1, {'@': 207})}, 102: {39: (1, {'@': 132}), 40: (1, {'@': 132}), 41: (1, {'@': 132}), 42: (1, {'@': 132}), 43: (1, {'@': 132}), 0: (1, {'@': 132}), 44: (1, {'@': 132}), 45: (1, {'@': 132}), 46: (1, {'@': 132}), 47: (1, {'@': 132}), 48: (1, {'@': 132}), 49: (1, {'@': 132}), 50: (1, {'@': 132}), 51: (1, {'@': 132}), 52: (1, {'@': 132}), 53: (1, {'@': 132}), 54: (1, {'@': 132}), 33: (1, {'@': 132}), 55: (1, {'@': 132}), 56: (1, {'@': 132}), 57: (1, {'@': 132}), 58: (1, {'@': 132}), 59: (1, {'@': 132}), 34: (1, {'@': 132}), 60: (1, {'@': 132}), 61: (1, {'@': 132}), 62: (1, {'@': 132}), 37: (1, {'@': 132}), 63: (1, {'@': 132}), 64: (1, {'@': 132}), 65: (1, {'@': 132})}, 103: {39: (1, {'@': 205}), 40: (1, {'@': 205}), 41: (1, {'@': 205}), 42: (1, {'@': 205}), 43: (1, {'@': 205}), 0: (1, {'@': 205}), 44: (1, {'@': 205}), 45: (1, {'@': 205}), 46: (1, {'@': 205}), 47: (1, {'@': 205}), 48: (1, {'@': 205}), 49: (1, {'@': 205}), 50: (1, {'@': 205}), 51: (1, {'@': 205}), 52: (1, {'@': 205}), 53: (1, {'@': 205}), 54: (1, {'@': 205}), 33: (1, {'@': 205}), 55: (1, {'@': 205}), 56: (1, {'@': 205}), 57: (1, {'@': 205}), 58: (1, {'@': 205}), 59: (1, {'@': 205}), 34: (1, {'@': 205}), 60: (1, {'@': 205}), 61: (1, {'@': 205}), 62: (1, {'@': 205}), 37: (1, {'@': 205}), 63: (1, {'@': 205}), 64: (1, {'@': 205}), 65: (1, {'@': 205})}, 104: {39: (1, {'@': 154}), 40: (1, {'@': 154}), 41: (1, {'@': 154}), 42: (1, {'@': 154}), 43: (1, {'@': 154}), 0: (1, {'@': 154}), 44: (1, {'@': 154}), 45: (1, {'@': 154}), 46: (1, {'@': 154}), 47: (1, {'@': 154}), 48: (1, {'@': 154}), 49: (1, {'@': 154}), 50: (1, {'@': 154}), 51: (1, {'@': 154}), 52: (1, {'@': 154}), 53: (1, {'@': 154}), 54: (1, {'@': 154}), 33: (1, {'@': 154}), 55: (1, {'@': 154}), 56: (1, {'@': 154}), 57: (1, {'@': 154}), 58: (1, {'@': 154}), 59: (1, {'@': 154}), 34: (1, {'@': 154}), 60: (1, {'@': 154}), 61: (1, {'@': 154}), 62: (1, {'@': 154}), 37: (1, {'@': 154}), 63: (1, {'@': 154}), 64: (1, {'@': 154}), 65: (1, {'@': 154})}, 105: {39: (1, {'@': 153}), 40: (1, {'@': 153}), 41: (1, {'@': 153}), 42: (1, {'@': 153}), 43: (1, {'@': 153}), 0: (1, {'@': 153}), 44: (1, {'@': 153}), 45: (1, {'@': 153}), 46: (1, {'@': 153}), 47: (1, {'@': 153}), 48: (1, {'@': 153}), 49: (1, {'@': 153}), 50: (1, {'@': 153}), 51: (1, {'@': 153}), 52: (1, {'@': 153}), 53: (1, {'@': 153}), 54: (1, {'@': 153}), 33: (1, {'@': 153}), 55: (1, {'@': 153}), 56: (1, {'@': 153}), 57: (1, {'@': 153}), 58: (1, {'@': 153}), 59: (1, {'@': 153}), 34: (1, {'@': 153}), 60: (1, {'@': 153}), 61: (1, {'@': 153}), 62: (1, {'@': 153}), 37: (1, {'@': 153}), 63: (1, {'@': 153}), 64: (1, {'@': 153}), 65: (1, {'@': 153})}, 106: {50: (1, {'@': 67}), 48: (1, {'@': 67}), 56: (1, {'@': 67}), 57: (1, {'@': 67}), 60: (1, {'@': 67}), 59: (1, {'@': 67}), 34: (1, {'@': 67}), 58: (1, {'@': 67}), 61: (1, {'@': 67}), 65: (1, {'@': 67}), 62: (1, {'@': 67}), 64: (1, {'@': 67}), 63: (1, {'@': 67}), 37: (1, {'@': 67})}, 107: {39: (1, {'@': 210}), 40: (1, {'@': 210}), 41: (1, {'@': 210}), 42: (1, {'@': 210}), 43: (1, {'@': 210}), 0: (1, {'@': 210}), 44: (1, {'@': 210}), 45: (1, {'@': 210}), 46: (1, {'@': 210}), 47: (1, {'@': 210}), 48: (1, {'@': 210}), 49: (1, {'@': 210}), 50: (1, {'@': 210}), 51: (1, {'@': 210}), 52: (1, {'@': 210}), 53: (1, {'@': 210}), 54: (1, {'@': 210}), 33: (1, {'@': 210}), 55: (1, {'@': 210}), 56: (1, {'@': 210}), 57: (1, {'@': 210}), 58: (1, {'@': 210}), 59: (1, {'@': 210}), 34: (1, {'@': 210}), 60: (1, {'@': 210}), 61: (1, {'@': 210}), 62: (1, {'@': 210}), 37: (1, {'@': 210}), 63: (1, {'@': 210}), 64: (1, {'@': 210}), 65: (1, {'@': 210})}, 108: {11: (1, {'@': 91}), 0: (1, {'@': 91}), 31: (1, {'@': 91}), 8: (1, {'@': 91}), 9: (1, {'@': 91}), 37: (1, {'@': 91}), 12: (1, {'@': 91}), 30: (1, {'@': 91})}, 109: {39: (1, {'@': 204}), 40: (1, {'@': 204}), 41: (1, {'@': 204}), 42: (1, {'@': 204}), 43: (1, {'@': 204}), 0: (1, {'@': 204}), 44: (1, {'@': 204}), 45: (1, {'@': 204}), 46: (1, {'@': 204}), 47: (1, {'@': 204}), 48: (1, {'@': 204}), 49: (1, {'@': 204}), 50: (1, {'@': 204}), 51: (1, {'@': 204}), 52: (1, {'@': 204}), 53: (1, {'@': 204}), 54: (1, {'@': 204}), 33: (1, {'@': 204}), 55: (1, {'@': 204}), 56: (1, {'@': 204}), 57: (1, {'@': 204}), 58: (1, {'@': 204}), 59: (1, {'@': 204}), 34: (1, {'@': 204}), 60: (1, {'@': 204}), 61: (1, {'@': 204}), 62: (1, {'@': 204}), 37: (1, {'@': 204}), 63: (1, {'@': 204}), 64: (1, {'@': 204}), 65: (1, {'@': 204})}, 110: {67: (0, 213), 66: (0, 280), 34: (0, 373), 58: (0, 216), 59: (0, 536), 85: (0, 0), 89: (0, 43), 60: (0, 538), 57: (0, 547)}, 111: {66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 53), 11: (1, {'@': 294}), 33: (1, {'@': 294}), 30: (1, {'@': 294}), 0: (1, {'@': 294}), 31: (1, {'@': 294}), 8: (1, {'@': 294}), 9: (1, {'@': 294}), 37: (1, {'@': 294}), 12: (1, {'@': 294}), 14: (1, {'@': 294})}, 112: {61: (0, 92)}, 113: {64: (0, 328)}, 114: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 67: (0, 89), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 13: (0, 96), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 115: {39: (1, {'@': 241}), 40: (1, {'@': 241}), 41: (1, {'@': 241}), 42: (1, {'@': 241}), 43: (1, {'@': 241}), 0: (1, {'@': 241}), 44: (1, {'@': 241}), 45: (1, {'@': 241}), 46: (1, {'@': 241}), 47: (1, {'@': 241}), 48: (1, {'@': 241}), 49: (1, {'@': 241}), 50: (1, {'@': 241}), 51: (1, {'@': 241}), 52: (1, {'@': 241}), 53: (1, {'@': 241}), 54: (1, {'@': 241}), 33: (1, {'@': 241}), 55: (1, {'@': 241}), 56: (1, {'@': 241}), 57: (1, {'@': 241}), 58: (1, {'@': 241}), 59: (1, {'@': 241}), 34: (1, {'@': 241}), 60: (1, {'@': 241}), 61: (1, {'@': 241}), 62: (1, {'@': 241}), 37: (1, {'@': 241}), 63: (1, {'@': 241}), 64: (1, {'@': 241}), 65: (1, {'@': 241})}, 116: {11: (1, {'@': 90}), 0: (1, {'@': 90}), 31: (1, {'@': 90}), 8: (1, {'@': 90}), 9: (1, {'@': 90}), 37: (1, {'@': 90}), 12: (1, {'@': 90}), 30: (1, {'@': 90})}, 117: {48: (0, 93)}, 118: {39: (1, {'@': 124}), 40: (1, {'@': 124}), 41: (1, {'@': 124}), 42: (1, {'@': 124}), 43: (1, {'@': 124}), 0: (1, {'@': 124}), 44: (1, {'@': 124}), 45: (1, {'@': 124}), 46: (1, {'@': 124}), 47: (1, {'@': 124}), 48: (1, {'@': 124}), 49: (1, {'@': 124}), 50: (1, {'@': 124}), 51: (1, {'@': 124}), 52: (1, {'@': 124}), 53: (1, {'@': 124}), 54: (1, {'@': 124}), 33: (1, {'@': 124}), 55: (1, {'@': 124}), 56: (1, {'@': 124}), 57: (1, {'@': 124}), 58: (1, {'@': 124}), 59: (1, {'@': 124}), 34: (1, {'@': 124}), 60: (1, {'@': 124}), 61: (1, {'@': 124}), 62: (1, {'@': 124}), 37: (1, {'@': 124}), 63: (1, {'@': 124}), 64: (1, {'@': 124}), 65: (1, {'@': 124})}, 119: {0: (0, 525), 1: (0, 229), 2: (0, 217), 67: (0, 509), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 13: (0, 50), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 120: {39: (1, {'@': 129}), 40: (1, {'@': 129}), 41: (1, {'@': 129}), 42: (1, {'@': 129}), 43: (1, {'@': 129}), 0: (1, {'@': 129}), 44: (1, {'@': 129}), 45: (1, {'@': 129}), 46: (1, {'@': 129}), 47: (1, {'@': 129}), 48: (1, {'@': 129}), 49: (1, {'@': 129}), 50: (1, {'@': 129}), 51: (1, {'@': 129}), 52: (1, {'@': 129}), 53: (1, {'@': 129}), 54: (1, {'@': 129}), 33: (1, {'@': 129}), 55: (1, {'@': 129}), 56: (1, {'@': 129}), 57: (1, {'@': 129}), 58: (1, {'@': 129}), 59: (1, {'@': 129}), 34: (1, {'@': 129}), 60: (1, {'@': 129}), 61: (1, {'@': 129}), 62: (1, {'@': 129}), 37: (1, {'@': 129}), 63: (1, {'@': 129}), 64: (1, {'@': 129}), 65: (1, {'@': 129})}, 121: {66: (0, 280), 34: (0, 367), 60: (0, 538), 59: (0, 536), 67: (0, 356), 57: (0, 547)}, 122: {64: (0, 84), 66: (0, 280), 60: (0, 538), 59: (0, 536), 67: (0, 342), 57: (0, 547)}, 123: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 13: (0, 197), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 124: {34: (0, 383)}, 125: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 368), 17: (0, 264), 19: (0, 465), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 126: {39: (1, {'@': 250}), 40: (1, {'@': 250}), 41: (1, {'@': 250}), 42: (1, {'@': 250}), 43: (1, {'@': 250}), 0: (1, {'@': 250}), 44: (1, {'@': 250}), 45: (1, {'@': 250}), 46: (1, {'@': 250}), 47: (1, {'@': 250}), 48: (1, {'@': 250}), 49: (1, {'@': 250}), 50: (1, {'@': 250}), 51: (1, {'@': 250}), 52: (1, {'@': 250}), 53: (1, {'@': 250}), 54: (1, {'@': 250}), 33: (1, {'@': 250}), 55: (1, {'@': 250}), 56: (1, {'@': 250}), 57: (1, {'@': 250}), 58: (1, {'@': 250}), 59: (1, {'@': 250}), 34: (1, {'@': 250}), 60: (1, {'@': 250}), 61: (1, {'@': 250}), 62: (1, {'@': 250}), 37: (1, {'@': 250}), 63: (1, {'@': 250}), 64: (1, {'@': 250}), 65: (1, {'@': 250})}, 127: {61: (0, 226)}, 128: {50: (1, {'@': 64}), 48: (1, {'@': 64}), 56: (1, {'@': 64}), 57: (1, {'@': 64}), 60: (1, {'@': 64}), 59: (1, {'@': 64}), 34: (1, {'@': 64}), 58: (1, {'@': 64}), 61: (1, {'@': 64}), 65: (1, {'@': 64}), 62: (1, {'@': 64}), 64: (1, {'@': 64}), 63: (1, {'@': 64}), 37: (1, {'@': 64})}, 129: {34: (0, 355)}, 130: {66: (0, 280), 60: (0, 538), 59: (0, 536), 67: (0, 65), 57: (0, 547), 11: (1, {'@': 296}), 33: (1, {'@': 296}), 30: (1, {'@': 296}), 0: (1, {'@': 296}), 31: (1, {'@': 296}), 8: (1, {'@': 296}), 9: (1, {'@': 296}), 37: (1, {'@': 296}), 12: (1, {'@': 296}), 14: (1, {'@': 296})}, 131: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 1: (0, 180), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 132: {66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 113), 64: (0, 54)}, 133: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 13: (0, 232), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 134: {62: (0, 541)}, 135: {39: (1, {'@': 126}), 40: (1, {'@': 126}), 41: (1, {'@': 126}), 42: (1, {'@': 126}), 43: (1, {'@': 126}), 0: (1, {'@': 126}), 44: (1, {'@': 126}), 45: (1, {'@': 126}), 46: (1, {'@': 126}), 47: (1, {'@': 126}), 48: (1, {'@': 126}), 49: (1, {'@': 126}), 50: (1, {'@': 126}), 51: (1, {'@': 126}), 52: (1, {'@': 126}), 53: (1, {'@': 126}), 54: (1, {'@': 126}), 33: (1, {'@': 126}), 55: (1, {'@': 126}), 56: (1, {'@': 126}), 57: (1, {'@': 126}), 58: (1, {'@': 126}), 59: (1, {'@': 126}), 34: (1, {'@': 126}), 60: (1, {'@': 126}), 61: (1, {'@': 126}), 62: (1, {'@': 126}), 37: (1, {'@': 126}), 63: (1, {'@': 126}), 64: (1, {'@': 126}), 65: (1, {'@': 126})}, 136: {39: (1, {'@': 248}), 40: (1, {'@': 248}), 41: (1, {'@': 248}), 42: (1, {'@': 248}), 43: (1, {'@': 248}), 0: (1, {'@': 248}), 44: (1, {'@': 248}), 45: (1, {'@': 248}), 46: (1, {'@': 248}), 47: (1, {'@': 248}), 48: (1, {'@': 248}), 49: (1, {'@': 248}), 50: (1, {'@': 248}), 51: (1, {'@': 248}), 52: (1, {'@': 248}), 53: (1, {'@': 248}), 54: (1, {'@': 248}), 33: (1, {'@': 248}), 55: (1, {'@': 248}), 56: (1, {'@': 248}), 57: (1, {'@': 248}), 58: (1, {'@': 248}), 59: (1, {'@': 248}), 34: (1, {'@': 248}), 60: (1, {'@': 248}), 61: (1, {'@': 248}), 62: (1, {'@': 248}), 37: (1, {'@': 248}), 63: (1, {'@': 248}), 64: (1, {'@': 248}), 65: (1, {'@': 248})}, 137: {0: (0, 525), 1: (0, 229), 2: (0, 217), 80: (0, 8), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 90: (0, 182), 11: (0, 279), 12: (0, 270), 13: (0, 306), 14: (0, 221), 15: (0, 274), 16: (0, 259), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 22: (0, 497), 21: (0, 238), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 61: (0, 325), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 138: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 1: (0, 203), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 139: {50: (1, {'@': 61}), 48: (1, {'@': 61}), 56: (1, {'@': 61}), 57: (1, {'@': 61}), 60: (1, {'@': 61}), 59: (1, {'@': 61}), 34: (1, {'@': 61}), 58: (1, {'@': 61}), 61: (1, {'@': 61}), 65: (1, {'@': 61}), 62: (1, {'@': 61}), 64: (1, {'@': 61}), 63: (1, {'@': 61}), 37: (1, {'@': 61})}, 140: {48: (0, 206)}, 141: {34: (0, 4)}, 142: {11: (1, {'@': 88}), 0: (1, {'@': 88}), 31: (1, {'@': 88}), 8: (1, {'@': 88}), 9: (1, {'@': 88}), 37: (1, {'@': 88}), 12: (1, {'@': 88}), 30: (1, {'@': 88})}, 143: {39: (1, {'@': 253}), 40: (1, {'@': 253}), 41: (1, {'@': 253}), 42: (1, {'@': 253}), 43: (1, {'@': 253}), 0: (1, {'@': 253}), 44: (1, {'@': 253}), 45: (1, {'@': 253}), 46: (1, {'@': 253}), 47: (1, {'@': 253}), 48: (1, {'@': 253}), 49: (1, {'@': 253}), 50: (1, {'@': 253}), 51: (1, {'@': 253}), 52: (1, {'@': 253}), 53: (1, {'@': 253}), 54: (1, {'@': 253}), 33: (1, {'@': 253}), 55: (1, {'@': 253}), 56: (1, {'@': 253}), 57: (1, {'@': 253}), 58: (1, {'@': 253}), 59: (1, {'@': 253}), 34: (1, {'@': 253}), 60: (1, {'@': 253}), 61: (1, {'@': 253}), 62: (1, {'@': 253}), 37: (1, {'@': 253}), 63: (1, {'@': 253}), 64: (1, {'@': 253}), 65: (1, {'@': 253})}, 144: {39: (1, {'@': 191}), 40: (1, {'@': 191}), 41: (1, {'@': 191}), 42: (1, {'@': 191}), 43: (1, {'@': 191}), 0: (1, {'@': 191}), 44: (1, {'@': 191}), 45: (1, {'@': 191}), 46: (1, {'@': 191}), 47: (1, {'@': 191}), 48: (1, {'@': 191}), 49: (1, {'@': 191}), 50: (1, {'@': 191}), 51: (1, {'@': 191}), 52: (1, {'@': 191}), 53: (1, {'@': 191}), 54: (1, {'@': 191}), 33: (1, {'@': 191}), 55: (1, {'@': 191}), 56: (1, {'@': 191}), 57: (1, {'@': 191}), 58: (1, {'@': 191}), 59: (1, {'@': 191}), 34: (1, {'@': 191}), 60: (1, {'@': 191}), 61: (1, {'@': 191}), 62: (1, {'@': 191}), 37: (1, {'@': 191}), 63: (1, {'@': 191}), 64: (1, {'@': 191}), 65: (1, {'@': 191})}, 145: {50: (1, {'@': 66}), 48: (1, {'@': 66}), 56: (1, {'@': 66}), 57: (1, {'@': 66}), 60: (1, {'@': 66}), 59: (1, {'@': 66}), 34: (1, {'@': 66}), 58: (1, {'@': 66}), 61: (1, {'@': 66}), 65: (1, {'@': 66}), 62: (1, {'@': 66}), 64: (1, {'@': 66}), 63: (1, {'@': 66}), 37: (1, {'@': 66})}, 146: {39: (1, {'@': 221}), 40: (1, {'@': 221}), 41: (1, {'@': 221}), 42: (1, {'@': 221}), 43: (1, {'@': 221}), 0: (1, {'@': 221}), 44: (1, {'@': 221}), 45: (1, {'@': 221}), 46: (1, {'@': 221}), 47: (1, {'@': 221}), 48: (1, {'@': 221}), 49: (1, {'@': 221}), 50: (1, {'@': 221}), 51: (1, {'@': 221}), 52: (1, {'@': 221}), 53: (1, {'@': 221}), 54: (1, {'@': 221}), 33: (1, {'@': 221}), 55: (1, {'@': 221}), 56: (1, {'@': 221}), 57: (1, {'@': 221}), 58: (1, {'@': 221}), 59: (1, {'@': 221}), 34: (1, {'@': 221}), 60: (1, {'@': 221}), 61: (1, {'@': 221}), 62: (1, {'@': 221}), 37: (1, {'@': 221}), 63: (1, {'@': 221}), 64: (1, {'@': 221}), 65: (1, {'@': 221})}, 147: {48: (0, 372)}, 148: {39: (1, {'@': 224}), 40: (1, {'@': 224}), 41: (1, {'@': 224}), 42: (1, {'@': 224}), 43: (1, {'@': 224}), 0: (1, {'@': 224}), 44: (1, {'@': 224}), 45: (1, {'@': 224}), 46: (1, {'@': 224}), 47: (1, {'@': 224}), 48: (1, {'@': 224}), 49: (1, {'@': 224}), 50: (1, {'@': 224}), 51: (1, {'@': 224}), 52: (1, {'@': 224}), 53: (1, {'@': 224}), 54: (1, {'@': 224}), 33: (1, {'@': 224}), 55: (1, {'@': 224}), 56: (1, {'@': 224}), 57: (1, {'@': 224}), 58: (1, {'@': 224}), 59: (1, {'@': 224}), 34: (1, {'@': 224}), 60: (1, {'@': 224}), 61: (1, {'@': 224}), 62: (1, {'@': 224}), 37: (1, {'@': 224}), 63: (1, {'@': 224}), 64: (1, {'@': 224}), 65: (1, {'@': 224})}, 149: {34: (0, 327)}, 150: {2: (0, 307), 17: (0, 381), 30: (0, 17), 32: (0, 378), 37: (0, 158)}, 151: {39: (1, {'@': 208}), 40: (1, {'@': 208}), 41: (1, {'@': 208}), 42: (1, {'@': 208}), 43: (1, {'@': 208}), 0: (1, {'@': 208}), 44: (1, {'@': 208}), 45: (1, {'@': 208}), 46: (1, {'@': 208}), 47: (1, {'@': 208}), 48: (1, {'@': 208}), 49: (1, {'@': 208}), 50: (1, {'@': 208}), 51: (1, {'@': 208}), 52: (1, {'@': 208}), 53: (1, {'@': 208}), 54: (1, {'@': 208}), 33: (1, {'@': 208}), 55: (1, {'@': 208}), 56: (1, {'@': 208}), 57: (1, {'@': 208}), 58: (1, {'@': 208}), 59: (1, {'@': 208}), 34: (1, {'@': 208}), 60: (1, {'@': 208}), 61: (1, {'@': 208}), 62: (1, {'@': 208}), 37: (1, {'@': 208}), 63: (1, {'@': 208}), 64: (1, {'@': 208}), 65: (1, {'@': 208})}, 152: {39: (1, {'@': 109}), 40: (1, {'@': 109}), 41: (1, {'@': 109}), 42: (1, {'@': 109}), 43: (1, {'@': 109}), 0: (1, {'@': 109}), 44: (1, {'@': 109}), 45: (1, {'@': 109}), 46: (1, {'@': 109}), 47: (1, {'@': 109}), 48: (1, {'@': 109}), 49: (1, {'@': 109}), 50: (1, {'@': 109}), 51: (1, {'@': 109}), 52: (1, {'@': 109}), 53: (1, {'@': 109}), 54: (1, {'@': 109}), 33: (1, {'@': 109}), 55: (1, {'@': 109}), 56: (1, {'@': 109}), 57: (1, {'@': 109}), 58: (1, {'@': 109}), 59: (1, {'@': 109}), 34: (1, {'@': 109}), 60: (1, {'@': 109}), 61: (1, {'@': 109}), 62: (1, {'@': 109}), 37: (1, {'@': 109}), 63: (1, {'@': 109}), 64: (1, {'@': 109}), 65: (1, {'@': 109})}, 153: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 259), 17: (0, 264), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 29: (0, 46), 28: (0, 268), 30: (0, 17), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 154: {39: (1, {'@': 343}), 42: (1, {'@': 343}), 57: (1, {'@': 343}), 43: (1, {'@': 343}), 0: (1, {'@': 343}), 45: (1, {'@': 343}), 46: (1, {'@': 343}), 49: (1, {'@': 343}), 50: (1, {'@': 343}), 37: (1, {'@': 343}), 51: (1, {'@': 343}), 52: (1, {'@': 343}), 34: (1, {'@': 343}), 60: (1, {'@': 343}), 64: (1, {'@': 343}), 65: (1, {'@': 343}), 33: (1, {'@': 343}), 56: (1, {'@': 343}), 55: (1, {'@': 343}), 40: (1, {'@': 343}), 41: (1, {'@': 343}), 44: (1, {'@': 343}), 62: (1, {'@': 343}), 48: (1, {'@': 343}), 47: (1, {'@': 343}), 59: (1, {'@': 343}), 61: (1, {'@': 343}), 63: (1, {'@': 343}), 53: (1, {'@': 343}), 54: (1, {'@': 343}), 58: (1, {'@': 343})}, 155: {39: (1, {'@': 256}), 40: (1, {'@': 256}), 41: (1, {'@': 256}), 42: (1, {'@': 256}), 43: (1, {'@': 256}), 0: (1, {'@': 256}), 44: (1, {'@': 256}), 45: (1, {'@': 256}), 46: (1, {'@': 256}), 47: (1, {'@': 256}), 48: (1, {'@': 256}), 49: (1, {'@': 256}), 50: (1, {'@': 256}), 51: (1, {'@': 256}), 52: (1, {'@': 256}), 53: (1, {'@': 256}), 54: (1, {'@': 256}), 33: (1, {'@': 256}), 55: (1, {'@': 256}), 56: (1, {'@': 256}), 57: (1, {'@': 256}), 58: (1, {'@': 256}), 59: (1, {'@': 256}), 34: (1, {'@': 256}), 60: (1, {'@': 256}), 61: (1, {'@': 256}), 62: (1, {'@': 256}), 37: (1, {'@': 256}), 63: (1, {'@': 256}), 64: (1, {'@': 256}), 65: (1, {'@': 256})}, 156: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 16: (0, 251), 12: (0, 270), 15: (0, 274), 17: (0, 264), 19: (0, 465), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 157: {61: (0, 101)}, 158: {39: (1, {'@': 59}), 40: (1, {'@': 59}), 41: (1, {'@': 59}), 42: (1, {'@': 59}), 43: (1, {'@': 59}), 0: (1, {'@': 59}), 44: (1, {'@': 59}), 45: (1, {'@': 59}), 46: (1, {'@': 59}), 48: (1, {'@': 59}), 47: (1, {'@': 59}), 49: (1, {'@': 59}), 50: (1, {'@': 59}), 51: (1, {'@': 59}), 52: (1, {'@': 59}), 11: (1, {'@': 59}), 53: (1, {'@': 59}), 54: (1, {'@': 59}), 33: (1, {'@': 59}), 55: (1, {'@': 59}), 57: (1, {'@': 59}), 79: (1, {'@': 59}), 60: (1, {'@': 59}), 59: (1, {'@': 59}), 58: (1, {'@': 59}), 37: (1, {'@': 59}), 9: (1, {'@': 59}), 12: (1, {'@': 59}), 56: (1, {'@': 59}), 34: (1, {'@': 59}), 61: (1, {'@': 59}), 62: (1, {'@': 59}), 63: (1, {'@': 59}), 64: (1, {'@': 59}), 65: (1, {'@': 59})}, 159: {54: (0, 528), 91: (0, 437), 50: (1, {'@': 74}), 42: (1, {'@': 74}), 48: (1, {'@': 74}), 56: (1, {'@': 74}), 57: (1, {'@': 74}), 60: (1, {'@': 74}), 59: (1, {'@': 74}), 34: (1, {'@': 74}), 58: (1, {'@': 74}), 61: (1, {'@': 74}), 65: (1, {'@': 74}), 62: (1, {'@': 74}), 63: (1, {'@': 74}), 64: (1, {'@': 74}), 37: (1, {'@': 74})}, 160: {39: (1, {'@': 219}), 40: (1, {'@': 219}), 41: (1, {'@': 219}), 42: (1, {'@': 219}), 43: (1, {'@': 219}), 0: (1, {'@': 219}), 44: (1, {'@': 219}), 45: (1, {'@': 219}), 46: (1, {'@': 219}), 47: (1, {'@': 219}), 48: (1, {'@': 219}), 49: (1, {'@': 219}), 50: (1, {'@': 219}), 51: (1, {'@': 219}), 52: (1, {'@': 219}), 53: (1, {'@': 219}), 54: (1, {'@': 219}), 33: (1, {'@': 219}), 55: (1, {'@': 219}), 56: (1, {'@': 219}), 57: (1, {'@': 219}), 58: (1, {'@': 219}), 59: (1, {'@': 219}), 34: (1, {'@': 219}), 60: (1, {'@': 219}), 61: (1, {'@': 219}), 62: (1, {'@': 219}), 37: (1, {'@': 219}), 63: (1, {'@': 219}), 64: (1, {'@': 219}), 65: (1, {'@': 219})}, 161: {39: (1, {'@': 211}), 40: (1, {'@': 211}), 41: (1, {'@': 211}), 42: (1, {'@': 211}), 43: (1, {'@': 211}), 0: (1, {'@': 211}), 44: (1, {'@': 211}), 45: (1, {'@': 211}), 46: (1, {'@': 211}), 47: (1, {'@': 211}), 48: (1, {'@': 211}), 49: (1, {'@': 211}), 50: (1, {'@': 211}), 51: (1, {'@': 211}), 52: (1, {'@': 211}), 53: (1, {'@': 211}), 54: (1, {'@': 211}), 33: (1, {'@': 211}), 55: (1, {'@': 211}), 56: (1, {'@': 211}), 57: (1, {'@': 211}), 58: (1, {'@': 211}), 59: (1, {'@': 211}), 34: (1, {'@': 211}), 60: (1, {'@': 211}), 61: (1, {'@': 211}), 62: (1, {'@': 211}), 37: (1, {'@': 211}), 63: (1, {'@': 211}), 64: (1, {'@': 211}), 65: (1, {'@': 211})}, 162: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 13: (0, 222), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 163: {61: (0, 107)}, 164: {34: (0, 300)}, 165: {57: (1, {'@': 304}), 60: (1, {'@': 304}), 59: (1, {'@': 304}), 37: (1, {'@': 304}), 56: (1, {'@': 304}), 34: (1, {'@': 304})}, 166: {61: (0, 103)}, 167: {39: (1, {'@': 206}), 40: (1, {'@': 206}), 41: (1, {'@': 206}), 42: (1, {'@': 206}), 43: (1, {'@': 206}), 0: (1, {'@': 206}), 44: (1, {'@': 206}), 45: (1, {'@': 206}), 46: (1, {'@': 206}), 47: (1, {'@': 206}), 48: (1, {'@': 206}), 49: (1, {'@': 206}), 50: (1, {'@': 206}), 51: (1, {'@': 206}), 52: (1, {'@': 206}), 53: (1, {'@': 206}), 54: (1, {'@': 206}), 33: (1, {'@': 206}), 55: (1, {'@': 206}), 56: (1, {'@': 206}), 57: (1, {'@': 206}), 58: (1, {'@': 206}), 59: (1, {'@': 206}), 34: (1, {'@': 206}), 60: (1, {'@': 206}), 61: (1, {'@': 206}), 62: (1, {'@': 206}), 37: (1, {'@': 206}), 63: (1, {'@': 206}), 64: (1, {'@': 206}), 65: (1, {'@': 206})}, 168: {11: (1, {'@': 97}), 0: (1, {'@': 97}), 31: (1, {'@': 97}), 8: (1, {'@': 97}), 9: (1, {'@': 97}), 37: (1, {'@': 97}), 12: (1, {'@': 97}), 30: (1, {'@': 97})}, 169: {66: (0, 280), 61: (0, 109), 60: (0, 538), 67: (0, 112), 59: (0, 536), 57: (0, 547)}, 170: {39: (1, {'@': 103}), 40: (1, {'@': 103}), 41: (1, {'@': 103}), 42: (1, {'@': 103}), 43: (1, {'@': 103}), 0: (1, {'@': 103}), 44: (1, {'@': 103}), 45: (1, {'@': 103}), 46: (1, {'@': 103}), 47: (1, {'@': 103}), 48: (1, {'@': 103}), 49: (1, {'@': 103}), 50: (1, {'@': 103}), 51: (1, {'@': 103}), 52: (1, {'@': 103}), 53: (1, {'@': 103}), 54: (1, {'@': 103}), 33: (1, {'@': 103}), 55: (1, {'@': 103}), 56: (1, {'@': 103}), 57: (1, {'@': 103}), 58: (1, {'@': 103}), 59: (1, {'@': 103}), 34: (1, {'@': 103}), 60: (1, {'@': 103}), 61: (1, {'@': 103}), 62: (1, {'@': 103}), 37: (1, {'@': 103}), 63: (1, {'@': 103}), 64: (1, {'@': 103}), 65: (1, {'@': 103})}, 171: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 259), 17: (0, 264), 19: (0, 465), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 21: (0, 258), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 172: {39: (1, {'@': 117}), 40: (1, {'@': 117}), 41: (1, {'@': 117}), 42: (1, {'@': 117}), 43: (1, {'@': 117}), 0: (1, {'@': 117}), 44: (1, {'@': 117}), 45: (1, {'@': 117}), 46: (1, {'@': 117}), 47: (1, {'@': 117}), 48: (1, {'@': 117}), 49: (1, {'@': 117}), 50: (1, {'@': 117}), 51: (1, {'@': 117}), 52: (1, {'@': 117}), 53: (1, {'@': 117}), 54: (1, {'@': 117}), 33: (1, {'@': 117}), 55: (1, {'@': 117}), 56: (1, {'@': 117}), 57: (1, {'@': 117}), 58: (1, {'@': 117}), 59: (1, {'@': 117}), 34: (1, {'@': 117}), 60: (1, {'@': 117}), 61: (1, {'@': 117}), 62: (1, {'@': 117}), 37: (1, {'@': 117}), 63: (1, {'@': 117}), 64: (1, {'@': 117}), 65: (1, {'@': 117})}, 173: {39: (1, {'@': 214}), 40: (1, {'@': 214}), 41: (1, {'@': 214}), 42: (1, {'@': 214}), 43: (1, {'@': 214}), 0: (1, {'@': 214}), 44: (1, {'@': 214}), 45: (1, {'@': 214}), 46: (1, {'@': 214}), 47: (1, {'@': 214}), 48: (1, {'@': 214}), 49: (1, {'@': 214}), 50: (1, {'@': 214}), 51: (1, {'@': 214}), 52: (1, {'@': 214}), 53: (1, {'@': 214}), 54: (1, {'@': 214}), 33: (1, {'@': 214}), 55: (1, {'@': 214}), 56: (1, {'@': 214}), 57: (1, {'@': 214}), 58: (1, {'@': 214}), 59: (1, {'@': 214}), 34: (1, {'@': 214}), 60: (1, {'@': 214}), 61: (1, {'@': 214}), 62: (1, {'@': 214}), 37: (1, {'@': 214}), 63: (1, {'@': 214}), 64: (1, {'@': 214}), 65: (1, {'@': 214})}, 174: {57: (1, {'@': 303}), 60: (1, {'@': 303}), 59: (1, {'@': 303}), 37: (1, {'@': 303}), 56: (1, {'@': 303}), 34: (1, {'@': 303})}, 175: {39: (1, {'@': 131}), 40: (1, {'@': 131}), 41: (1, {'@': 131}), 42: (1, {'@': 131}), 43: (1, {'@': 131}), 0: (1, {'@': 131}), 44: (1, {'@': 131}), 45: (1, {'@': 131}), 46: (1, {'@': 131}), 47: (1, {'@': 131}), 48: (1, {'@': 131}), 49: (1, {'@': 131}), 50: (1, {'@': 131}), 51: (1, {'@': 131}), 52: (1, {'@': 131}), 53: (1, {'@': 131}), 54: (1, {'@': 131}), 33: (1, {'@': 131}), 55: (1, {'@': 131}), 56: (1, {'@': 131}), 57: (1, {'@': 131}), 58: (1, {'@': 131}), 59: (1, {'@': 131}), 34: (1, {'@': 131}), 60: (1, {'@': 131}), 61: (1, {'@': 131}), 62: (1, {'@': 131}), 37: (1, {'@': 131}), 63: (1, {'@': 131}), 64: (1, {'@': 131}), 65: (1, {'@': 131})}, 176: {2: (0, 395), 37: (0, 158)}, 177: {67: (0, 339), 66: (0, 280), 61: (0, 430), 65: (0, 352), 59: (0, 536), 86: (0, 420), 60: (0, 538), 57: (0, 547)}, 178: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 27: (0, 510), 12: (0, 270), 15: (0, 274), 16: (0, 259), 17: (0, 264), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 179: {39: (1, {'@': 255}), 40: (1, {'@': 255}), 41: (1, {'@': 255}), 42: (1, {'@': 255}), 43: (1, {'@': 255}), 0: (1, {'@': 255}), 44: (1, {'@': 255}), 45: (1, {'@': 255}), 46: (1, {'@': 255}), 47: (1, {'@': 255}), 48: (1, {'@': 255}), 49: (1, {'@': 255}), 50: (1, {'@': 255}), 51: (1, {'@': 255}), 52: (1, {'@': 255}), 53: (1, {'@': 255}), 54: (1, {'@': 255}), 33: (1, {'@': 255}), 55: (1, {'@': 255}), 56: (1, {'@': 255}), 57: (1, {'@': 255}), 58: (1, {'@': 255}), 59: (1, {'@': 255}), 34: (1, {'@': 255}), 60: (1, {'@': 255}), 61: (1, {'@': 255}), 62: (1, {'@': 255}), 37: (1, {'@': 255}), 63: (1, {'@': 255}), 64: (1, {'@': 255}), 65: (1, {'@': 255})}, 180: {50: (1, {'@': 63}), 48: (1, {'@': 63}), 56: (1, {'@': 63}), 57: (1, {'@': 63}), 60: (1, {'@': 63}), 59: (1, {'@': 63}), 34: (1, {'@': 63}), 58: (1, {'@': 63}), 61: (1, {'@': 63}), 65: (1, {'@': 63}), 62: (1, {'@': 63}), 64: (1, {'@': 63}), 63: (1, {'@': 63}), 37: (1, {'@': 63})}, 181: {0: (0, 506), 55: (0, 7), 45: (0, 150), 81: (0, 94), 82: (0, 77), 83: (0, 144), 69: (0, 80), 50: (1, {'@': 72}), 42: (1, {'@': 72}), 48: (1, {'@': 72}), 56: (1, {'@': 72}), 57: (1, {'@': 72}), 60: (1, {'@': 72}), 59: (1, {'@': 72}), 34: (1, {'@': 72}), 58: (1, {'@': 72}), 61: (1, {'@': 72}), 65: (1, {'@': 72}), 62: (1, {'@': 72}), 63: (1, {'@': 72}), 64: (1, {'@': 72}), 37: (1, {'@': 72})}, 182: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 67: (0, 162), 10: (0, 277), 11: (0, 279), 12: (0, 270), 13: (0, 429), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 183: {66: (0, 280), 34: (0, 136), 65: (0, 352), 60: (0, 538), 59: (0, 536), 57: (0, 547), 86: (0, 121), 67: (0, 149)}, 184: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 13: (0, 533), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 185: {34: (0, 155)}, 186: {39: (1, {'@': 128}), 40: (1, {'@': 128}), 41: (1, {'@': 128}), 42: (1, {'@': 128}), 43: (1, {'@': 128}), 0: (1, {'@': 128}), 44: (1, {'@': 128}), 45: (1, {'@': 128}), 46: (1, {'@': 128}), 47: (1, {'@': 128}), 48: (1, {'@': 128}), 49: (1, {'@': 128}), 50: (1, {'@': 128}), 51: (1, {'@': 128}), 52: (1, {'@': 128}), 53: (1, {'@': 128}), 54: (1, {'@': 128}), 33: (1, {'@': 128}), 55: (1, {'@': 128}), 56: (1, {'@': 128}), 57: (1, {'@': 128}), 58: (1, {'@': 128}), 59: (1, {'@': 128}), 34: (1, {'@': 128}), 60: (1, {'@': 128}), 61: (1, {'@': 128}), 62: (1, {'@': 128}), 37: (1, {'@': 128}), 63: (1, {'@': 128}), 64: (1, {'@': 128}), 65: (1, {'@': 128})}, 187: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 61: (0, 118), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 13: (0, 95), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 188: {66: (0, 280), 67: (0, 129), 60: (0, 538), 59: (0, 536), 57: (0, 547), 34: (0, 126)}, 189: {11: (1, {'@': 93}), 0: (1, {'@': 93}), 31: (1, {'@': 93}), 8: (1, {'@': 93}), 9: (1, {'@': 93}), 37: (1, {'@': 93}), 12: (1, {'@': 93}), 30: (1, {'@': 93})}, 190: {92: (0, 156), 49: (0, 116), 51: (0, 108), 44: (0, 515), 39: (1, {'@': 84}), 40: (1, {'@': 84}), 41: (1, {'@': 84}), 42: (1, {'@': 84}), 43: (1, {'@': 84}), 46: (1, {'@': 84}), 53: (1, {'@': 84}), 47: (1, {'@': 84}), 48: (1, {'@': 84}), 54: (1, {'@': 84}), 50: (1, {'@': 84}), 33: (1, {'@': 84}), 52: (1, {'@': 84}), 56: (1, {'@': 84}), 57: (1, {'@': 84}), 59: (1, {'@': 84}), 34: (1, {'@': 84}), 60: (1, {'@': 84}), 58: (1, {'@': 84}), 61: (1, {'@': 84}), 65: (1, {'@': 84}), 62: (1, {'@': 84}), 37: (1, {'@': 84}), 63: (1, {'@': 84}), 64: (1, {'@': 84})}, 191: {39: (1, {'@': 125}), 40: (1, {'@': 125}), 41: (1, {'@': 125}), 42: (1, {'@': 125}), 43: (1, {'@': 125}), 0: (1, {'@': 125}), 44: (1, {'@': 125}), 45: (1, {'@': 125}), 46: (1, {'@': 125}), 47: (1, {'@': 125}), 48: (1, {'@': 125}), 49: (1, {'@': 125}), 50: (1, {'@': 125}), 51: (1, {'@': 125}), 52: (1, {'@': 125}), 53: (1, {'@': 125}), 54: (1, {'@': 125}), 33: (1, {'@': 125}), 55: (1, {'@': 125}), 56: (1, {'@': 125}), 57: (1, {'@': 125}), 58: (1, {'@': 125}), 59: (1, {'@': 125}), 34: (1, {'@': 125}), 60: (1, {'@': 125}), 61: (1, {'@': 125}), 62: (1, {'@': 125}), 37: (1, {'@': 125}), 63: (1, {'@': 125}), 64: (1, {'@': 125}), 65: (1, {'@': 125})}, 192: {11: (1, {'@': 94}), 0: (1, {'@': 94}), 31: (1, {'@': 94}), 8: (1, {'@': 94}), 9: (1, {'@': 94}), 37: (1, {'@': 94}), 12: (1, {'@': 94}), 30: (1, {'@': 94})}, 193: {11: (1, {'@': 98}), 0: (1, {'@': 98}), 31: (1, {'@': 98}), 8: (1, {'@': 98}), 9: (1, {'@': 98}), 37: (1, {'@': 98}), 12: (1, {'@': 98}), 30: (1, {'@': 98})}, 194: {79: (0, 86)}, 195: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 1: (0, 139), 37: (0, 158), 38: (0, 152)}, 196: {11: (1, {'@': 95}), 0: (1, {'@': 95}), 31: (1, {'@': 95}), 8: (1, {'@': 95}), 9: (1, {'@': 95}), 37: (1, {'@': 95}), 12: (1, {'@': 95}), 30: (1, {'@': 95})}, 197: {48: (0, 389)}, 198: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 13: (0, 322), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 199: {50: (1, {'@': 62}), 48: (1, {'@': 62}), 56: (1, {'@': 62}), 57: (1, {'@': 62}), 60: (1, {'@': 62}), 59: (1, {'@': 62}), 34: (1, {'@': 62}), 58: (1, {'@': 62}), 61: (1, {'@': 62}), 65: (1, {'@': 62}), 62: (1, {'@': 62}), 64: (1, {'@': 62}), 63: (1, {'@': 62}), 37: (1, {'@': 62})}, 200: {84: (0, 316), 67: (0, 3), 66: (0, 280), 61: (0, 2), 58: (0, 32), 59: (0, 536), 60: (0, 538), 57: (0, 547)}, 201: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 259), 17: (0, 264), 19: (0, 465), 21: (0, 238), 22: (0, 260), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 202: {11: (1, {'@': 87}), 0: (1, {'@': 87}), 31: (1, {'@': 87}), 8: (1, {'@': 87}), 9: (1, {'@': 87}), 37: (1, {'@': 87}), 12: (1, {'@': 87}), 30: (1, {'@': 87})}, 203: {50: (1, {'@': 65}), 48: (1, {'@': 65}), 56: (1, {'@': 65}), 57: (1, {'@': 65}), 60: (1, {'@': 65}), 59: (1, {'@': 65}), 34: (1, {'@': 65}), 58: (1, {'@': 65}), 61: (1, {'@': 65}), 65: (1, {'@': 65}), 62: (1, {'@': 65}), 64: (1, {'@': 65}), 63: (1, {'@': 65}), 37: (1, {'@': 65})}, 204: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 13: (0, 396), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 67: (0, 341), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 205: {53: (0, 202), 75: (0, 153), 50: (1, {'@': 76}), 42: (1, {'@': 76}), 54: (1, {'@': 76}), 48: (1, {'@': 76}), 56: (1, {'@': 76}), 57: (1, {'@': 76}), 60: (1, {'@': 76}), 59: (1, {'@': 76}), 34: (1, {'@': 76}), 58: (1, {'@': 76}), 61: (1, {'@': 76}), 65: (1, {'@': 76}), 62: (1, {'@': 76}), 63: (1, {'@': 76}), 64: (1, {'@': 76}), 37: (1, {'@': 76})}, 206: {66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 350), 11: (1, {'@': 290}), 33: (1, {'@': 290}), 30: (1, {'@': 290}), 0: (1, {'@': 290}), 31: (1, {'@': 290}), 8: (1, {'@': 290}), 9: (1, {'@': 290}), 37: (1, {'@': 290}), 12: (1, {'@': 290}), 14: (1, {'@': 290})}, 207: {39: (1, {'@': 168}), 40: (1, {'@': 168}), 41: (1, {'@': 168}), 42: (1, {'@': 168}), 43: (1, {'@': 168}), 0: (1, {'@': 168}), 44: (1, {'@': 168}), 45: (1, {'@': 168}), 46: (1, {'@': 168}), 47: (1, {'@': 168}), 48: (1, {'@': 168}), 49: (1, {'@': 168}), 50: (1, {'@': 168}), 51: (1, {'@': 168}), 52: (1, {'@': 168}), 53: (1, {'@': 168}), 54: (1, {'@': 168}), 33: (1, {'@': 168}), 55: (1, {'@': 168}), 56: (1, {'@': 168}), 57: (1, {'@': 168}), 58: (1, {'@': 168}), 59: (1, {'@': 168}), 34: (1, {'@': 168}), 60: (1, {'@': 168}), 61: (1, {'@': 168}), 62: (1, {'@': 168}), 37: (1, {'@': 168}), 63: (1, {'@': 168}), 64: (1, {'@': 168}), 65: (1, {'@': 168})}, 208: {59: (1, {'@': 312}), 57: (1, {'@': 312}), 60: (1, {'@': 312}), 61: (1, {'@': 312}), 37: (1, {'@': 312}), 56: (1, {'@': 312}), 0: (1, {'@': 312}), 8: (1, {'@': 312}), 9: (1, {'@': 312}), 12: (1, {'@': 312}), 30: (1, {'@': 312}), 11: (1, {'@': 312}), 31: (1, {'@': 312}), 33: (1, {'@': 312}), 14: (1, {'@': 312}), 79: (1, {'@': 312}), 64: (1, {'@': 312}), 58: (1, {'@': 312}), 34: (1, {'@': 312}), 65: (1, {'@': 312}), 48: (1, {'@': 312}), 80: (1, {'@': 312})}, 209: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 259), 17: (0, 264), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 29: (0, 46), 30: (0, 17), 28: (0, 513), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 210: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 13: (0, 501), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 211: {39: (1, {'@': 251}), 40: (1, {'@': 251}), 41: (1, {'@': 251}), 42: (1, {'@': 251}), 43: (1, {'@': 251}), 0: (1, {'@': 251}), 44: (1, {'@': 251}), 45: (1, {'@': 251}), 46: (1, {'@': 251}), 47: (1, {'@': 251}), 48: (1, {'@': 251}), 49: (1, {'@': 251}), 50: (1, {'@': 251}), 51: (1, {'@': 251}), 52: (1, {'@': 251}), 53: (1, {'@': 251}), 54: (1, {'@': 251}), 33: (1, {'@': 251}), 55: (1, {'@': 251}), 56: (1, {'@': 251}), 57: (1, {'@': 251}), 58: (1, {'@': 251}), 59: (1, {'@': 251}), 34: (1, {'@': 251}), 60: (1, {'@': 251}), 61: (1, {'@': 251}), 62: (1, {'@': 251}), 37: (1, {'@': 251}), 63: (1, {'@': 251}), 64: (1, {'@': 251}), 65: (1, {'@': 251})}, 212: {0: (0, 525), 1: (0, 229), 2: (0, 324), 80: (0, 8), 90: (0, 198), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 13: (0, 262), 14: (0, 221), 15: (0, 274), 16: (0, 259), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 22: (0, 497), 3: (0, 349), 21: (0, 238), 34: (0, 357), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 213: {11: (1, {'@': 55}), 30: (1, {'@': 55}), 0: (1, {'@': 55}), 34: (1, {'@': 55}), 31: (1, {'@': 55}), 8: (1, {'@': 55}), 9: (1, {'@': 55}), 33: (1, {'@': 55}), 37: (1, {'@': 55}), 12: (1, {'@': 55}), 14: (1, {'@': 55})}, 214: {91: (0, 521), 54: (0, 528), 93: (0, 159), 50: (1, {'@': 75}), 42: (1, {'@': 75}), 48: (1, {'@': 75}), 56: (1, {'@': 75}), 57: (1, {'@': 75}), 60: (1, {'@': 75}), 59: (1, {'@': 75}), 34: (1, {'@': 75}), 58: (1, {'@': 75}), 61: (1, {'@': 75}), 65: (1, {'@': 75}), 62: (1, {'@': 75}), 63: (1, {'@': 75}), 64: (1, {'@': 75}), 37: (1, {'@': 75})}, 215: {34: (0, 91)}, 216: {66: (0, 280), 60: (0, 538), 67: (0, 421), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 56}), 30: (1, {'@': 56}), 0: (1, {'@': 56}), 34: (1, {'@': 56}), 31: (1, {'@': 56}), 8: (1, {'@': 56}), 9: (1, {'@': 56}), 33: (1, {'@': 56}), 37: (1, {'@': 56}), 12: (1, {'@': 56}), 14: (1, {'@': 56})}, 217: {11: (0, 514), 39: (1, {'@': 111}), 40: (1, {'@': 111}), 41: (1, {'@': 111}), 42: (1, {'@': 111}), 43: (1, {'@': 111}), 52: (1, {'@': 111}), 0: (1, {'@': 111}), 44: (1, {'@': 111}), 45: (1, {'@': 111}), 46: (1, {'@': 111}), 53: (1, {'@': 111}), 47: (1, {'@': 111}), 48: (1, {'@': 111}), 49: (1, {'@': 111}), 54: (1, {'@': 111}), 33: (1, {'@': 111}), 51: (1, {'@': 111}), 55: (1, {'@': 111}), 56: (1, {'@': 111}), 57: (1, {'@': 111}), 58: (1, {'@': 111}), 59: (1, {'@': 111}), 34: (1, {'@': 111}), 60: (1, {'@': 111}), 61: (1, {'@': 111}), 62: (1, {'@': 111}), 50: (1, {'@': 111}), 37: (1, {'@': 111}), 63: (1, {'@': 111}), 64: (1, {'@': 111}), 65: (1, {'@': 111})}, 218: {66: (0, 280), 67: (0, 298), 59: (0, 536), 79: (0, 340), 60: (0, 538), 57: (0, 547)}, 219: {66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 371)}, 220: {48: (0, 15)}, 221: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 23), 17: (0, 264), 19: (0, 465), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 222: {66: (0, 280), 86: (0, 55), 65: (0, 352), 59: (0, 536), 61: (0, 59), 67: (0, 63), 60: (0, 538), 57: (0, 547)}, 223: {50: (1, {'@': 70}), 42: (1, {'@': 70}), 48: (1, {'@': 70}), 56: (1, {'@': 70}), 57: (1, {'@': 70}), 60: (1, {'@': 70}), 59: (1, {'@': 70}), 34: (1, {'@': 70}), 58: (1, {'@': 70}), 61: (1, {'@': 70}), 65: (1, {'@': 70}), 62: (1, {'@': 70}), 37: (1, {'@': 70}), 63: (1, {'@': 70}), 64: (1, {'@': 70})}, 224: {66: (0, 280), 67: (0, 299), 86: (0, 308), 65: (0, 352), 59: (0, 536), 34: (0, 312), 60: (0, 538), 57: (0, 547)}, 225: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 13: (0, 337), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 226: {39: (1, {'@': 217}), 40: (1, {'@': 217}), 41: (1, {'@': 217}), 42: (1, {'@': 217}), 43: (1, {'@': 217}), 0: (1, {'@': 217}), 44: (1, {'@': 217}), 45: (1, {'@': 217}), 46: (1, {'@': 217}), 47: (1, {'@': 217}), 48: (1, {'@': 217}), 49: (1, {'@': 217}), 50: (1, {'@': 217}), 51: (1, {'@': 217}), 52: (1, {'@': 217}), 53: (1, {'@': 217}), 54: (1, {'@': 217}), 33: (1, {'@': 217}), 55: (1, {'@': 217}), 56: (1, {'@': 217}), 57: (1, {'@': 217}), 58: (1, {'@': 217}), 59: (1, {'@': 217}), 34: (1, {'@': 217}), 60: (1, {'@': 217}), 61: (1, {'@': 217}), 62: (1, {'@': 217}), 37: (1, {'@': 217}), 63: (1, {'@': 217}), 64: (1, {'@': 217}), 65: (1, {'@': 217})}, 227: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 13: (0, 220), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 228: {17: (0, 39), 30: (0, 17)}, 229: {42: (0, 499), 50: (1, {'@': 69}), 48: (1, {'@': 69}), 56: (1, {'@': 69}), 57: (1, {'@': 69}), 60: (1, {'@': 69}), 59: (1, {'@': 69}), 34: (1, {'@': 69}), 58: (1, {'@': 69}), 61: (1, {'@': 69}), 65: (1, {'@': 69}), 62: (1, {'@': 69}), 64: (1, {'@': 69}), 63: (1, {'@': 69}), 37: (1, {'@': 69})}, 230: {34: (0, 115), 66: (0, 280), 67: (0, 164), 65: (0, 352), 60: (0, 538), 59: (0, 536), 86: (0, 295), 57: (0, 547)}, 231: {0: (0, 525), 1: (0, 229), 2: (0, 324), 80: (0, 8), 4: (0, 172), 5: (0, 170), 90: (0, 539), 6: (0, 214), 8: (0, 207), 7: (0, 223), 67: (0, 212), 9: (0, 231), 10: (0, 277), 3: (0, 110), 11: (0, 279), 12: (0, 270), 13: (0, 262), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 34: (0, 253), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 232: {48: (0, 346)}, 233: {66: (0, 280), 60: (0, 538), 59: (0, 536), 67: (0, 363), 57: (0, 547), 11: (1, {'@': 292}), 33: (1, {'@': 292}), 30: (1, {'@': 292}), 0: (1, {'@': 292}), 31: (1, {'@': 292}), 8: (1, {'@': 292}), 9: (1, {'@': 292}), 37: (1, {'@': 292}), 12: (1, {'@': 292}), 14: (1, {'@': 292})}, 234: {}, 235: {11: (1, {'@': 96}), 0: (1, {'@': 96}), 31: (1, {'@': 96}), 8: (1, {'@': 96}), 9: (1, {'@': 96}), 37: (1, {'@': 96}), 12: (1, {'@': 96}), 30: (1, {'@': 96})}, 236: {39: (1, {'@': 161}), 40: (1, {'@': 161}), 41: (1, {'@': 161}), 42: (1, {'@': 161}), 43: (1, {'@': 161}), 0: (1, {'@': 161}), 44: (1, {'@': 161}), 45: (1, {'@': 161}), 46: (1, {'@': 161}), 47: (1, {'@': 161}), 48: (1, {'@': 161}), 49: (1, {'@': 161}), 50: (1, {'@': 161}), 51: (1, {'@': 161}), 52: (1, {'@': 161}), 53: (1, {'@': 161}), 54: (1, {'@': 161}), 33: (1, {'@': 161}), 55: (1, {'@': 161}), 56: (1, {'@': 161}), 57: (1, {'@': 161}), 58: (1, {'@': 161}), 59: (1, {'@': 161}), 34: (1, {'@': 161}), 60: (1, {'@': 161}), 61: (1, {'@': 161}), 62: (1, {'@': 161}), 37: (1, {'@': 161}), 63: (1, {'@': 161}), 64: (1, {'@': 161}), 65: (1, {'@': 161})}, 237: {66: (0, 280), 60: (0, 538), 59: (0, 536), 67: (0, 248), 57: (0, 547), 11: (1, {'@': 260}), 33: (1, {'@': 260}), 30: (1, {'@': 260}), 0: (1, {'@': 260}), 31: (1, {'@': 260}), 8: (1, {'@': 260}), 9: (1, {'@': 260}), 37: (1, {'@': 260}), 12: (1, {'@': 260}), 14: (1, {'@': 260})}, 238: {94: (0, 68), 47: (0, 142), 33: (0, 282), 87: (0, 244), 39: (1, {'@': 83}), 40: (1, {'@': 83}), 41: (1, {'@': 83}), 42: (1, {'@': 83}), 43: (1, {'@': 83}), 46: (1, {'@': 83}), 53: (1, {'@': 83}), 48: (1, {'@': 83}), 54: (1, {'@': 83}), 50: (1, {'@': 83}), 52: (1, {'@': 83}), 56: (1, {'@': 83}), 57: (1, {'@': 83}), 34: (1, {'@': 83}), 60: (1, {'@': 83}), 59: (1, {'@': 83}), 58: (1, {'@': 83}), 61: (1, {'@': 83}), 65: (1, {'@': 83}), 62: (1, {'@': 83}), 37: (1, {'@': 83}), 63: (1, {'@': 83}), 64: (1, {'@': 83})}, 239: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 22: (0, 502), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 259), 17: (0, 264), 19: (0, 465), 21: (0, 238), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 240: {39: (1, {'@': 340}), 42: (1, {'@': 340}), 57: (1, {'@': 340}), 43: (1, {'@': 340}), 0: (1, {'@': 340}), 45: (1, {'@': 340}), 46: (1, {'@': 340}), 49: (1, {'@': 340}), 50: (1, {'@': 340}), 37: (1, {'@': 340}), 51: (1, {'@': 340}), 52: (1, {'@': 340}), 34: (1, {'@': 340}), 60: (1, {'@': 340}), 64: (1, {'@': 340}), 65: (1, {'@': 340}), 33: (1, {'@': 340}), 56: (1, {'@': 340}), 55: (1, {'@': 340}), 40: (1, {'@': 340}), 41: (1, {'@': 340}), 44: (1, {'@': 340}), 62: (1, {'@': 340}), 48: (1, {'@': 340}), 47: (1, {'@': 340}), 59: (1, {'@': 340}), 61: (1, {'@': 340}), 63: (1, {'@': 340}), 53: (1, {'@': 340}), 54: (1, {'@': 340}), 58: (1, {'@': 340})}, 241: {11: (1, {'@': 261}), 57: (1, {'@': 261}), 33: (1, {'@': 261}), 30: (1, {'@': 261}), 0: (1, {'@': 261}), 31: (1, {'@': 261}), 8: (1, {'@': 261}), 9: (1, {'@': 261}), 60: (1, {'@': 261}), 59: (1, {'@': 261}), 37: (1, {'@': 261}), 12: (1, {'@': 261}), 14: (1, {'@': 261})}, 242: {11: (1, {'@': 263}), 57: (1, {'@': 263}), 33: (1, {'@': 263}), 30: (1, {'@': 263}), 0: (1, {'@': 263}), 31: (1, {'@': 263}), 8: (1, {'@': 263}), 9: (1, {'@': 263}), 60: (1, {'@': 263}), 59: (1, {'@': 263}), 37: (1, {'@': 263}), 12: (1, {'@': 263}), 14: (1, {'@': 263})}, 243: {39: (1, {'@': 328}), 40: (1, {'@': 328}), 41: (1, {'@': 328}), 42: (1, {'@': 328}), 43: (1, {'@': 328}), 0: (1, {'@': 328}), 45: (1, {'@': 328}), 44: (1, {'@': 328}), 78: (1, {'@': 328}), 46: (1, {'@': 328}), 47: (1, {'@': 328}), 48: (1, {'@': 328}), 49: (1, {'@': 328}), 50: (1, {'@': 328}), 51: (1, {'@': 328}), 52: (1, {'@': 328}), 30: (1, {'@': 328}), 53: (1, {'@': 328}), 54: (1, {'@': 328}), 33: (1, {'@': 328}), 55: (1, {'@': 328}), 56: (1, {'@': 328}), 57: (1, {'@': 328}), 59: (1, {'@': 328}), 34: (1, {'@': 328}), 60: (1, {'@': 328}), 58: (1, {'@': 328}), 61: (1, {'@': 328}), 62: (1, {'@': 328}), 37: (1, {'@': 328}), 63: (1, {'@': 328}), 64: (1, {'@': 328}), 65: (1, {'@': 328})}, 244: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 259), 17: (0, 264), 19: (0, 465), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 29: (0, 46), 30: (0, 17), 21: (0, 500), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 245: {64: (0, 419)}, 246: {59: (1, {'@': 313}), 57: (1, {'@': 313}), 60: (1, {'@': 313}), 61: (1, {'@': 313}), 37: (1, {'@': 313}), 56: (1, {'@': 313}), 0: (1, {'@': 313}), 8: (1, {'@': 313}), 9: (1, {'@': 313}), 12: (1, {'@': 313}), 30: (1, {'@': 313}), 11: (1, {'@': 313}), 31: (1, {'@': 313}), 33: (1, {'@': 313}), 14: (1, {'@': 313}), 79: (1, {'@': 313}), 64: (1, {'@': 313}), 58: (1, {'@': 313}), 34: (1, {'@': 313}), 65: (1, {'@': 313}), 48: (1, {'@': 313}), 80: (1, {'@': 313})}, 247: {11: (1, {'@': 279}), 57: (1, {'@': 279}), 33: (1, {'@': 279}), 30: (1, {'@': 279}), 0: (1, {'@': 279}), 31: (1, {'@': 279}), 8: (1, {'@': 279}), 9: (1, {'@': 279}), 60: (1, {'@': 279}), 59: (1, {'@': 279}), 37: (1, {'@': 279}), 12: (1, {'@': 279}), 14: (1, {'@': 279})}, 248: {11: (1, {'@': 259}), 57: (1, {'@': 259}), 33: (1, {'@': 259}), 30: (1, {'@': 259}), 0: (1, {'@': 259}), 31: (1, {'@': 259}), 8: (1, {'@': 259}), 9: (1, {'@': 259}), 60: (1, {'@': 259}), 59: (1, {'@': 259}), 37: (1, {'@': 259}), 12: (1, {'@': 259}), 14: (1, {'@': 259})}, 249: {17: (0, 24), 30: (0, 17)}, 250: {61: (0, 517)}, 251: {0: (0, 506), 55: (0, 7), 45: (0, 150), 81: (0, 94), 82: (0, 77), 83: (0, 144), 69: (0, 80), 39: (1, {'@': 326}), 42: (1, {'@': 326}), 57: (1, {'@': 326}), 43: (1, {'@': 326}), 46: (1, {'@': 326}), 49: (1, {'@': 326}), 50: (1, {'@': 326}), 37: (1, {'@': 326}), 51: (1, {'@': 326}), 52: (1, {'@': 326}), 34: (1, {'@': 326}), 60: (1, {'@': 326}), 64: (1, {'@': 326}), 33: (1, {'@': 326}), 65: (1, {'@': 326}), 56: (1, {'@': 326}), 40: (1, {'@': 326}), 41: (1, {'@': 326}), 44: (1, {'@': 326}), 62: (1, {'@': 326}), 47: (1, {'@': 326}), 48: (1, {'@': 326}), 59: (1, {'@': 326}), 61: (1, {'@': 326}), 63: (1, {'@': 326}), 53: (1, {'@': 326}), 54: (1, {'@': 326}), 58: (1, {'@': 326})}, 252: {42: (1, {'@': 193}), 57: (1, {'@': 193}), 0: (1, {'@': 193}), 45: (1, {'@': 193}), 62: (1, {'@': 193}), 48: (1, {'@': 193}), 50: (1, {'@': 193}), 59: (1, {'@': 193}), 37: (1, {'@': 193}), 61: (1, {'@': 193}), 63: (1, {'@': 193}), 34: (1, {'@': 193}), 55: (1, {'@': 193}), 60: (1, {'@': 193}), 64: (1, {'@': 193}), 65: (1, {'@': 193}), 56: (1, {'@': 193}), 58: (1, {'@': 193}), 39: (1, {'@': 193}), 40: (1, {'@': 193}), 43: (1, {'@': 193}), 41: (1, {'@': 193}), 44: (1, {'@': 193}), 46: (1, {'@': 193}), 47: (1, {'@': 193}), 49: (1, {'@': 193}), 51: (1, {'@': 193}), 52: (1, {'@': 193}), 53: (1, {'@': 193}), 54: (1, {'@': 193}), 33: (1, {'@': 193})}, 253: {39: (1, {'@': 163}), 40: (1, {'@': 163}), 41: (1, {'@': 163}), 42: (1, {'@': 163}), 43: (1, {'@': 163}), 0: (1, {'@': 163}), 44: (1, {'@': 163}), 45: (1, {'@': 163}), 46: (1, {'@': 163}), 47: (1, {'@': 163}), 48: (1, {'@': 163}), 49: (1, {'@': 163}), 50: (1, {'@': 163}), 51: (1, {'@': 163}), 52: (1, {'@': 163}), 53: (1, {'@': 163}), 54: (1, {'@': 163}), 33: (1, {'@': 163}), 55: (1, {'@': 163}), 56: (1, {'@': 163}), 57: (1, {'@': 163}), 58: (1, {'@': 163}), 59: (1, {'@': 163}), 34: (1, {'@': 163}), 60: (1, {'@': 163}), 61: (1, {'@': 163}), 62: (1, {'@': 163}), 37: (1, {'@': 163}), 63: (1, {'@': 163}), 64: (1, {'@': 163}), 65: (1, {'@': 163})}, 254: {66: (0, 280), 67: (0, 263), 60: (0, 538), 59: (0, 536), 57: (0, 547), 37: (1, {'@': 50}), 56: (1, {'@': 50}), 34: (1, {'@': 50})}, 255: {64: (0, 315)}, 256: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 67: (0, 75), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 61: (0, 102), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 13: (0, 404), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 257: {57: (1, {'@': 302}), 60: (1, {'@': 302}), 59: (1, {'@': 302}), 37: (1, {'@': 302}), 56: (1, {'@': 302}), 34: (1, {'@': 302})}, 258: {39: (1, {'@': 324}), 42: (1, {'@': 324}), 57: (1, {'@': 324}), 43: (1, {'@': 324}), 46: (1, {'@': 324}), 50: (1, {'@': 324}), 37: (1, {'@': 324}), 52: (1, {'@': 324}), 34: (1, {'@': 324}), 60: (1, {'@': 324}), 64: (1, {'@': 324}), 33: (1, {'@': 324}), 65: (1, {'@': 324}), 56: (1, {'@': 324}), 40: (1, {'@': 324}), 41: (1, {'@': 324}), 62: (1, {'@': 324}), 47: (1, {'@': 324}), 48: (1, {'@': 324}), 59: (1, {'@': 324}), 61: (1, {'@': 324}), 63: (1, {'@': 324}), 53: (1, {'@': 324}), 54: (1, {'@': 324}), 58: (1, {'@': 324})}, 259: {55: (0, 7), 95: (0, 190), 44: (0, 515), 0: (0, 506), 45: (0, 150), 83: (0, 144), 92: (0, 125), 49: (0, 116), 51: (0, 108), 81: (0, 94), 82: (0, 77), 69: (0, 80), 39: (1, {'@': 85}), 40: (1, {'@': 85}), 41: (1, {'@': 85}), 42: (1, {'@': 85}), 43: (1, {'@': 85}), 46: (1, {'@': 85}), 53: (1, {'@': 85}), 47: (1, {'@': 85}), 48: (1, {'@': 85}), 54: (1, {'@': 85}), 50: (1, {'@': 85}), 33: (1, {'@': 85}), 52: (1, {'@': 85}), 56: (1, {'@': 85}), 57: (1, {'@': 85}), 59: (1, {'@': 85}), 34: (1, {'@': 85}), 60: (1, {'@': 85}), 58: (1, {'@': 85}), 61: (1, {'@': 85}), 65: (1, {'@': 85}), 62: (1, {'@': 85}), 37: (1, {'@': 85}), 63: (1, {'@': 85}), 64: (1, {'@': 85})}, 260: {39: (1, {'@': 322}), 42: (1, {'@': 322}), 57: (1, {'@': 322}), 43: (1, {'@': 322}), 46: (1, {'@': 322}), 50: (1, {'@': 322}), 37: (1, {'@': 322}), 52: (1, {'@': 322}), 34: (1, {'@': 322}), 60: (1, {'@': 322}), 64: (1, {'@': 322}), 65: (1, {'@': 322}), 56: (1, {'@': 322}), 40: (1, {'@': 322}), 41: (1, {'@': 322}), 62: (1, {'@': 322}), 48: (1, {'@': 322}), 59: (1, {'@': 322}), 61: (1, {'@': 322}), 63: (1, {'@': 322}), 53: (1, {'@': 322}), 54: (1, {'@': 322}), 58: (1, {'@': 322})}, 261: {34: (0, 219)}, 262: {48: (0, 21), 50: (0, 210)}, 263: {57: (1, {'@': 49}), 60: (1, {'@': 49}), 59: (1, {'@': 49}), 37: (1, {'@': 49}), 56: (1, {'@': 49}), 34: (1, {'@': 49})}, 264: {45: (0, 228), 30: (0, 243), 78: (0, 249), 39: (1, {'@': 120}), 40: (1, {'@': 120}), 41: (1, {'@': 120}), 42: (1, {'@': 120}), 43: (1, {'@': 120}), 0: (1, {'@': 120}), 44: (1, {'@': 120}), 46: (1, {'@': 120}), 47: (1, {'@': 120}), 48: (1, {'@': 120}), 49: (1, {'@': 120}), 50: (1, {'@': 120}), 51: (1, {'@': 120}), 52: (1, {'@': 120}), 53: (1, {'@': 120}), 54: (1, {'@': 120}), 33: (1, {'@': 120}), 55: (1, {'@': 120}), 56: (1, {'@': 120}), 57: (1, {'@': 120}), 58: (1, {'@': 120}), 59: (1, {'@': 120}), 34: (1, {'@': 120}), 60: (1, {'@': 120}), 61: (1, {'@': 120}), 62: (1, {'@': 120}), 37: (1, {'@': 120}), 63: (1, {'@': 120}), 64: (1, {'@': 120}), 65: (1, {'@': 120})}, 265: {59: (1, {'@': 185}), 57: (1, {'@': 185}), 60: (1, {'@': 185}), 64: (1, {'@': 185})}, 266: {2: (0, 336), 37: (0, 158)}, 267: {41: (1, {'@': 320}), 42: (1, {'@': 320}), 57: (1, {'@': 320}), 62: (1, {'@': 320}), 46: (1, {'@': 320}), 48: (1, {'@': 320}), 50: (1, {'@': 320}), 59: (1, {'@': 320}), 37: (1, {'@': 320}), 61: (1, {'@': 320}), 63: (1, {'@': 320}), 53: (1, {'@': 320}), 34: (1, {'@': 320}), 54: (1, {'@': 320}), 60: (1, {'@': 320}), 64: (1, {'@': 320}), 65: (1, {'@': 320}), 56: (1, {'@': 320}), 58: (1, {'@': 320})}, 268: {42: (1, {'@': 318}), 57: (1, {'@': 318}), 62: (1, {'@': 318}), 48: (1, {'@': 318}), 50: (1, {'@': 318}), 59: (1, {'@': 318}), 37: (1, {'@': 318}), 61: (1, {'@': 318}), 63: (1, {'@': 318}), 53: (1, {'@': 318}), 34: (1, {'@': 318}), 54: (1, {'@': 318}), 60: (1, {'@': 318}), 64: (1, {'@': 318}), 65: (1, {'@': 318}), 56: (1, {'@': 318}), 58: (1, {'@': 318})}, 269: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 67: (0, 402), 15: (0, 274), 16: (0, 259), 60: (0, 538), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 13: (0, 326), 35: (0, 76), 61: (0, 329), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 270: {39: (1, {'@': 119}), 40: (1, {'@': 119}), 41: (1, {'@': 119}), 42: (1, {'@': 119}), 43: (1, {'@': 119}), 0: (1, {'@': 119}), 44: (1, {'@': 119}), 45: (1, {'@': 119}), 46: (1, {'@': 119}), 47: (1, {'@': 119}), 48: (1, {'@': 119}), 49: (1, {'@': 119}), 50: (1, {'@': 119}), 51: (1, {'@': 119}), 52: (1, {'@': 119}), 53: (1, {'@': 119}), 54: (1, {'@': 119}), 33: (1, {'@': 119}), 55: (1, {'@': 119}), 56: (1, {'@': 119}), 57: (1, {'@': 119}), 58: (1, {'@': 119}), 59: (1, {'@': 119}), 34: (1, {'@': 119}), 60: (1, {'@': 119}), 61: (1, {'@': 119}), 62: (1, {'@': 119}), 37: (1, {'@': 119}), 63: (1, {'@': 119}), 64: (1, {'@': 119}), 65: (1, {'@': 119})}, 271: {34: (0, 486)}, 272: {2: (0, 287), 73: (0, 543), 72: (0, 257), 37: (0, 158), 74: (0, 503), 70: (0, 305), 34: (1, {'@': 48})}, 273: {52: (0, 192), 96: (0, 201), 40: (0, 196), 39: (0, 235), 43: (0, 189), 41: (1, {'@': 80}), 42: (1, {'@': 80}), 54: (1, {'@': 80}), 50: (1, {'@': 80}), 46: (1, {'@': 80}), 53: (1, {'@': 80}), 48: (1, {'@': 80}), 56: (1, {'@': 80}), 57: (1, {'@': 80}), 34: (1, {'@': 80}), 60: (1, {'@': 80}), 59: (1, {'@': 80}), 58: (1, {'@': 80}), 61: (1, {'@': 80}), 65: (1, {'@': 80}), 62: (1, {'@': 80}), 37: (1, {'@': 80}), 63: (1, {'@': 80}), 64: (1, {'@': 80})}, 274: {39: (1, {'@': 108}), 40: (1, {'@': 108}), 41: (1, {'@': 108}), 42: (1, {'@': 108}), 43: (1, {'@': 108}), 0: (1, {'@': 108}), 44: (1, {'@': 108}), 45: (1, {'@': 108}), 46: (1, {'@': 108}), 47: (1, {'@': 108}), 48: (1, {'@': 108}), 49: (1, {'@': 108}), 50: (1, {'@': 108}), 51: (1, {'@': 108}), 52: (1, {'@': 108}), 53: (1, {'@': 108}), 54: (1, {'@': 108}), 33: (1, {'@': 108}), 55: (1, {'@': 108}), 56: (1, {'@': 108}), 57: (1, {'@': 108}), 58: (1, {'@': 108}), 59: (1, {'@': 108}), 34: (1, {'@': 108}), 60: (1, {'@': 108}), 61: (1, {'@': 108}), 62: (1, {'@': 108}), 37: (1, {'@': 108}), 63: (1, {'@': 108}), 64: (1, {'@': 108}), 65: (1, {'@': 108})}, 275: {67: (0, 124), 66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 34: (0, 143)}, 276: {59: (1, {'@': 300}), 61: (1, {'@': 300}), 57: (1, {'@': 300}), 60: (1, {'@': 300}), 34: (1, {'@': 300})}, 277: {39: (1, {'@': 113}), 40: (1, {'@': 113}), 41: (1, {'@': 113}), 42: (1, {'@': 113}), 43: (1, {'@': 113}), 0: (1, {'@': 113}), 44: (1, {'@': 113}), 45: (1, {'@': 113}), 46: (1, {'@': 113}), 47: (1, {'@': 113}), 48: (1, {'@': 113}), 49: (1, {'@': 113}), 50: (1, {'@': 113}), 51: (1, {'@': 113}), 52: (1, {'@': 113}), 53: (1, {'@': 113}), 54: (1, {'@': 113}), 33: (1, {'@': 113}), 55: (1, {'@': 113}), 56: (1, {'@': 113}), 57: (1, {'@': 113}), 58: (1, {'@': 113}), 59: (1, {'@': 113}), 34: (1, {'@': 113}), 60: (1, {'@': 113}), 61: (1, {'@': 113}), 62: (1, {'@': 113}), 37: (1, {'@': 113}), 63: (1, {'@': 113}), 64: (1, {'@': 113}), 65: (1, {'@': 113})}, 278: {39: (1, {'@': 141}), 40: (1, {'@': 141}), 41: (1, {'@': 141}), 42: (1, {'@': 141}), 43: (1, {'@': 141}), 0: (1, {'@': 141}), 44: (1, {'@': 141}), 45: (1, {'@': 141}), 46: (1, {'@': 141}), 47: (1, {'@': 141}), 48: (1, {'@': 141}), 49: (1, {'@': 141}), 50: (1, {'@': 141}), 51: (1, {'@': 141}), 52: (1, {'@': 141}), 53: (1, {'@': 141}), 54: (1, {'@': 141}), 33: (1, {'@': 141}), 55: (1, {'@': 141}), 56: (1, {'@': 141}), 57: (1, {'@': 141}), 58: (1, {'@': 141}), 59: (1, {'@': 141}), 34: (1, {'@': 141}), 60: (1, {'@': 141}), 61: (1, {'@': 141}), 62: (1, {'@': 141}), 37: (1, {'@': 141}), 63: (1, {'@': 141}), 64: (1, {'@': 141}), 65: (1, {'@': 141})}, 279: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 67: (0, 523), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 13: (0, 132), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 280: {57: (0, 18), 59: (0, 208), 60: (0, 246), 61: (1, {'@': 58}), 37: (1, {'@': 58}), 56: (1, {'@': 58}), 0: (1, {'@': 58}), 8: (1, {'@': 58}), 9: (1, {'@': 58}), 12: (1, {'@': 58}), 30: (1, {'@': 58}), 11: (1, {'@': 58}), 31: (1, {'@': 58}), 33: (1, {'@': 58}), 14: (1, {'@': 58}), 79: (1, {'@': 58}), 64: (1, {'@': 58}), 58: (1, {'@': 58}), 34: (1, {'@': 58}), 65: (1, {'@': 58}), 48: (1, {'@': 58}), 80: (1, {'@': 58})}, 281: {61: (0, 444)}, 282: {11: (1, {'@': 89}), 0: (1, {'@': 89}), 31: (1, {'@': 89}), 8: (1, {'@': 89}), 9: (1, {'@': 89}), 37: (1, {'@': 89}), 12: (1, {'@': 89}), 30: (1, {'@': 89})}, 283: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 13: (0, 289), 28: (0, 13), 29: (0, 46), 67: (0, 369), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 284: {66: (0, 280), 60: (0, 538), 67: (0, 511), 59: (0, 536), 57: (0, 547), 56: (1, {'@': 45})}, 285: {39: (1, {'@': 344}), 42: (1, {'@': 344}), 57: (1, {'@': 344}), 43: (1, {'@': 344}), 0: (1, {'@': 344}), 45: (1, {'@': 344}), 46: (1, {'@': 344}), 49: (1, {'@': 344}), 50: (1, {'@': 344}), 37: (1, {'@': 344}), 51: (1, {'@': 344}), 52: (1, {'@': 344}), 34: (1, {'@': 344}), 60: (1, {'@': 344}), 64: (1, {'@': 344}), 65: (1, {'@': 344}), 33: (1, {'@': 344}), 56: (1, {'@': 344}), 55: (1, {'@': 344}), 40: (1, {'@': 344}), 41: (1, {'@': 344}), 44: (1, {'@': 344}), 62: (1, {'@': 344}), 48: (1, {'@': 344}), 47: (1, {'@': 344}), 59: (1, {'@': 344}), 61: (1, {'@': 344}), 63: (1, {'@': 344}), 53: (1, {'@': 344}), 54: (1, {'@': 344}), 58: (1, {'@': 344})}, 286: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 61: (0, 303), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 13: (0, 338), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 287: {50: (0, 296), 2: (0, 348), 9: (0, 301), 97: (0, 351), 37: (0, 158), 98: (0, 374), 12: (0, 379)}, 288: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 13: (0, 311), 61: (0, 186), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 289: {48: (0, 111)}, 290: {61: (0, 445)}, 291: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 13: (0, 338), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 292: {50: (1, {'@': 71}), 42: (1, {'@': 71}), 48: (1, {'@': 71}), 56: (1, {'@': 71}), 57: (1, {'@': 71}), 60: (1, {'@': 71}), 59: (1, {'@': 71}), 34: (1, {'@': 71}), 58: (1, {'@': 71}), 61: (1, {'@': 71}), 65: (1, {'@': 71}), 62: (1, {'@': 71}), 37: (1, {'@': 71}), 63: (1, {'@': 71}), 64: (1, {'@': 71})}, 293: {57: (1, {'@': 336}), 63: (1, {'@': 336}), 60: (1, {'@': 336}), 64: (1, {'@': 336}), 59: (1, {'@': 336}), 58: (1, {'@': 336}), 61: (1, {'@': 336})}, 294: {0: (0, 525), 1: (0, 229), 2: (0, 217), 13: (0, 41), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 64: (0, 508), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 99: (0, 470), 67: (0, 474), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 295: {66: (0, 280), 34: (0, 5), 67: (0, 6), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 296: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 13: (0, 254), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 297: {66: (0, 280), 67: (0, 546), 60: (0, 538), 61: (0, 459), 59: (0, 536), 57: (0, 547)}, 298: {79: (0, 114), 66: (0, 280), 67: (0, 78), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 299: {86: (0, 390), 66: (0, 280), 34: (0, 397), 65: (0, 352), 59: (0, 536), 60: (0, 538), 57: (0, 547), 67: (0, 1)}, 300: {39: (1, {'@': 240}), 40: (1, {'@': 240}), 41: (1, {'@': 240}), 42: (1, {'@': 240}), 43: (1, {'@': 240}), 0: (1, {'@': 240}), 44: (1, {'@': 240}), 45: (1, {'@': 240}), 46: (1, {'@': 240}), 47: (1, {'@': 240}), 48: (1, {'@': 240}), 49: (1, {'@': 240}), 50: (1, {'@': 240}), 51: (1, {'@': 240}), 52: (1, {'@': 240}), 53: (1, {'@': 240}), 54: (1, {'@': 240}), 33: (1, {'@': 240}), 55: (1, {'@': 240}), 56: (1, {'@': 240}), 57: (1, {'@': 240}), 58: (1, {'@': 240}), 59: (1, {'@': 240}), 34: (1, {'@': 240}), 60: (1, {'@': 240}), 61: (1, {'@': 240}), 62: (1, {'@': 240}), 37: (1, {'@': 240}), 63: (1, {'@': 240}), 64: (1, {'@': 240}), 65: (1, {'@': 240})}, 301: {66: (0, 280), 2: (0, 287), 70: (0, 507), 72: (0, 257), 37: (0, 158), 59: (0, 536), 73: (0, 543), 74: (0, 503), 60: (0, 538), 57: (0, 547), 67: (0, 518), 34: (1, {'@': 48})}, 302: {56: (1, {'@': 42})}, 303: {39: (1, {'@': 145}), 40: (1, {'@': 145}), 41: (1, {'@': 145}), 42: (1, {'@': 145}), 43: (1, {'@': 145}), 0: (1, {'@': 145}), 44: (1, {'@': 145}), 45: (1, {'@': 145}), 46: (1, {'@': 145}), 47: (1, {'@': 145}), 48: (1, {'@': 145}), 49: (1, {'@': 145}), 50: (1, {'@': 145}), 51: (1, {'@': 145}), 52: (1, {'@': 145}), 53: (1, {'@': 145}), 54: (1, {'@': 145}), 33: (1, {'@': 145}), 55: (1, {'@': 145}), 56: (1, {'@': 145}), 57: (1, {'@': 145}), 58: (1, {'@': 145}), 59: (1, {'@': 145}), 34: (1, {'@': 145}), 60: (1, {'@': 145}), 61: (1, {'@': 145}), 62: (1, {'@': 145}), 37: (1, {'@': 145}), 63: (1, {'@': 145}), 64: (1, {'@': 145}), 65: (1, {'@': 145})}, 304: {39: (1, {'@': 243}), 40: (1, {'@': 243}), 41: (1, {'@': 243}), 42: (1, {'@': 243}), 43: (1, {'@': 243}), 0: (1, {'@': 243}), 44: (1, {'@': 243}), 45: (1, {'@': 243}), 46: (1, {'@': 243}), 47: (1, {'@': 243}), 48: (1, {'@': 243}), 49: (1, {'@': 243}), 50: (1, {'@': 243}), 51: (1, {'@': 243}), 52: (1, {'@': 243}), 53: (1, {'@': 243}), 54: (1, {'@': 243}), 33: (1, {'@': 243}), 55: (1, {'@': 243}), 56: (1, {'@': 243}), 57: (1, {'@': 243}), 58: (1, {'@': 243}), 59: (1, {'@': 243}), 34: (1, {'@': 243}), 60: (1, {'@': 243}), 61: (1, {'@': 243}), 62: (1, {'@': 243}), 37: (1, {'@': 243}), 63: (1, {'@': 243}), 64: (1, {'@': 243}), 65: (1, {'@': 243})}, 305: {34: (0, 433)}, 306: {67: (0, 512), 84: (0, 516), 66: (0, 280), 59: (0, 536), 58: (0, 330), 60: (0, 538), 61: (0, 403), 57: (0, 547)}, 307: {39: (1, {'@': 198}), 42: (1, {'@': 198}), 57: (1, {'@': 198}), 40: (1, {'@': 198}), 43: (1, {'@': 198}), 41: (1, {'@': 198}), 58: (1, {'@': 198}), 0: (1, {'@': 198}), 45: (1, {'@': 198}), 44: (1, {'@': 198}), 46: (1, {'@': 198}), 62: (1, {'@': 198}), 48: (1, {'@': 198}), 47: (1, {'@': 198}), 49: (1, {'@': 198}), 50: (1, {'@': 198}), 59: (1, {'@': 198}), 37: (1, {'@': 198}), 51: (1, {'@': 198}), 52: (1, {'@': 198}), 61: (1, {'@': 198}), 33: (1, {'@': 198}), 63: (1, {'@': 198}), 34: (1, {'@': 198}), 53: (1, {'@': 198}), 54: (1, {'@': 198}), 60: (1, {'@': 198}), 64: (1, {'@': 198}), 65: (1, {'@': 198}), 56: (1, {'@': 198}), 55: (1, {'@': 198})}, 308: {34: (0, 386), 66: (0, 280), 60: (0, 538), 59: (0, 536), 67: (0, 385), 57: (0, 547)}, 309: {2: (0, 307), 37: (0, 158)}, 310: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 13: (0, 95), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 311: {57: (1, {'@': 335}), 63: (1, {'@': 335}), 60: (1, {'@': 335}), 64: (1, {'@': 335}), 59: (1, {'@': 335}), 58: (1, {'@': 335}), 61: (1, {'@': 335})}, 312: {39: (1, {'@': 237}), 40: (1, {'@': 237}), 41: (1, {'@': 237}), 42: (1, {'@': 237}), 43: (1, {'@': 237}), 0: (1, {'@': 237}), 44: (1, {'@': 237}), 45: (1, {'@': 237}), 46: (1, {'@': 237}), 47: (1, {'@': 237}), 48: (1, {'@': 237}), 49: (1, {'@': 237}), 50: (1, {'@': 237}), 51: (1, {'@': 237}), 52: (1, {'@': 237}), 53: (1, {'@': 237}), 54: (1, {'@': 237}), 33: (1, {'@': 237}), 55: (1, {'@': 237}), 56: (1, {'@': 237}), 57: (1, {'@': 237}), 58: (1, {'@': 237}), 59: (1, {'@': 237}), 34: (1, {'@': 237}), 60: (1, {'@': 237}), 61: (1, {'@': 237}), 62: (1, {'@': 237}), 37: (1, {'@': 237}), 63: (1, {'@': 237}), 64: (1, {'@': 237}), 65: (1, {'@': 237})}, 313: {39: (1, {'@': 339}), 42: (1, {'@': 339}), 57: (1, {'@': 339}), 43: (1, {'@': 339}), 0: (1, {'@': 339}), 45: (1, {'@': 339}), 46: (1, {'@': 339}), 49: (1, {'@': 339}), 50: (1, {'@': 339}), 37: (1, {'@': 339}), 51: (1, {'@': 339}), 52: (1, {'@': 339}), 34: (1, {'@': 339}), 60: (1, {'@': 339}), 64: (1, {'@': 339}), 65: (1, {'@': 339}), 33: (1, {'@': 339}), 56: (1, {'@': 339}), 55: (1, {'@': 339}), 40: (1, {'@': 339}), 41: (1, {'@': 339}), 44: (1, {'@': 339}), 62: (1, {'@': 339}), 48: (1, {'@': 339}), 47: (1, {'@': 339}), 59: (1, {'@': 339}), 61: (1, {'@': 339}), 63: (1, {'@': 339}), 53: (1, {'@': 339}), 54: (1, {'@': 339}), 58: (1, {'@': 339})}, 314: {61: (0, 545)}, 315: {39: (1, {'@': 170}), 40: (1, {'@': 170}), 41: (1, {'@': 170}), 42: (1, {'@': 170}), 43: (1, {'@': 170}), 0: (1, {'@': 170}), 44: (1, {'@': 170}), 45: (1, {'@': 170}), 46: (1, {'@': 170}), 47: (1, {'@': 170}), 48: (1, {'@': 170}), 49: (1, {'@': 170}), 50: (1, {'@': 170}), 51: (1, {'@': 170}), 52: (1, {'@': 170}), 53: (1, {'@': 170}), 54: (1, {'@': 170}), 33: (1, {'@': 170}), 55: (1, {'@': 170}), 56: (1, {'@': 170}), 57: (1, {'@': 170}), 58: (1, {'@': 170}), 59: (1, {'@': 170}), 34: (1, {'@': 170}), 60: (1, {'@': 170}), 61: (1, {'@': 170}), 62: (1, {'@': 170}), 37: (1, {'@': 170}), 63: (1, {'@': 170}), 64: (1, {'@': 170}), 65: (1, {'@': 170})}, 316: {66: (0, 280), 67: (0, 522), 58: (0, 524), 59: (0, 536), 61: (0, 529), 60: (0, 538), 57: (0, 547)}, 317: {69: (0, 240), 45: (0, 309), 42: (1, {'@': 199}), 57: (1, {'@': 199}), 0: (1, {'@': 199}), 62: (1, {'@': 199}), 48: (1, {'@': 199}), 50: (1, {'@': 199}), 59: (1, {'@': 199}), 37: (1, {'@': 199}), 61: (1, {'@': 199}), 63: (1, {'@': 199}), 34: (1, {'@': 199}), 55: (1, {'@': 199}), 60: (1, {'@': 199}), 64: (1, {'@': 199}), 65: (1, {'@': 199}), 56: (1, {'@': 199}), 58: (1, {'@': 199}), 39: (1, {'@': 199}), 40: (1, {'@': 199}), 43: (1, {'@': 199}), 41: (1, {'@': 199}), 44: (1, {'@': 199}), 46: (1, {'@': 199}), 47: (1, {'@': 199}), 49: (1, {'@': 199}), 51: (1, {'@': 199}), 52: (1, {'@': 199}), 53: (1, {'@': 199}), 54: (1, {'@': 199}), 33: (1, {'@': 199})}, 318: {61: (0, 160)}, 319: {57: (1, {'@': 51}), 60: (1, {'@': 51}), 59: (1, {'@': 51}), 37: (1, {'@': 51}), 56: (1, {'@': 51}), 34: (1, {'@': 51})}, 320: {57: (1, {'@': 52}), 60: (1, {'@': 52}), 59: (1, {'@': 52}), 37: (1, {'@': 52}), 56: (1, {'@': 52}), 34: (1, {'@': 52})}, 321: {39: (1, {'@': 231}), 40: (1, {'@': 231}), 41: (1, {'@': 231}), 42: (1, {'@': 231}), 43: (1, {'@': 231}), 0: (1, {'@': 231}), 44: (1, {'@': 231}), 45: (1, {'@': 231}), 46: (1, {'@': 231}), 47: (1, {'@': 231}), 48: (1, {'@': 231}), 49: (1, {'@': 231}), 50: (1, {'@': 231}), 51: (1, {'@': 231}), 52: (1, {'@': 231}), 53: (1, {'@': 231}), 54: (1, {'@': 231}), 33: (1, {'@': 231}), 55: (1, {'@': 231}), 56: (1, {'@': 231}), 57: (1, {'@': 231}), 58: (1, {'@': 231}), 59: (1, {'@': 231}), 34: (1, {'@': 231}), 60: (1, {'@': 231}), 61: (1, {'@': 231}), 62: (1, {'@': 231}), 37: (1, {'@': 231}), 63: (1, {'@': 231}), 64: (1, {'@': 231}), 65: (1, {'@': 231})}, 322: {62: (0, 449)}, 323: {39: (1, {'@': 135}), 40: (1, {'@': 135}), 41: (1, {'@': 135}), 42: (1, {'@': 135}), 43: (1, {'@': 135}), 0: (1, {'@': 135}), 44: (1, {'@': 135}), 45: (1, {'@': 135}), 46: (1, {'@': 135}), 47: (1, {'@': 135}), 48: (1, {'@': 135}), 49: (1, {'@': 135}), 50: (1, {'@': 135}), 51: (1, {'@': 135}), 52: (1, {'@': 135}), 53: (1, {'@': 135}), 54: (1, {'@': 135}), 33: (1, {'@': 135}), 55: (1, {'@': 135}), 56: (1, {'@': 135}), 57: (1, {'@': 135}), 58: (1, {'@': 135}), 59: (1, {'@': 135}), 34: (1, {'@': 135}), 60: (1, {'@': 135}), 61: (1, {'@': 135}), 62: (1, {'@': 135}), 37: (1, {'@': 135}), 63: (1, {'@': 135}), 64: (1, {'@': 135}), 65: (1, {'@': 135})}, 324: {11: (0, 514), 48: (0, 184), 50: (0, 42), 39: (1, {'@': 111}), 40: (1, {'@': 111}), 41: (1, {'@': 111}), 42: (1, {'@': 111}), 43: (1, {'@': 111}), 0: (1, {'@': 111}), 44: (1, {'@': 111}), 45: (1, {'@': 111}), 46: (1, {'@': 111}), 47: (1, {'@': 111}), 49: (1, {'@': 111}), 51: (1, {'@': 111}), 52: (1, {'@': 111}), 53: (1, {'@': 111}), 54: (1, {'@': 111}), 33: (1, {'@': 111}), 55: (1, {'@': 111})}, 325: {39: (1, {'@': 152}), 40: (1, {'@': 152}), 41: (1, {'@': 152}), 42: (1, {'@': 152}), 43: (1, {'@': 152}), 0: (1, {'@': 152}), 44: (1, {'@': 152}), 45: (1, {'@': 152}), 46: (1, {'@': 152}), 47: (1, {'@': 152}), 48: (1, {'@': 152}), 49: (1, {'@': 152}), 50: (1, {'@': 152}), 51: (1, {'@': 152}), 52: (1, {'@': 152}), 53: (1, {'@': 152}), 54: (1, {'@': 152}), 33: (1, {'@': 152}), 55: (1, {'@': 152}), 56: (1, {'@': 152}), 57: (1, {'@': 152}), 58: (1, {'@': 152}), 59: (1, {'@': 152}), 34: (1, {'@': 152}), 60: (1, {'@': 152}), 61: (1, {'@': 152}), 62: (1, {'@': 152}), 37: (1, {'@': 152}), 63: (1, {'@': 152}), 64: (1, {'@': 152}), 65: (1, {'@': 152})}, 326: {57: (1, {'@': 334}), 63: (1, {'@': 334}), 60: (1, {'@': 334}), 64: (1, {'@': 334}), 59: (1, {'@': 334}), 58: (1, {'@': 334}), 61: (1, {'@': 334})}, 327: {39: (1, {'@': 247}), 40: (1, {'@': 247}), 41: (1, {'@': 247}), 42: (1, {'@': 247}), 43: (1, {'@': 247}), 0: (1, {'@': 247}), 44: (1, {'@': 247}), 45: (1, {'@': 247}), 46: (1, {'@': 247}), 47: (1, {'@': 247}), 48: (1, {'@': 247}), 49: (1, {'@': 247}), 50: (1, {'@': 247}), 51: (1, {'@': 247}), 52: (1, {'@': 247}), 53: (1, {'@': 247}), 54: (1, {'@': 247}), 33: (1, {'@': 247}), 55: (1, {'@': 247}), 56: (1, {'@': 247}), 57: (1, {'@': 247}), 58: (1, {'@': 247}), 59: (1, {'@': 247}), 34: (1, {'@': 247}), 60: (1, {'@': 247}), 61: (1, {'@': 247}), 62: (1, {'@': 247}), 37: (1, {'@': 247}), 63: (1, {'@': 247}), 64: (1, {'@': 247}), 65: (1, {'@': 247})}, 328: {39: (1, {'@': 101}), 40: (1, {'@': 101}), 41: (1, {'@': 101}), 42: (1, {'@': 101}), 43: (1, {'@': 101}), 0: (1, {'@': 101}), 44: (1, {'@': 101}), 45: (1, {'@': 101}), 46: (1, {'@': 101}), 47: (1, {'@': 101}), 48: (1, {'@': 101}), 49: (1, {'@': 101}), 50: (1, {'@': 101}), 51: (1, {'@': 101}), 52: (1, {'@': 101}), 53: (1, {'@': 101}), 54: (1, {'@': 101}), 33: (1, {'@': 101}), 55: (1, {'@': 101}), 56: (1, {'@': 101}), 57: (1, {'@': 101}), 58: (1, {'@': 101}), 59: (1, {'@': 101}), 34: (1, {'@': 101}), 60: (1, {'@': 101}), 61: (1, {'@': 101}), 62: (1, {'@': 101}), 37: (1, {'@': 101}), 63: (1, {'@': 101}), 64: (1, {'@': 101}), 65: (1, {'@': 101})}, 329: {39: (1, {'@': 139}), 40: (1, {'@': 139}), 41: (1, {'@': 139}), 42: (1, {'@': 139}), 43: (1, {'@': 139}), 0: (1, {'@': 139}), 44: (1, {'@': 139}), 45: (1, {'@': 139}), 46: (1, {'@': 139}), 47: (1, {'@': 139}), 48: (1, {'@': 139}), 49: (1, {'@': 139}), 50: (1, {'@': 139}), 51: (1, {'@': 139}), 52: (1, {'@': 139}), 53: (1, {'@': 139}), 54: (1, {'@': 139}), 33: (1, {'@': 139}), 55: (1, {'@': 139}), 56: (1, {'@': 139}), 57: (1, {'@': 139}), 58: (1, {'@': 139}), 59: (1, {'@': 139}), 34: (1, {'@': 139}), 60: (1, {'@': 139}), 61: (1, {'@': 139}), 62: (1, {'@': 139}), 37: (1, {'@': 139}), 63: (1, {'@': 139}), 64: (1, {'@': 139}), 65: (1, {'@': 139})}, 330: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 13: (0, 344), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 20: (0, 462), 21: (0, 238), 22: (0, 497), 61: (0, 405), 67: (0, 408), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 331: {39: (1, {'@': 245}), 40: (1, {'@': 245}), 41: (1, {'@': 245}), 42: (1, {'@': 245}), 43: (1, {'@': 245}), 0: (1, {'@': 245}), 44: (1, {'@': 245}), 45: (1, {'@': 245}), 46: (1, {'@': 245}), 47: (1, {'@': 245}), 48: (1, {'@': 245}), 49: (1, {'@': 245}), 50: (1, {'@': 245}), 51: (1, {'@': 245}), 52: (1, {'@': 245}), 53: (1, {'@': 245}), 54: (1, {'@': 245}), 33: (1, {'@': 245}), 55: (1, {'@': 245}), 56: (1, {'@': 245}), 57: (1, {'@': 245}), 58: (1, {'@': 245}), 59: (1, {'@': 245}), 34: (1, {'@': 245}), 60: (1, {'@': 245}), 61: (1, {'@': 245}), 62: (1, {'@': 245}), 37: (1, {'@': 245}), 63: (1, {'@': 245}), 64: (1, {'@': 245}), 65: (1, {'@': 245})}, 332: {61: (0, 495), 66: (0, 280), 67: (0, 431), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 333: {11: (1, {'@': 275}), 57: (1, {'@': 275}), 33: (1, {'@': 275}), 30: (1, {'@': 275}), 0: (1, {'@': 275}), 31: (1, {'@': 275}), 8: (1, {'@': 275}), 9: (1, {'@': 275}), 60: (1, {'@': 275}), 59: (1, {'@': 275}), 37: (1, {'@': 275}), 12: (1, {'@': 275}), 14: (1, {'@': 275})}, 334: {39: (1, {'@': 142}), 40: (1, {'@': 142}), 41: (1, {'@': 142}), 42: (1, {'@': 142}), 43: (1, {'@': 142}), 0: (1, {'@': 142}), 44: (1, {'@': 142}), 45: (1, {'@': 142}), 46: (1, {'@': 142}), 47: (1, {'@': 142}), 48: (1, {'@': 142}), 49: (1, {'@': 142}), 50: (1, {'@': 142}), 51: (1, {'@': 142}), 52: (1, {'@': 142}), 53: (1, {'@': 142}), 54: (1, {'@': 142}), 33: (1, {'@': 142}), 55: (1, {'@': 142}), 56: (1, {'@': 142}), 57: (1, {'@': 142}), 58: (1, {'@': 142}), 59: (1, {'@': 142}), 34: (1, {'@': 142}), 60: (1, {'@': 142}), 61: (1, {'@': 142}), 62: (1, {'@': 142}), 37: (1, {'@': 142}), 63: (1, {'@': 142}), 64: (1, {'@': 142}), 65: (1, {'@': 142})}, 335: {11: (1, {'@': 273}), 57: (1, {'@': 273}), 33: (1, {'@': 273}), 30: (1, {'@': 273}), 0: (1, {'@': 273}), 31: (1, {'@': 273}), 8: (1, {'@': 273}), 9: (1, {'@': 273}), 60: (1, {'@': 273}), 59: (1, {'@': 273}), 37: (1, {'@': 273}), 12: (1, {'@': 273}), 14: (1, {'@': 273})}, 336: {67: (0, 87), 66: (0, 280), 79: (0, 98), 59: (0, 536), 60: (0, 538), 57: (0, 547)}, 337: {48: (0, 12)}, 338: {57: (1, {'@': 329}), 63: (1, {'@': 329}), 60: (1, {'@': 329}), 64: (1, {'@': 329}), 59: (1, {'@': 329}), 58: (1, {'@': 329}), 61: (1, {'@': 329})}, 339: {66: (0, 280), 65: (0, 352), 60: (0, 538), 59: (0, 536), 86: (0, 481), 61: (0, 487), 57: (0, 547), 67: (0, 318)}, 340: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 67: (0, 133), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 13: (0, 140), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 341: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 13: (0, 79), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 342: {64: (0, 375)}, 343: {66: (0, 280), 67: (0, 44), 60: (0, 538), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 266}), 33: (1, {'@': 266}), 30: (1, {'@': 266}), 0: (1, {'@': 266}), 31: (1, {'@': 266}), 8: (1, {'@': 266}), 9: (1, {'@': 266}), 37: (1, {'@': 266}), 12: (1, {'@': 266}), 14: (1, {'@': 266})}, 344: {57: (1, {'@': 332}), 63: (1, {'@': 332}), 60: (1, {'@': 332}), 64: (1, {'@': 332}), 59: (1, {'@': 332}), 58: (1, {'@': 332}), 61: (1, {'@': 332})}, 345: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 67: (0, 195), 19: (0, 465), 60: (0, 538), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 1: (0, 199), 38: (0, 152), 57: (0, 547)}, 346: {66: (0, 280), 67: (0, 30), 60: (0, 538), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 288}), 33: (1, {'@': 288}), 30: (1, {'@': 288}), 0: (1, {'@': 288}), 31: (1, {'@': 288}), 8: (1, {'@': 288}), 9: (1, {'@': 288}), 37: (1, {'@': 288}), 12: (1, {'@': 288}), 14: (1, {'@': 288})}, 347: {48: (0, 467)}, 348: {37: (1, {'@': 305}), 9: (1, {'@': 305}), 12: (1, {'@': 305})}, 349: {85: (0, 483), 66: (0, 280), 67: (0, 213), 89: (0, 439), 58: (0, 216), 59: (0, 536), 60: (0, 538), 57: (0, 547), 34: (0, 490)}, 350: {11: (1, {'@': 289}), 57: (1, {'@': 289}), 33: (1, {'@': 289}), 30: (1, {'@': 289}), 0: (1, {'@': 289}), 31: (1, {'@': 289}), 8: (1, {'@': 289}), 9: (1, {'@': 289}), 60: (1, {'@': 289}), 59: (1, {'@': 289}), 37: (1, {'@': 289}), 12: (1, {'@': 289}), 14: (1, {'@': 289})}, 351: {2: (0, 519), 9: (0, 505), 12: (0, 379), 98: (0, 520), 37: (0, 158)}, 352: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 13: (0, 276), 60: (0, 538), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 67: (0, 463), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 353: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 13: (0, 485), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 354: {59: (1, {'@': 179}), 57: (1, {'@': 179}), 60: (1, {'@': 179}), 64: (1, {'@': 179})}, 355: {39: (1, {'@': 249}), 40: (1, {'@': 249}), 41: (1, {'@': 249}), 42: (1, {'@': 249}), 43: (1, {'@': 249}), 0: (1, {'@': 249}), 44: (1, {'@': 249}), 45: (1, {'@': 249}), 46: (1, {'@': 249}), 47: (1, {'@': 249}), 48: (1, {'@': 249}), 49: (1, {'@': 249}), 50: (1, {'@': 249}), 51: (1, {'@': 249}), 52: (1, {'@': 249}), 53: (1, {'@': 249}), 54: (1, {'@': 249}), 33: (1, {'@': 249}), 55: (1, {'@': 249}), 56: (1, {'@': 249}), 57: (1, {'@': 249}), 58: (1, {'@': 249}), 59: (1, {'@': 249}), 34: (1, {'@': 249}), 60: (1, {'@': 249}), 61: (1, {'@': 249}), 62: (1, {'@': 249}), 37: (1, {'@': 249}), 63: (1, {'@': 249}), 64: (1, {'@': 249}), 65: (1, {'@': 249})}, 356: {34: (0, 331)}, 357: {39: (1, {'@': 158}), 40: (1, {'@': 158}), 41: (1, {'@': 158}), 42: (1, {'@': 158}), 43: (1, {'@': 158}), 0: (1, {'@': 158}), 44: (1, {'@': 158}), 45: (1, {'@': 158}), 46: (1, {'@': 158}), 47: (1, {'@': 158}), 48: (1, {'@': 158}), 49: (1, {'@': 158}), 50: (1, {'@': 158}), 51: (1, {'@': 158}), 52: (1, {'@': 158}), 53: (1, {'@': 158}), 54: (1, {'@': 158}), 33: (1, {'@': 158}), 55: (1, {'@': 158}), 56: (1, {'@': 158}), 57: (1, {'@': 158}), 58: (1, {'@': 158}), 59: (1, {'@': 158}), 34: (1, {'@': 158}), 60: (1, {'@': 158}), 61: (1, {'@': 158}), 62: (1, {'@': 158}), 37: (1, {'@': 158}), 63: (1, {'@': 158}), 64: (1, {'@': 158}), 65: (1, {'@': 158})}, 358: {67: (0, 20), 66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 286}), 33: (1, {'@': 286}), 30: (1, {'@': 286}), 0: (1, {'@': 286}), 31: (1, {'@': 286}), 8: (1, {'@': 286}), 9: (1, {'@': 286}), 37: (1, {'@': 286}), 12: (1, {'@': 286}), 14: (1, {'@': 286})}, 359: {57: (1, {'@': 164}), 60: (1, {'@': 164}), 59: (1, {'@': 164}), 34: (1, {'@': 164}), 58: (1, {'@': 164})}, 360: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 20: (0, 462), 21: (0, 238), 22: (0, 497), 67: (0, 310), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 13: (0, 326), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 361: {2: (0, 218), 37: (0, 158)}, 362: {66: (0, 280), 60: (0, 538), 59: (0, 536), 67: (0, 400), 57: (0, 547), 11: (1, {'@': 278}), 33: (1, {'@': 278}), 30: (1, {'@': 278}), 0: (1, {'@': 278}), 31: (1, {'@': 278}), 8: (1, {'@': 278}), 9: (1, {'@': 278}), 37: (1, {'@': 278}), 12: (1, {'@': 278}), 14: (1, {'@': 278})}, 363: {11: (1, {'@': 291}), 57: (1, {'@': 291}), 33: (1, {'@': 291}), 30: (1, {'@': 291}), 0: (1, {'@': 291}), 31: (1, {'@': 291}), 8: (1, {'@': 291}), 9: (1, {'@': 291}), 60: (1, {'@': 291}), 59: (1, {'@': 291}), 37: (1, {'@': 291}), 12: (1, {'@': 291}), 14: (1, {'@': 291})}, 364: {66: (0, 280), 63: (0, 224), 67: (0, 230), 65: (0, 352), 59: (0, 536), 34: (0, 56), 86: (0, 61), 60: (0, 538), 57: (0, 547)}, 365: {48: (0, 130)}, 366: {39: (1, {'@': 222}), 40: (1, {'@': 222}), 41: (1, {'@': 222}), 42: (1, {'@': 222}), 43: (1, {'@': 222}), 0: (1, {'@': 222}), 44: (1, {'@': 222}), 45: (1, {'@': 222}), 46: (1, {'@': 222}), 47: (1, {'@': 222}), 48: (1, {'@': 222}), 49: (1, {'@': 222}), 50: (1, {'@': 222}), 51: (1, {'@': 222}), 52: (1, {'@': 222}), 53: (1, {'@': 222}), 54: (1, {'@': 222}), 33: (1, {'@': 222}), 55: (1, {'@': 222}), 56: (1, {'@': 222}), 57: (1, {'@': 222}), 58: (1, {'@': 222}), 59: (1, {'@': 222}), 34: (1, {'@': 222}), 60: (1, {'@': 222}), 61: (1, {'@': 222}), 62: (1, {'@': 222}), 37: (1, {'@': 222}), 63: (1, {'@': 222}), 64: (1, {'@': 222}), 65: (1, {'@': 222})}, 367: {39: (1, {'@': 246}), 40: (1, {'@': 246}), 41: (1, {'@': 246}), 42: (1, {'@': 246}), 43: (1, {'@': 246}), 0: (1, {'@': 246}), 44: (1, {'@': 246}), 45: (1, {'@': 246}), 46: (1, {'@': 246}), 47: (1, {'@': 246}), 48: (1, {'@': 246}), 49: (1, {'@': 246}), 50: (1, {'@': 246}), 51: (1, {'@': 246}), 52: (1, {'@': 246}), 53: (1, {'@': 246}), 54: (1, {'@': 246}), 33: (1, {'@': 246}), 55: (1, {'@': 246}), 56: (1, {'@': 246}), 57: (1, {'@': 246}), 58: (1, {'@': 246}), 59: (1, {'@': 246}), 34: (1, {'@': 246}), 60: (1, {'@': 246}), 61: (1, {'@': 246}), 62: (1, {'@': 246}), 37: (1, {'@': 246}), 63: (1, {'@': 246}), 64: (1, {'@': 246}), 65: (1, {'@': 246})}, 368: {0: (0, 506), 55: (0, 7), 45: (0, 150), 81: (0, 94), 82: (0, 77), 83: (0, 144), 69: (0, 80), 39: (1, {'@': 325}), 42: (1, {'@': 325}), 57: (1, {'@': 325}), 43: (1, {'@': 325}), 46: (1, {'@': 325}), 49: (1, {'@': 325}), 50: (1, {'@': 325}), 37: (1, {'@': 325}), 51: (1, {'@': 325}), 52: (1, {'@': 325}), 34: (1, {'@': 325}), 60: (1, {'@': 325}), 64: (1, {'@': 325}), 33: (1, {'@': 325}), 65: (1, {'@': 325}), 56: (1, {'@': 325}), 40: (1, {'@': 325}), 41: (1, {'@': 325}), 44: (1, {'@': 325}), 62: (1, {'@': 325}), 47: (1, {'@': 325}), 48: (1, {'@': 325}), 59: (1, {'@': 325}), 61: (1, {'@': 325}), 63: (1, {'@': 325}), 53: (1, {'@': 325}), 54: (1, {'@': 325}), 58: (1, {'@': 325})}, 369: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 13: (0, 88), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 370: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 67: (0, 286), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 13: (0, 404), 33: (0, 37), 35: (0, 76), 61: (0, 407), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 371: {57: (1, {'@': 53}), 60: (1, {'@': 53}), 59: (1, {'@': 53}), 37: (1, {'@': 53}), 56: (1, {'@': 53}), 34: (1, {'@': 53})}, 372: {66: (0, 280), 67: (0, 49), 60: (0, 538), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 284}), 33: (1, {'@': 284}), 30: (1, {'@': 284}), 0: (1, {'@': 284}), 31: (1, {'@': 284}), 8: (1, {'@': 284}), 9: (1, {'@': 284}), 37: (1, {'@': 284}), 12: (1, {'@': 284}), 14: (1, {'@': 284})}, 373: {39: (1, {'@': 162}), 40: (1, {'@': 162}), 41: (1, {'@': 162}), 42: (1, {'@': 162}), 43: (1, {'@': 162}), 0: (1, {'@': 162}), 44: (1, {'@': 162}), 45: (1, {'@': 162}), 46: (1, {'@': 162}), 47: (1, {'@': 162}), 48: (1, {'@': 162}), 49: (1, {'@': 162}), 50: (1, {'@': 162}), 51: (1, {'@': 162}), 52: (1, {'@': 162}), 53: (1, {'@': 162}), 54: (1, {'@': 162}), 33: (1, {'@': 162}), 55: (1, {'@': 162}), 56: (1, {'@': 162}), 57: (1, {'@': 162}), 58: (1, {'@': 162}), 59: (1, {'@': 162}), 34: (1, {'@': 162}), 60: (1, {'@': 162}), 61: (1, {'@': 162}), 62: (1, {'@': 162}), 37: (1, {'@': 162}), 63: (1, {'@': 162}), 64: (1, {'@': 162}), 65: (1, {'@': 162})}, 374: {37: (1, {'@': 306}), 9: (1, {'@': 306}), 12: (1, {'@': 306})}, 375: {39: (1, {'@': 174}), 40: (1, {'@': 174}), 41: (1, {'@': 174}), 42: (1, {'@': 174}), 43: (1, {'@': 174}), 0: (1, {'@': 174}), 44: (1, {'@': 174}), 45: (1, {'@': 174}), 46: (1, {'@': 174}), 47: (1, {'@': 174}), 48: (1, {'@': 174}), 49: (1, {'@': 174}), 50: (1, {'@': 174}), 51: (1, {'@': 174}), 52: (1, {'@': 174}), 53: (1, {'@': 174}), 54: (1, {'@': 174}), 33: (1, {'@': 174}), 55: (1, {'@': 174}), 56: (1, {'@': 174}), 57: (1, {'@': 174}), 58: (1, {'@': 174}), 59: (1, {'@': 174}), 34: (1, {'@': 174}), 60: (1, {'@': 174}), 61: (1, {'@': 174}), 62: (1, {'@': 174}), 37: (1, {'@': 174}), 63: (1, {'@': 174}), 64: (1, {'@': 174}), 65: (1, {'@': 174})}, 376: {48: (0, 28)}, 377: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 259), 17: (0, 264), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 29: (0, 46), 30: (0, 17), 31: (0, 35), 27: (0, 267), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 378: {42: (1, {'@': 197}), 57: (1, {'@': 197}), 0: (1, {'@': 197}), 45: (1, {'@': 197}), 62: (1, {'@': 197}), 48: (1, {'@': 197}), 50: (1, {'@': 197}), 59: (1, {'@': 197}), 37: (1, {'@': 197}), 61: (1, {'@': 197}), 63: (1, {'@': 197}), 34: (1, {'@': 197}), 55: (1, {'@': 197}), 60: (1, {'@': 197}), 64: (1, {'@': 197}), 65: (1, {'@': 197}), 56: (1, {'@': 197}), 58: (1, {'@': 197}), 39: (1, {'@': 197}), 40: (1, {'@': 197}), 43: (1, {'@': 197}), 41: (1, {'@': 197}), 44: (1, {'@': 197}), 46: (1, {'@': 197}), 47: (1, {'@': 197}), 49: (1, {'@': 197}), 51: (1, {'@': 197}), 52: (1, {'@': 197}), 53: (1, {'@': 197}), 54: (1, {'@': 197}), 33: (1, {'@': 197})}, 379: {37: (1, {'@': 118}), 9: (1, {'@': 118}), 12: (1, {'@': 118})}, 380: {59: (1, {'@': 299}), 61: (1, {'@': 299}), 57: (1, {'@': 299}), 60: (1, {'@': 299}), 34: (1, {'@': 299})}, 381: {30: (0, 243), 39: (1, {'@': 120}), 42: (1, {'@': 120}), 57: (1, {'@': 120}), 43: (1, {'@': 120}), 0: (1, {'@': 120}), 45: (1, {'@': 120}), 46: (1, {'@': 120}), 49: (1, {'@': 120}), 50: (1, {'@': 120}), 37: (1, {'@': 120}), 51: (1, {'@': 120}), 52: (1, {'@': 120}), 34: (1, {'@': 120}), 60: (1, {'@': 120}), 64: (1, {'@': 120}), 65: (1, {'@': 120}), 33: (1, {'@': 120}), 56: (1, {'@': 120}), 55: (1, {'@': 120}), 40: (1, {'@': 120}), 41: (1, {'@': 120}), 44: (1, {'@': 120}), 62: (1, {'@': 120}), 47: (1, {'@': 120}), 48: (1, {'@': 120}), 59: (1, {'@': 120}), 61: (1, {'@': 120}), 63: (1, {'@': 120}), 53: (1, {'@': 120}), 54: (1, {'@': 120}), 58: (1, {'@': 120})}, 382: {39: (1, {'@': 225}), 40: (1, {'@': 225}), 41: (1, {'@': 225}), 42: (1, {'@': 225}), 43: (1, {'@': 225}), 0: (1, {'@': 225}), 44: (1, {'@': 225}), 45: (1, {'@': 225}), 46: (1, {'@': 225}), 47: (1, {'@': 225}), 48: (1, {'@': 225}), 49: (1, {'@': 225}), 50: (1, {'@': 225}), 51: (1, {'@': 225}), 52: (1, {'@': 225}), 53: (1, {'@': 225}), 54: (1, {'@': 225}), 33: (1, {'@': 225}), 55: (1, {'@': 225}), 56: (1, {'@': 225}), 57: (1, {'@': 225}), 58: (1, {'@': 225}), 59: (1, {'@': 225}), 34: (1, {'@': 225}), 60: (1, {'@': 225}), 61: (1, {'@': 225}), 62: (1, {'@': 225}), 37: (1, {'@': 225}), 63: (1, {'@': 225}), 64: (1, {'@': 225}), 65: (1, {'@': 225})}, 383: {39: (1, {'@': 252}), 40: (1, {'@': 252}), 41: (1, {'@': 252}), 42: (1, {'@': 252}), 43: (1, {'@': 252}), 0: (1, {'@': 252}), 44: (1, {'@': 252}), 45: (1, {'@': 252}), 46: (1, {'@': 252}), 47: (1, {'@': 252}), 48: (1, {'@': 252}), 49: (1, {'@': 252}), 50: (1, {'@': 252}), 51: (1, {'@': 252}), 52: (1, {'@': 252}), 53: (1, {'@': 252}), 54: (1, {'@': 252}), 33: (1, {'@': 252}), 55: (1, {'@': 252}), 56: (1, {'@': 252}), 57: (1, {'@': 252}), 58: (1, {'@': 252}), 59: (1, {'@': 252}), 34: (1, {'@': 252}), 60: (1, {'@': 252}), 61: (1, {'@': 252}), 62: (1, {'@': 252}), 37: (1, {'@': 252}), 63: (1, {'@': 252}), 64: (1, {'@': 252}), 65: (1, {'@': 252})}, 384: {61: (0, 148)}, 385: {34: (0, 31)}, 386: {39: (1, {'@': 236}), 40: (1, {'@': 236}), 41: (1, {'@': 236}), 42: (1, {'@': 236}), 43: (1, {'@': 236}), 0: (1, {'@': 236}), 44: (1, {'@': 236}), 45: (1, {'@': 236}), 46: (1, {'@': 236}), 47: (1, {'@': 236}), 48: (1, {'@': 236}), 49: (1, {'@': 236}), 50: (1, {'@': 236}), 51: (1, {'@': 236}), 52: (1, {'@': 236}), 53: (1, {'@': 236}), 54: (1, {'@': 236}), 33: (1, {'@': 236}), 55: (1, {'@': 236}), 56: (1, {'@': 236}), 57: (1, {'@': 236}), 58: (1, {'@': 236}), 59: (1, {'@': 236}), 34: (1, {'@': 236}), 60: (1, {'@': 236}), 61: (1, {'@': 236}), 62: (1, {'@': 236}), 37: (1, {'@': 236}), 63: (1, {'@': 236}), 64: (1, {'@': 236}), 65: (1, {'@': 236})}, 387: {66: (0, 280), 60: (0, 538), 61: (0, 544), 59: (0, 536), 57: (0, 547), 67: (0, 250)}, 388: {39: (1, {'@': 147}), 40: (1, {'@': 147}), 41: (1, {'@': 147}), 42: (1, {'@': 147}), 43: (1, {'@': 147}), 0: (1, {'@': 147}), 44: (1, {'@': 147}), 45: (1, {'@': 147}), 46: (1, {'@': 147}), 47: (1, {'@': 147}), 48: (1, {'@': 147}), 49: (1, {'@': 147}), 50: (1, {'@': 147}), 51: (1, {'@': 147}), 52: (1, {'@': 147}), 53: (1, {'@': 147}), 54: (1, {'@': 147}), 33: (1, {'@': 147}), 55: (1, {'@': 147}), 56: (1, {'@': 147}), 57: (1, {'@': 147}), 58: (1, {'@': 147}), 59: (1, {'@': 147}), 34: (1, {'@': 147}), 60: (1, {'@': 147}), 61: (1, {'@': 147}), 62: (1, {'@': 147}), 37: (1, {'@': 147}), 63: (1, {'@': 147}), 64: (1, {'@': 147}), 65: (1, {'@': 147})}, 389: {66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 10), 11: (1, {'@': 272}), 33: (1, {'@': 272}), 30: (1, {'@': 272}), 0: (1, {'@': 272}), 31: (1, {'@': 272}), 8: (1, {'@': 272}), 9: (1, {'@': 272}), 37: (1, {'@': 272}), 12: (1, {'@': 272}), 14: (1, {'@': 272})}, 390: {66: (0, 280), 67: (0, 22), 60: (0, 538), 59: (0, 536), 57: (0, 547), 34: (0, 25)}, 391: {39: (1, {'@': 228}), 40: (1, {'@': 228}), 41: (1, {'@': 228}), 42: (1, {'@': 228}), 43: (1, {'@': 228}), 0: (1, {'@': 228}), 44: (1, {'@': 228}), 45: (1, {'@': 228}), 46: (1, {'@': 228}), 47: (1, {'@': 228}), 48: (1, {'@': 228}), 49: (1, {'@': 228}), 50: (1, {'@': 228}), 51: (1, {'@': 228}), 52: (1, {'@': 228}), 53: (1, {'@': 228}), 54: (1, {'@': 228}), 33: (1, {'@': 228}), 55: (1, {'@': 228}), 56: (1, {'@': 228}), 57: (1, {'@': 228}), 58: (1, {'@': 228}), 59: (1, {'@': 228}), 34: (1, {'@': 228}), 60: (1, {'@': 228}), 61: (1, {'@': 228}), 62: (1, {'@': 228}), 37: (1, {'@': 228}), 63: (1, {'@': 228}), 64: (1, {'@': 228}), 65: (1, {'@': 228})}, 392: {66: (0, 280), 60: (0, 538), 67: (0, 302), 59: (0, 536), 57: (0, 547), 56: (1, {'@': 43})}, 393: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 13: (0, 332), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 394: {39: (1, {'@': 213}), 40: (1, {'@': 213}), 41: (1, {'@': 213}), 42: (1, {'@': 213}), 43: (1, {'@': 213}), 0: (1, {'@': 213}), 44: (1, {'@': 213}), 45: (1, {'@': 213}), 46: (1, {'@': 213}), 47: (1, {'@': 213}), 48: (1, {'@': 213}), 49: (1, {'@': 213}), 50: (1, {'@': 213}), 51: (1, {'@': 213}), 52: (1, {'@': 213}), 53: (1, {'@': 213}), 54: (1, {'@': 213}), 33: (1, {'@': 213}), 55: (1, {'@': 213}), 56: (1, {'@': 213}), 57: (1, {'@': 213}), 58: (1, {'@': 213}), 59: (1, {'@': 213}), 34: (1, {'@': 213}), 60: (1, {'@': 213}), 61: (1, {'@': 213}), 62: (1, {'@': 213}), 37: (1, {'@': 213}), 63: (1, {'@': 213}), 64: (1, {'@': 213}), 65: (1, {'@': 213})}, 395: {58: (0, 266), 79: (0, 422), 66: (0, 280), 67: (0, 425), 59: (0, 536), 60: (0, 538), 57: (0, 547)}, 396: {48: (0, 343)}, 397: {39: (1, {'@': 234}), 40: (1, {'@': 234}), 41: (1, {'@': 234}), 42: (1, {'@': 234}), 43: (1, {'@': 234}), 0: (1, {'@': 234}), 44: (1, {'@': 234}), 45: (1, {'@': 234}), 46: (1, {'@': 234}), 47: (1, {'@': 234}), 48: (1, {'@': 234}), 49: (1, {'@': 234}), 50: (1, {'@': 234}), 51: (1, {'@': 234}), 52: (1, {'@': 234}), 53: (1, {'@': 234}), 54: (1, {'@': 234}), 33: (1, {'@': 234}), 55: (1, {'@': 234}), 56: (1, {'@': 234}), 57: (1, {'@': 234}), 58: (1, {'@': 234}), 59: (1, {'@': 234}), 34: (1, {'@': 234}), 60: (1, {'@': 234}), 61: (1, {'@': 234}), 62: (1, {'@': 234}), 37: (1, {'@': 234}), 63: (1, {'@': 234}), 64: (1, {'@': 234}), 65: (1, {'@': 234})}, 398: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 13: (0, 347), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 67: (0, 440), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 399: {39: (1, {'@': 143}), 40: (1, {'@': 143}), 41: (1, {'@': 143}), 42: (1, {'@': 143}), 43: (1, {'@': 143}), 0: (1, {'@': 143}), 44: (1, {'@': 143}), 45: (1, {'@': 143}), 46: (1, {'@': 143}), 47: (1, {'@': 143}), 48: (1, {'@': 143}), 49: (1, {'@': 143}), 50: (1, {'@': 143}), 51: (1, {'@': 143}), 52: (1, {'@': 143}), 53: (1, {'@': 143}), 54: (1, {'@': 143}), 33: (1, {'@': 143}), 55: (1, {'@': 143}), 56: (1, {'@': 143}), 57: (1, {'@': 143}), 58: (1, {'@': 143}), 59: (1, {'@': 143}), 34: (1, {'@': 143}), 60: (1, {'@': 143}), 61: (1, {'@': 143}), 62: (1, {'@': 143}), 37: (1, {'@': 143}), 63: (1, {'@': 143}), 64: (1, {'@': 143}), 65: (1, {'@': 143})}, 400: {11: (1, {'@': 277}), 57: (1, {'@': 277}), 33: (1, {'@': 277}), 30: (1, {'@': 277}), 0: (1, {'@': 277}), 31: (1, {'@': 277}), 8: (1, {'@': 277}), 9: (1, {'@': 277}), 60: (1, {'@': 277}), 59: (1, {'@': 277}), 37: (1, {'@': 277}), 12: (1, {'@': 277}), 14: (1, {'@': 277})}, 401: {66: (0, 280), 67: (0, 354), 60: (0, 538), 59: (0, 536), 57: (0, 547), 64: (1, {'@': 180})}, 402: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 61: (0, 469), 33: (0, 37), 13: (0, 95), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 403: {39: (1, {'@': 137}), 40: (1, {'@': 137}), 41: (1, {'@': 137}), 42: (1, {'@': 137}), 43: (1, {'@': 137}), 0: (1, {'@': 137}), 44: (1, {'@': 137}), 45: (1, {'@': 137}), 46: (1, {'@': 137}), 47: (1, {'@': 137}), 48: (1, {'@': 137}), 49: (1, {'@': 137}), 50: (1, {'@': 137}), 51: (1, {'@': 137}), 52: (1, {'@': 137}), 53: (1, {'@': 137}), 54: (1, {'@': 137}), 33: (1, {'@': 137}), 55: (1, {'@': 137}), 56: (1, {'@': 137}), 57: (1, {'@': 137}), 58: (1, {'@': 137}), 59: (1, {'@': 137}), 34: (1, {'@': 137}), 60: (1, {'@': 137}), 61: (1, {'@': 137}), 62: (1, {'@': 137}), 37: (1, {'@': 137}), 63: (1, {'@': 137}), 64: (1, {'@': 137}), 65: (1, {'@': 137})}, 404: {57: (1, {'@': 330}), 63: (1, {'@': 330}), 60: (1, {'@': 330}), 64: (1, {'@': 330}), 59: (1, {'@': 330}), 58: (1, {'@': 330}), 61: (1, {'@': 330})}, 405: {39: (1, {'@': 136}), 40: (1, {'@': 136}), 41: (1, {'@': 136}), 42: (1, {'@': 136}), 43: (1, {'@': 136}), 0: (1, {'@': 136}), 44: (1, {'@': 136}), 45: (1, {'@': 136}), 46: (1, {'@': 136}), 47: (1, {'@': 136}), 48: (1, {'@': 136}), 49: (1, {'@': 136}), 50: (1, {'@': 136}), 51: (1, {'@': 136}), 52: (1, {'@': 136}), 53: (1, {'@': 136}), 54: (1, {'@': 136}), 33: (1, {'@': 136}), 55: (1, {'@': 136}), 56: (1, {'@': 136}), 57: (1, {'@': 136}), 58: (1, {'@': 136}), 59: (1, {'@': 136}), 34: (1, {'@': 136}), 60: (1, {'@': 136}), 61: (1, {'@': 136}), 62: (1, {'@': 136}), 37: (1, {'@': 136}), 63: (1, {'@': 136}), 64: (1, {'@': 136}), 65: (1, {'@': 136})}, 406: {39: (1, {'@': 110}), 40: (1, {'@': 110}), 41: (1, {'@': 110}), 42: (1, {'@': 110}), 43: (1, {'@': 110}), 0: (1, {'@': 110}), 44: (1, {'@': 110}), 45: (1, {'@': 110}), 46: (1, {'@': 110}), 47: (1, {'@': 110}), 48: (1, {'@': 110}), 49: (1, {'@': 110}), 50: (1, {'@': 110}), 51: (1, {'@': 110}), 52: (1, {'@': 110}), 53: (1, {'@': 110}), 54: (1, {'@': 110}), 33: (1, {'@': 110}), 55: (1, {'@': 110}), 56: (1, {'@': 110}), 57: (1, {'@': 110}), 58: (1, {'@': 110}), 59: (1, {'@': 110}), 34: (1, {'@': 110}), 60: (1, {'@': 110}), 61: (1, {'@': 110}), 62: (1, {'@': 110}), 37: (1, {'@': 110}), 63: (1, {'@': 110}), 64: (1, {'@': 110}), 65: (1, {'@': 110})}, 407: {39: (1, {'@': 146}), 40: (1, {'@': 146}), 41: (1, {'@': 146}), 42: (1, {'@': 146}), 43: (1, {'@': 146}), 0: (1, {'@': 146}), 44: (1, {'@': 146}), 45: (1, {'@': 146}), 46: (1, {'@': 146}), 47: (1, {'@': 146}), 48: (1, {'@': 146}), 49: (1, {'@': 146}), 50: (1, {'@': 146}), 51: (1, {'@': 146}), 52: (1, {'@': 146}), 53: (1, {'@': 146}), 54: (1, {'@': 146}), 33: (1, {'@': 146}), 55: (1, {'@': 146}), 56: (1, {'@': 146}), 57: (1, {'@': 146}), 58: (1, {'@': 146}), 59: (1, {'@': 146}), 34: (1, {'@': 146}), 60: (1, {'@': 146}), 61: (1, {'@': 146}), 62: (1, {'@': 146}), 37: (1, {'@': 146}), 63: (1, {'@': 146}), 64: (1, {'@': 146}), 65: (1, {'@': 146})}, 408: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 61: (0, 323), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 13: (0, 410)}, 409: {39: (1, {'@': 230}), 40: (1, {'@': 230}), 41: (1, {'@': 230}), 42: (1, {'@': 230}), 43: (1, {'@': 230}), 0: (1, {'@': 230}), 44: (1, {'@': 230}), 45: (1, {'@': 230}), 46: (1, {'@': 230}), 47: (1, {'@': 230}), 48: (1, {'@': 230}), 49: (1, {'@': 230}), 50: (1, {'@': 230}), 51: (1, {'@': 230}), 52: (1, {'@': 230}), 53: (1, {'@': 230}), 54: (1, {'@': 230}), 33: (1, {'@': 230}), 55: (1, {'@': 230}), 56: (1, {'@': 230}), 57: (1, {'@': 230}), 58: (1, {'@': 230}), 59: (1, {'@': 230}), 34: (1, {'@': 230}), 60: (1, {'@': 230}), 61: (1, {'@': 230}), 62: (1, {'@': 230}), 37: (1, {'@': 230}), 63: (1, {'@': 230}), 64: (1, {'@': 230}), 65: (1, {'@': 230})}, 410: {57: (1, {'@': 331}), 63: (1, {'@': 331}), 60: (1, {'@': 331}), 64: (1, {'@': 331}), 59: (1, {'@': 331}), 58: (1, {'@': 331}), 61: (1, {'@': 331})}, 411: {63: (0, 401), 66: (0, 280), 67: (0, 427), 58: (0, 428), 59: (0, 536), 60: (0, 538), 57: (0, 547), 64: (1, {'@': 182})}, 412: {48: (0, 362)}, 413: {17: (0, 473), 30: (0, 17)}, 414: {50: (1, {'@': 68}), 48: (1, {'@': 68}), 56: (1, {'@': 68}), 57: (1, {'@': 68}), 60: (1, {'@': 68}), 59: (1, {'@': 68}), 34: (1, {'@': 68}), 58: (1, {'@': 68}), 61: (1, {'@': 68}), 65: (1, {'@': 68}), 62: (1, {'@': 68}), 64: (1, {'@': 68}), 63: (1, {'@': 68}), 37: (1, {'@': 68})}, 415: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 13: (0, 311), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 59: (1, {'@': 177}), 57: (1, {'@': 177}), 60: (1, {'@': 177}), 64: (1, {'@': 177})}, 416: {57: (1, {'@': 337}), 34: (1, {'@': 337}), 60: (1, {'@': 337}), 59: (1, {'@': 337}), 58: (1, {'@': 337})}, 417: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 1: (0, 106), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 418: {39: (1, {'@': 216}), 40: (1, {'@': 216}), 41: (1, {'@': 216}), 42: (1, {'@': 216}), 43: (1, {'@': 216}), 0: (1, {'@': 216}), 44: (1, {'@': 216}), 45: (1, {'@': 216}), 46: (1, {'@': 216}), 47: (1, {'@': 216}), 48: (1, {'@': 216}), 49: (1, {'@': 216}), 50: (1, {'@': 216}), 51: (1, {'@': 216}), 52: (1, {'@': 216}), 53: (1, {'@': 216}), 54: (1, {'@': 216}), 33: (1, {'@': 216}), 55: (1, {'@': 216}), 56: (1, {'@': 216}), 57: (1, {'@': 216}), 58: (1, {'@': 216}), 59: (1, {'@': 216}), 34: (1, {'@': 216}), 60: (1, {'@': 216}), 61: (1, {'@': 216}), 62: (1, {'@': 216}), 37: (1, {'@': 216}), 63: (1, {'@': 216}), 64: (1, {'@': 216}), 65: (1, {'@': 216})}, 419: {39: (1, {'@': 99}), 40: (1, {'@': 99}), 41: (1, {'@': 99}), 42: (1, {'@': 99}), 43: (1, {'@': 99}), 0: (1, {'@': 99}), 44: (1, {'@': 99}), 45: (1, {'@': 99}), 46: (1, {'@': 99}), 47: (1, {'@': 99}), 48: (1, {'@': 99}), 49: (1, {'@': 99}), 50: (1, {'@': 99}), 51: (1, {'@': 99}), 52: (1, {'@': 99}), 53: (1, {'@': 99}), 54: (1, {'@': 99}), 33: (1, {'@': 99}), 55: (1, {'@': 99}), 56: (1, {'@': 99}), 57: (1, {'@': 99}), 58: (1, {'@': 99}), 59: (1, {'@': 99}), 34: (1, {'@': 99}), 60: (1, {'@': 99}), 61: (1, {'@': 99}), 62: (1, {'@': 99}), 37: (1, {'@': 99}), 63: (1, {'@': 99}), 64: (1, {'@': 99}), 65: (1, {'@': 99})}, 420: {66: (0, 280), 67: (0, 435), 61: (0, 366), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 421: {11: (1, {'@': 57}), 30: (1, {'@': 57}), 0: (1, {'@': 57}), 34: (1, {'@': 57}), 31: (1, {'@': 57}), 8: (1, {'@': 57}), 9: (1, {'@': 57}), 33: (1, {'@': 57}), 37: (1, {'@': 57}), 12: (1, {'@': 57}), 14: (1, {'@': 57})}, 422: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 13: (0, 412), 67: (0, 353), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 423: {39: (1, {'@': 155}), 40: (1, {'@': 155}), 41: (1, {'@': 155}), 42: (1, {'@': 155}), 43: (1, {'@': 155}), 0: (1, {'@': 155}), 44: (1, {'@': 155}), 45: (1, {'@': 155}), 46: (1, {'@': 155}), 47: (1, {'@': 155}), 48: (1, {'@': 155}), 49: (1, {'@': 155}), 50: (1, {'@': 155}), 51: (1, {'@': 155}), 52: (1, {'@': 155}), 53: (1, {'@': 155}), 54: (1, {'@': 155}), 33: (1, {'@': 155}), 55: (1, {'@': 155}), 56: (1, {'@': 155}), 57: (1, {'@': 155}), 58: (1, {'@': 155}), 59: (1, {'@': 155}), 34: (1, {'@': 155}), 60: (1, {'@': 155}), 61: (1, {'@': 155}), 62: (1, {'@': 155}), 37: (1, {'@': 155}), 63: (1, {'@': 155}), 64: (1, {'@': 155}), 65: (1, {'@': 155})}, 424: {66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 496)}, 425: {79: (0, 441)}, 426: {66: (0, 280), 61: (0, 382), 60: (0, 538), 67: (0, 384), 59: (0, 536), 57: (0, 547)}, 427: {58: (0, 360), 59: (1, {'@': 181}), 57: (1, {'@': 181}), 60: (1, {'@': 181}), 64: (1, {'@': 181})}, 428: {67: (0, 415), 0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 13: (0, 293), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547), 64: (1, {'@': 178})}, 429: {66: (0, 280), 61: (0, 418), 65: (0, 352), 67: (0, 475), 59: (0, 536), 86: (0, 453), 60: (0, 538), 57: (0, 547)}, 430: {39: (1, {'@': 223}), 40: (1, {'@': 223}), 41: (1, {'@': 223}), 42: (1, {'@': 223}), 43: (1, {'@': 223}), 0: (1, {'@': 223}), 44: (1, {'@': 223}), 45: (1, {'@': 223}), 46: (1, {'@': 223}), 47: (1, {'@': 223}), 48: (1, {'@': 223}), 49: (1, {'@': 223}), 50: (1, {'@': 223}), 51: (1, {'@': 223}), 52: (1, {'@': 223}), 53: (1, {'@': 223}), 54: (1, {'@': 223}), 33: (1, {'@': 223}), 55: (1, {'@': 223}), 56: (1, {'@': 223}), 57: (1, {'@': 223}), 58: (1, {'@': 223}), 59: (1, {'@': 223}), 34: (1, {'@': 223}), 60: (1, {'@': 223}), 61: (1, {'@': 223}), 62: (1, {'@': 223}), 37: (1, {'@': 223}), 63: (1, {'@': 223}), 64: (1, {'@': 223}), 65: (1, {'@': 223})}, 431: {61: (0, 252)}, 432: {100: (0, 90), 46: (0, 168), 41: (0, 193), 88: (0, 178), 42: (1, {'@': 79}), 54: (1, {'@': 79}), 50: (1, {'@': 79}), 53: (1, {'@': 79}), 48: (1, {'@': 79}), 56: (1, {'@': 79}), 57: (1, {'@': 79}), 34: (1, {'@': 79}), 60: (1, {'@': 79}), 59: (1, {'@': 79}), 58: (1, {'@': 79}), 61: (1, {'@': 79}), 65: (1, {'@': 79}), 62: (1, {'@': 79}), 37: (1, {'@': 79}), 63: (1, {'@': 79}), 64: (1, {'@': 79})}, 433: {66: (0, 280), 67: (0, 319), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 434: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 67: (0, 225), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 13: (0, 376), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 435: {61: (0, 146)}, 436: {58: (0, 447), 59: (1, {'@': 187}), 57: (1, {'@': 187}), 60: (1, {'@': 187}), 64: (1, {'@': 187})}, 437: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 259), 17: (0, 264), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 6: (0, 438), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 438: {42: (1, {'@': 316}), 57: (1, {'@': 316}), 62: (1, {'@': 316}), 48: (1, {'@': 316}), 50: (1, {'@': 316}), 59: (1, {'@': 316}), 37: (1, {'@': 316}), 61: (1, {'@': 316}), 63: (1, {'@': 316}), 34: (1, {'@': 316}), 54: (1, {'@': 316}), 60: (1, {'@': 316}), 64: (1, {'@': 316}), 65: (1, {'@': 316}), 56: (1, {'@': 316}), 58: (1, {'@': 316})}, 439: {66: (0, 280), 67: (0, 213), 85: (0, 455), 60: (0, 538), 58: (0, 216), 59: (0, 536), 57: (0, 547), 34: (0, 423)}, 440: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 13: (0, 365)}, 441: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 13: (0, 117), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 67: (0, 123), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 442: {39: (1, {'@': 106}), 40: (1, {'@': 106}), 41: (1, {'@': 106}), 42: (1, {'@': 106}), 43: (1, {'@': 106}), 0: (1, {'@': 106}), 44: (1, {'@': 106}), 45: (1, {'@': 106}), 46: (1, {'@': 106}), 47: (1, {'@': 106}), 48: (1, {'@': 106}), 49: (1, {'@': 106}), 50: (1, {'@': 106}), 51: (1, {'@': 106}), 52: (1, {'@': 106}), 53: (1, {'@': 106}), 54: (1, {'@': 106}), 33: (1, {'@': 106}), 55: (1, {'@': 106}), 56: (1, {'@': 106}), 57: (1, {'@': 106}), 58: (1, {'@': 106}), 59: (1, {'@': 106}), 34: (1, {'@': 106}), 60: (1, {'@': 106}), 61: (1, {'@': 106}), 62: (1, {'@': 106}), 37: (1, {'@': 106}), 63: (1, {'@': 106}), 64: (1, {'@': 106}), 65: (1, {'@': 106})}, 443: {66: (0, 280), 63: (0, 97), 67: (0, 58), 65: (0, 352), 59: (0, 536), 34: (0, 67), 86: (0, 69), 60: (0, 538), 57: (0, 547)}, 444: {39: (1, {'@': 140}), 40: (1, {'@': 140}), 41: (1, {'@': 140}), 42: (1, {'@': 140}), 43: (1, {'@': 140}), 0: (1, {'@': 140}), 44: (1, {'@': 140}), 45: (1, {'@': 140}), 46: (1, {'@': 140}), 47: (1, {'@': 140}), 48: (1, {'@': 140}), 49: (1, {'@': 140}), 50: (1, {'@': 140}), 51: (1, {'@': 140}), 52: (1, {'@': 140}), 53: (1, {'@': 140}), 54: (1, {'@': 140}), 33: (1, {'@': 140}), 55: (1, {'@': 140}), 56: (1, {'@': 140}), 57: (1, {'@': 140}), 58: (1, {'@': 140}), 59: (1, {'@': 140}), 34: (1, {'@': 140}), 60: (1, {'@': 140}), 61: (1, {'@': 140}), 62: (1, {'@': 140}), 37: (1, {'@': 140}), 63: (1, {'@': 140}), 64: (1, {'@': 140}), 65: (1, {'@': 140})}, 445: {39: (1, {'@': 226}), 40: (1, {'@': 226}), 41: (1, {'@': 226}), 42: (1, {'@': 226}), 43: (1, {'@': 226}), 0: (1, {'@': 226}), 44: (1, {'@': 226}), 45: (1, {'@': 226}), 46: (1, {'@': 226}), 47: (1, {'@': 226}), 48: (1, {'@': 226}), 49: (1, {'@': 226}), 50: (1, {'@': 226}), 51: (1, {'@': 226}), 52: (1, {'@': 226}), 53: (1, {'@': 226}), 54: (1, {'@': 226}), 33: (1, {'@': 226}), 55: (1, {'@': 226}), 56: (1, {'@': 226}), 57: (1, {'@': 226}), 58: (1, {'@': 226}), 59: (1, {'@': 226}), 34: (1, {'@': 226}), 60: (1, {'@': 226}), 61: (1, {'@': 226}), 62: (1, {'@': 226}), 37: (1, {'@': 226}), 63: (1, {'@': 226}), 64: (1, {'@': 226}), 65: (1, {'@': 226})}, 446: {39: (1, {'@': 227}), 40: (1, {'@': 227}), 41: (1, {'@': 227}), 42: (1, {'@': 227}), 43: (1, {'@': 227}), 0: (1, {'@': 227}), 44: (1, {'@': 227}), 45: (1, {'@': 227}), 46: (1, {'@': 227}), 47: (1, {'@': 227}), 48: (1, {'@': 227}), 49: (1, {'@': 227}), 50: (1, {'@': 227}), 51: (1, {'@': 227}), 52: (1, {'@': 227}), 53: (1, {'@': 227}), 54: (1, {'@': 227}), 33: (1, {'@': 227}), 55: (1, {'@': 227}), 56: (1, {'@': 227}), 57: (1, {'@': 227}), 58: (1, {'@': 227}), 59: (1, {'@': 227}), 34: (1, {'@': 227}), 60: (1, {'@': 227}), 61: (1, {'@': 227}), 62: (1, {'@': 227}), 37: (1, {'@': 227}), 63: (1, {'@': 227}), 64: (1, {'@': 227}), 65: (1, {'@': 227})}, 447: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 67: (0, 291), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 13: (0, 404), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 448: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 13: (0, 344), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 20: (0, 462), 21: (0, 238), 22: (0, 497), 67: (0, 480), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547), 64: (1, {'@': 184})}, 449: {0: (0, 525), 1: (0, 229), 2: (0, 217), 13: (0, 364), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 450: {39: (1, {'@': 149}), 40: (1, {'@': 149}), 41: (1, {'@': 149}), 42: (1, {'@': 149}), 43: (1, {'@': 149}), 0: (1, {'@': 149}), 44: (1, {'@': 149}), 45: (1, {'@': 149}), 46: (1, {'@': 149}), 47: (1, {'@': 149}), 48: (1, {'@': 149}), 49: (1, {'@': 149}), 50: (1, {'@': 149}), 51: (1, {'@': 149}), 52: (1, {'@': 149}), 53: (1, {'@': 149}), 54: (1, {'@': 149}), 33: (1, {'@': 149}), 55: (1, {'@': 149}), 56: (1, {'@': 149}), 57: (1, {'@': 149}), 58: (1, {'@': 149}), 59: (1, {'@': 149}), 34: (1, {'@': 149}), 60: (1, {'@': 149}), 61: (1, {'@': 149}), 62: (1, {'@': 149}), 37: (1, {'@': 149}), 63: (1, {'@': 149}), 64: (1, {'@': 149}), 65: (1, {'@': 149})}, 451: {39: (1, {'@': 172}), 40: (1, {'@': 172}), 41: (1, {'@': 172}), 42: (1, {'@': 172}), 43: (1, {'@': 172}), 0: (1, {'@': 172}), 44: (1, {'@': 172}), 45: (1, {'@': 172}), 46: (1, {'@': 172}), 47: (1, {'@': 172}), 48: (1, {'@': 172}), 49: (1, {'@': 172}), 50: (1, {'@': 172}), 51: (1, {'@': 172}), 52: (1, {'@': 172}), 53: (1, {'@': 172}), 54: (1, {'@': 172}), 33: (1, {'@': 172}), 55: (1, {'@': 172}), 56: (1, {'@': 172}), 57: (1, {'@': 172}), 58: (1, {'@': 172}), 59: (1, {'@': 172}), 34: (1, {'@': 172}), 60: (1, {'@': 172}), 61: (1, {'@': 172}), 62: (1, {'@': 172}), 37: (1, {'@': 172}), 63: (1, {'@': 172}), 64: (1, {'@': 172}), 65: (1, {'@': 172})}, 452: {39: (1, {'@': 114}), 40: (1, {'@': 114}), 41: (1, {'@': 114}), 42: (1, {'@': 114}), 43: (1, {'@': 114}), 0: (1, {'@': 114}), 44: (1, {'@': 114}), 45: (1, {'@': 114}), 46: (1, {'@': 114}), 47: (1, {'@': 114}), 48: (1, {'@': 114}), 49: (1, {'@': 114}), 50: (1, {'@': 114}), 51: (1, {'@': 114}), 52: (1, {'@': 114}), 53: (1, {'@': 114}), 54: (1, {'@': 114}), 33: (1, {'@': 114}), 55: (1, {'@': 114}), 56: (1, {'@': 114}), 57: (1, {'@': 114}), 58: (1, {'@': 114}), 59: (1, {'@': 114}), 34: (1, {'@': 114}), 60: (1, {'@': 114}), 61: (1, {'@': 114}), 62: (1, {'@': 114}), 37: (1, {'@': 114}), 63: (1, {'@': 114}), 64: (1, {'@': 114}), 65: (1, {'@': 114})}, 453: {66: (0, 280), 60: (0, 538), 59: (0, 536), 67: (0, 464), 57: (0, 547), 61: (0, 64)}, 454: {39: (1, {'@': 107}), 40: (1, {'@': 107}), 41: (1, {'@': 107}), 42: (1, {'@': 107}), 43: (1, {'@': 107}), 0: (1, {'@': 107}), 44: (1, {'@': 107}), 45: (1, {'@': 107}), 46: (1, {'@': 107}), 47: (1, {'@': 107}), 48: (1, {'@': 107}), 49: (1, {'@': 107}), 50: (1, {'@': 107}), 51: (1, {'@': 107}), 52: (1, {'@': 107}), 53: (1, {'@': 107}), 54: (1, {'@': 107}), 33: (1, {'@': 107}), 55: (1, {'@': 107}), 56: (1, {'@': 107}), 57: (1, {'@': 107}), 58: (1, {'@': 107}), 59: (1, {'@': 107}), 34: (1, {'@': 107}), 60: (1, {'@': 107}), 61: (1, {'@': 107}), 62: (1, {'@': 107}), 37: (1, {'@': 107}), 63: (1, {'@': 107}), 64: (1, {'@': 107}), 65: (1, {'@': 107})}, 455: {0: (0, 525), 1: (0, 229), 2: (0, 324), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 13: (0, 262), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 34: (0, 104), 35: (0, 76), 36: (0, 72), 37: (0, 158), 3: (0, 477), 38: (0, 152)}, 456: {39: (1, {'@': 134}), 40: (1, {'@': 134}), 41: (1, {'@': 134}), 42: (1, {'@': 134}), 43: (1, {'@': 134}), 0: (1, {'@': 134}), 44: (1, {'@': 134}), 45: (1, {'@': 134}), 46: (1, {'@': 134}), 47: (1, {'@': 134}), 48: (1, {'@': 134}), 49: (1, {'@': 134}), 50: (1, {'@': 134}), 51: (1, {'@': 134}), 52: (1, {'@': 134}), 53: (1, {'@': 134}), 54: (1, {'@': 134}), 33: (1, {'@': 134}), 55: (1, {'@': 134}), 56: (1, {'@': 134}), 57: (1, {'@': 134}), 58: (1, {'@': 134}), 59: (1, {'@': 134}), 34: (1, {'@': 134}), 60: (1, {'@': 134}), 61: (1, {'@': 134}), 62: (1, {'@': 134}), 37: (1, {'@': 134}), 63: (1, {'@': 134}), 64: (1, {'@': 134}), 65: (1, {'@': 134})}, 457: {48: (0, 345)}, 458: {67: (0, 333), 66: (0, 280), 60: (0, 538), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 276}), 33: (1, {'@': 276}), 30: (1, {'@': 276}), 0: (1, {'@': 276}), 31: (1, {'@': 276}), 8: (1, {'@': 276}), 9: (1, {'@': 276}), 37: (1, {'@': 276}), 12: (1, {'@': 276}), 14: (1, {'@': 276})}, 459: {39: (1, {'@': 229}), 40: (1, {'@': 229}), 41: (1, {'@': 229}), 42: (1, {'@': 229}), 43: (1, {'@': 229}), 0: (1, {'@': 229}), 44: (1, {'@': 229}), 45: (1, {'@': 229}), 46: (1, {'@': 229}), 47: (1, {'@': 229}), 48: (1, {'@': 229}), 49: (1, {'@': 229}), 50: (1, {'@': 229}), 51: (1, {'@': 229}), 52: (1, {'@': 229}), 53: (1, {'@': 229}), 54: (1, {'@': 229}), 33: (1, {'@': 229}), 55: (1, {'@': 229}), 56: (1, {'@': 229}), 57: (1, {'@': 229}), 58: (1, {'@': 229}), 59: (1, {'@': 229}), 34: (1, {'@': 229}), 60: (1, {'@': 229}), 61: (1, {'@': 229}), 62: (1, {'@': 229}), 37: (1, {'@': 229}), 63: (1, {'@': 229}), 64: (1, {'@': 229}), 65: (1, {'@': 229})}, 460: {39: (1, {'@': 133}), 40: (1, {'@': 133}), 41: (1, {'@': 133}), 42: (1, {'@': 133}), 43: (1, {'@': 133}), 0: (1, {'@': 133}), 44: (1, {'@': 133}), 45: (1, {'@': 133}), 46: (1, {'@': 133}), 47: (1, {'@': 133}), 48: (1, {'@': 133}), 49: (1, {'@': 133}), 50: (1, {'@': 133}), 51: (1, {'@': 133}), 52: (1, {'@': 133}), 53: (1, {'@': 133}), 54: (1, {'@': 133}), 33: (1, {'@': 133}), 55: (1, {'@': 133}), 56: (1, {'@': 133}), 57: (1, {'@': 133}), 58: (1, {'@': 133}), 59: (1, {'@': 133}), 34: (1, {'@': 133}), 60: (1, {'@': 133}), 61: (1, {'@': 133}), 62: (1, {'@': 133}), 37: (1, {'@': 133}), 63: (1, {'@': 133}), 64: (1, {'@': 133}), 65: (1, {'@': 133})}, 461: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 21: (0, 238), 22: (0, 497), 1: (0, 128), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 67: (0, 131), 57: (0, 547)}, 462: {50: (1, {'@': 60}), 48: (1, {'@': 60}), 56: (1, {'@': 60}), 57: (1, {'@': 60}), 34: (1, {'@': 60}), 60: (1, {'@': 60}), 59: (1, {'@': 60}), 58: (1, {'@': 60}), 61: (1, {'@': 60}), 65: (1, {'@': 60}), 62: (1, {'@': 60}), 64: (1, {'@': 60}), 63: (1, {'@': 60}), 37: (1, {'@': 60})}, 463: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 13: (0, 380), 38: (0, 152)}, 464: {61: (0, 173)}, 465: {39: (1, {'@': 115}), 40: (1, {'@': 115}), 41: (1, {'@': 115}), 42: (1, {'@': 115}), 43: (1, {'@': 115}), 0: (1, {'@': 115}), 44: (1, {'@': 115}), 45: (1, {'@': 115}), 46: (1, {'@': 115}), 47: (1, {'@': 115}), 48: (1, {'@': 115}), 49: (1, {'@': 115}), 50: (1, {'@': 115}), 51: (1, {'@': 115}), 52: (1, {'@': 115}), 53: (1, {'@': 115}), 54: (1, {'@': 115}), 33: (1, {'@': 115}), 55: (1, {'@': 115}), 56: (1, {'@': 115}), 57: (1, {'@': 115}), 58: (1, {'@': 115}), 59: (1, {'@': 115}), 34: (1, {'@': 115}), 60: (1, {'@': 115}), 61: (1, {'@': 115}), 62: (1, {'@': 115}), 37: (1, {'@': 115}), 63: (1, {'@': 115}), 64: (1, {'@': 115}), 65: (1, {'@': 115})}, 466: {39: (1, {'@': 100}), 40: (1, {'@': 100}), 41: (1, {'@': 100}), 42: (1, {'@': 100}), 43: (1, {'@': 100}), 0: (1, {'@': 100}), 44: (1, {'@': 100}), 45: (1, {'@': 100}), 46: (1, {'@': 100}), 47: (1, {'@': 100}), 48: (1, {'@': 100}), 49: (1, {'@': 100}), 50: (1, {'@': 100}), 51: (1, {'@': 100}), 52: (1, {'@': 100}), 53: (1, {'@': 100}), 54: (1, {'@': 100}), 33: (1, {'@': 100}), 55: (1, {'@': 100}), 56: (1, {'@': 100}), 57: (1, {'@': 100}), 58: (1, {'@': 100}), 59: (1, {'@': 100}), 34: (1, {'@': 100}), 60: (1, {'@': 100}), 61: (1, {'@': 100}), 62: (1, {'@': 100}), 37: (1, {'@': 100}), 63: (1, {'@': 100}), 64: (1, {'@': 100}), 65: (1, {'@': 100})}, 467: {66: (0, 280), 67: (0, 100), 60: (0, 538), 59: (0, 536), 57: (0, 547), 11: (1, {'@': 298}), 33: (1, {'@': 298}), 30: (1, {'@': 298}), 0: (1, {'@': 298}), 31: (1, {'@': 298}), 8: (1, {'@': 298}), 9: (1, {'@': 298}), 37: (1, {'@': 298}), 12: (1, {'@': 298}), 14: (1, {'@': 298})}, 468: {66: (0, 280), 67: (0, 163), 60: (0, 538), 59: (0, 536), 57: (0, 547), 61: (0, 161)}, 469: {39: (1, {'@': 138}), 40: (1, {'@': 138}), 41: (1, {'@': 138}), 42: (1, {'@': 138}), 43: (1, {'@': 138}), 0: (1, {'@': 138}), 44: (1, {'@': 138}), 45: (1, {'@': 138}), 46: (1, {'@': 138}), 47: (1, {'@': 138}), 48: (1, {'@': 138}), 49: (1, {'@': 138}), 50: (1, {'@': 138}), 51: (1, {'@': 138}), 52: (1, {'@': 138}), 53: (1, {'@': 138}), 54: (1, {'@': 138}), 33: (1, {'@': 138}), 55: (1, {'@': 138}), 56: (1, {'@': 138}), 57: (1, {'@': 138}), 58: (1, {'@': 138}), 59: (1, {'@': 138}), 34: (1, {'@': 138}), 60: (1, {'@': 138}), 61: (1, {'@': 138}), 62: (1, {'@': 138}), 37: (1, {'@': 138}), 63: (1, {'@': 138}), 64: (1, {'@': 138}), 65: (1, {'@': 138})}, 470: {66: (0, 280), 64: (0, 494), 60: (0, 538), 59: (0, 536), 57: (0, 547), 67: (0, 255)}, 471: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 13: (0, 387), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 67: (0, 393), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 472: {66: (0, 280), 58: (0, 81), 60: (0, 538), 67: (0, 85), 59: (0, 536), 61: (0, 82), 57: (0, 547)}, 473: {30: (0, 243), 39: (1, {'@': 121}), 40: (1, {'@': 121}), 41: (1, {'@': 121}), 42: (1, {'@': 121}), 43: (1, {'@': 121}), 0: (1, {'@': 121}), 44: (1, {'@': 121}), 45: (1, {'@': 121}), 46: (1, {'@': 121}), 47: (1, {'@': 121}), 48: (1, {'@': 121}), 49: (1, {'@': 121}), 50: (1, {'@': 121}), 51: (1, {'@': 121}), 52: (1, {'@': 121}), 53: (1, {'@': 121}), 54: (1, {'@': 121}), 33: (1, {'@': 121}), 55: (1, {'@': 121}), 56: (1, {'@': 121}), 57: (1, {'@': 121}), 58: (1, {'@': 121}), 59: (1, {'@': 121}), 34: (1, {'@': 121}), 60: (1, {'@': 121}), 61: (1, {'@': 121}), 62: (1, {'@': 121}), 37: (1, {'@': 121}), 63: (1, {'@': 121}), 64: (1, {'@': 121}), 65: (1, {'@': 121})}, 474: {64: (0, 451)}, 475: {86: (0, 468), 61: (0, 394), 66: (0, 280), 65: (0, 352), 60: (0, 538), 67: (0, 70), 59: (0, 536), 57: (0, 547)}, 476: {39: (1, {'@': 104}), 40: (1, {'@': 104}), 41: (1, {'@': 104}), 42: (1, {'@': 104}), 43: (1, {'@': 104}), 0: (1, {'@': 104}), 44: (1, {'@': 104}), 45: (1, {'@': 104}), 46: (1, {'@': 104}), 47: (1, {'@': 104}), 48: (1, {'@': 104}), 49: (1, {'@': 104}), 50: (1, {'@': 104}), 51: (1, {'@': 104}), 52: (1, {'@': 104}), 53: (1, {'@': 104}), 54: (1, {'@': 104}), 33: (1, {'@': 104}), 55: (1, {'@': 104}), 56: (1, {'@': 104}), 57: (1, {'@': 104}), 58: (1, {'@': 104}), 59: (1, {'@': 104}), 34: (1, {'@': 104}), 60: (1, {'@': 104}), 61: (1, {'@': 104}), 62: (1, {'@': 104}), 37: (1, {'@': 104}), 63: (1, {'@': 104}), 64: (1, {'@': 104}), 65: (1, {'@': 104})}, 477: {57: (1, {'@': 338}), 34: (1, {'@': 338}), 60: (1, {'@': 338}), 59: (1, {'@': 338}), 58: (1, {'@': 338})}, 478: {39: (1, {'@': 257}), 40: (1, {'@': 257}), 41: (1, {'@': 257}), 42: (1, {'@': 257}), 43: (1, {'@': 257}), 0: (1, {'@': 257}), 44: (1, {'@': 257}), 45: (1, {'@': 257}), 46: (1, {'@': 257}), 47: (1, {'@': 257}), 48: (1, {'@': 257}), 49: (1, {'@': 257}), 50: (1, {'@': 257}), 51: (1, {'@': 257}), 52: (1, {'@': 257}), 53: (1, {'@': 257}), 54: (1, {'@': 257}), 33: (1, {'@': 257}), 55: (1, {'@': 257}), 56: (1, {'@': 257}), 57: (1, {'@': 257}), 58: (1, {'@': 257}), 59: (1, {'@': 257}), 34: (1, {'@': 257}), 60: (1, {'@': 257}), 61: (1, {'@': 257}), 62: (1, {'@': 257}), 37: (1, {'@': 257}), 63: (1, {'@': 257}), 64: (1, {'@': 257}), 65: (1, {'@': 257})}, 479: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 67: (0, 138), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 1: (0, 145), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 480: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 13: (0, 410), 59: (1, {'@': 183}), 57: (1, {'@': 183}), 60: (1, {'@': 183}), 64: (1, {'@': 183})}, 481: {66: (0, 280), 61: (0, 71), 67: (0, 127), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 482: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 13: (0, 311), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 61: (0, 334), 37: (0, 158), 38: (0, 152)}, 483: {0: (0, 525), 1: (0, 229), 2: (0, 324), 3: (0, 416), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 13: (0, 262), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 34: (0, 535), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 484: {81: (0, 285), 69: (0, 154), 0: (0, 471), 45: (0, 150), 42: (1, {'@': 201}), 57: (1, {'@': 201}), 62: (1, {'@': 201}), 48: (1, {'@': 201}), 50: (1, {'@': 201}), 59: (1, {'@': 201}), 37: (1, {'@': 201}), 61: (1, {'@': 201}), 63: (1, {'@': 201}), 34: (1, {'@': 201}), 55: (1, {'@': 201}), 60: (1, {'@': 201}), 64: (1, {'@': 201}), 65: (1, {'@': 201}), 56: (1, {'@': 201}), 58: (1, {'@': 201}), 39: (1, {'@': 201}), 40: (1, {'@': 201}), 43: (1, {'@': 201}), 41: (1, {'@': 201}), 44: (1, {'@': 201}), 46: (1, {'@': 201}), 47: (1, {'@': 201}), 49: (1, {'@': 201}), 51: (1, {'@': 201}), 52: (1, {'@': 201}), 53: (1, {'@': 201}), 54: (1, {'@': 201}), 33: (1, {'@': 201})}, 485: {48: (0, 458)}, 486: {66: (0, 280), 67: (0, 320), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 487: {39: (1, {'@': 220}), 40: (1, {'@': 220}), 41: (1, {'@': 220}), 42: (1, {'@': 220}), 43: (1, {'@': 220}), 0: (1, {'@': 220}), 44: (1, {'@': 220}), 45: (1, {'@': 220}), 46: (1, {'@': 220}), 47: (1, {'@': 220}), 48: (1, {'@': 220}), 49: (1, {'@': 220}), 50: (1, {'@': 220}), 51: (1, {'@': 220}), 52: (1, {'@': 220}), 53: (1, {'@': 220}), 54: (1, {'@': 220}), 33: (1, {'@': 220}), 55: (1, {'@': 220}), 56: (1, {'@': 220}), 57: (1, {'@': 220}), 58: (1, {'@': 220}), 59: (1, {'@': 220}), 34: (1, {'@': 220}), 60: (1, {'@': 220}), 61: (1, {'@': 220}), 62: (1, {'@': 220}), 37: (1, {'@': 220}), 63: (1, {'@': 220}), 64: (1, {'@': 220}), 65: (1, {'@': 220})}, 488: {39: (1, {'@': 130}), 40: (1, {'@': 130}), 41: (1, {'@': 130}), 42: (1, {'@': 130}), 43: (1, {'@': 130}), 0: (1, {'@': 130}), 44: (1, {'@': 130}), 45: (1, {'@': 130}), 46: (1, {'@': 130}), 47: (1, {'@': 130}), 48: (1, {'@': 130}), 49: (1, {'@': 130}), 50: (1, {'@': 130}), 51: (1, {'@': 130}), 52: (1, {'@': 130}), 53: (1, {'@': 130}), 54: (1, {'@': 130}), 33: (1, {'@': 130}), 55: (1, {'@': 130}), 56: (1, {'@': 130}), 57: (1, {'@': 130}), 58: (1, {'@': 130}), 59: (1, {'@': 130}), 34: (1, {'@': 130}), 60: (1, {'@': 130}), 61: (1, {'@': 130}), 62: (1, {'@': 130}), 37: (1, {'@': 130}), 63: (1, {'@': 130}), 64: (1, {'@': 130}), 65: (1, {'@': 130})}, 489: {39: (1, {'@': 341}), 42: (1, {'@': 341}), 57: (1, {'@': 341}), 43: (1, {'@': 341}), 0: (1, {'@': 341}), 45: (1, {'@': 341}), 46: (1, {'@': 341}), 49: (1, {'@': 341}), 50: (1, {'@': 341}), 37: (1, {'@': 341}), 51: (1, {'@': 341}), 52: (1, {'@': 341}), 34: (1, {'@': 341}), 60: (1, {'@': 341}), 64: (1, {'@': 341}), 65: (1, {'@': 341}), 33: (1, {'@': 341}), 56: (1, {'@': 341}), 55: (1, {'@': 341}), 40: (1, {'@': 341}), 41: (1, {'@': 341}), 44: (1, {'@': 341}), 62: (1, {'@': 341}), 48: (1, {'@': 341}), 47: (1, {'@': 341}), 59: (1, {'@': 341}), 61: (1, {'@': 341}), 63: (1, {'@': 341}), 53: (1, {'@': 341}), 54: (1, {'@': 341}), 58: (1, {'@': 341})}, 490: {39: (1, {'@': 157}), 40: (1, {'@': 157}), 41: (1, {'@': 157}), 42: (1, {'@': 157}), 43: (1, {'@': 157}), 0: (1, {'@': 157}), 44: (1, {'@': 157}), 45: (1, {'@': 157}), 46: (1, {'@': 157}), 47: (1, {'@': 157}), 48: (1, {'@': 157}), 49: (1, {'@': 157}), 50: (1, {'@': 157}), 51: (1, {'@': 157}), 52: (1, {'@': 157}), 53: (1, {'@': 157}), 54: (1, {'@': 157}), 33: (1, {'@': 157}), 55: (1, {'@': 157}), 56: (1, {'@': 157}), 57: (1, {'@': 157}), 58: (1, {'@': 157}), 59: (1, {'@': 157}), 34: (1, {'@': 157}), 60: (1, {'@': 157}), 61: (1, {'@': 157}), 62: (1, {'@': 157}), 37: (1, {'@': 157}), 63: (1, {'@': 157}), 64: (1, {'@': 157}), 65: (1, {'@': 157})}, 491: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 13: (0, 293), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 67: (0, 288), 35: (0, 76), 61: (0, 120), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 492: {39: (1, {'@': 342}), 42: (1, {'@': 342}), 57: (1, {'@': 342}), 43: (1, {'@': 342}), 0: (1, {'@': 342}), 45: (1, {'@': 342}), 46: (1, {'@': 342}), 49: (1, {'@': 342}), 50: (1, {'@': 342}), 37: (1, {'@': 342}), 51: (1, {'@': 342}), 52: (1, {'@': 342}), 34: (1, {'@': 342}), 60: (1, {'@': 342}), 64: (1, {'@': 342}), 65: (1, {'@': 342}), 33: (1, {'@': 342}), 56: (1, {'@': 342}), 55: (1, {'@': 342}), 40: (1, {'@': 342}), 41: (1, {'@': 342}), 44: (1, {'@': 342}), 62: (1, {'@': 342}), 48: (1, {'@': 342}), 47: (1, {'@': 342}), 59: (1, {'@': 342}), 61: (1, {'@': 342}), 63: (1, {'@': 342}), 53: (1, {'@': 342}), 54: (1, {'@': 342}), 58: (1, {'@': 342})}, 493: {39: (1, {'@': 160}), 40: (1, {'@': 160}), 41: (1, {'@': 160}), 42: (1, {'@': 160}), 43: (1, {'@': 160}), 0: (1, {'@': 160}), 44: (1, {'@': 160}), 45: (1, {'@': 160}), 46: (1, {'@': 160}), 47: (1, {'@': 160}), 48: (1, {'@': 160}), 49: (1, {'@': 160}), 50: (1, {'@': 160}), 51: (1, {'@': 160}), 52: (1, {'@': 160}), 53: (1, {'@': 160}), 54: (1, {'@': 160}), 33: (1, {'@': 160}), 55: (1, {'@': 160}), 56: (1, {'@': 160}), 57: (1, {'@': 160}), 58: (1, {'@': 160}), 59: (1, {'@': 160}), 34: (1, {'@': 160}), 60: (1, {'@': 160}), 61: (1, {'@': 160}), 62: (1, {'@': 160}), 37: (1, {'@': 160}), 63: (1, {'@': 160}), 64: (1, {'@': 160}), 65: (1, {'@': 160})}, 494: {39: (1, {'@': 171}), 40: (1, {'@': 171}), 41: (1, {'@': 171}), 42: (1, {'@': 171}), 43: (1, {'@': 171}), 0: (1, {'@': 171}), 44: (1, {'@': 171}), 45: (1, {'@': 171}), 46: (1, {'@': 171}), 47: (1, {'@': 171}), 48: (1, {'@': 171}), 49: (1, {'@': 171}), 50: (1, {'@': 171}), 51: (1, {'@': 171}), 52: (1, {'@': 171}), 53: (1, {'@': 171}), 54: (1, {'@': 171}), 33: (1, {'@': 171}), 55: (1, {'@': 171}), 56: (1, {'@': 171}), 57: (1, {'@': 171}), 58: (1, {'@': 171}), 59: (1, {'@': 171}), 34: (1, {'@': 171}), 60: (1, {'@': 171}), 61: (1, {'@': 171}), 62: (1, {'@': 171}), 37: (1, {'@': 171}), 63: (1, {'@': 171}), 64: (1, {'@': 171}), 65: (1, {'@': 171})}, 495: {42: (1, {'@': 194}), 57: (1, {'@': 194}), 0: (1, {'@': 194}), 45: (1, {'@': 194}), 62: (1, {'@': 194}), 48: (1, {'@': 194}), 50: (1, {'@': 194}), 59: (1, {'@': 194}), 37: (1, {'@': 194}), 61: (1, {'@': 194}), 63: (1, {'@': 194}), 34: (1, {'@': 194}), 55: (1, {'@': 194}), 60: (1, {'@': 194}), 64: (1, {'@': 194}), 65: (1, {'@': 194}), 56: (1, {'@': 194}), 58: (1, {'@': 194}), 39: (1, {'@': 194}), 40: (1, {'@': 194}), 43: (1, {'@': 194}), 41: (1, {'@': 194}), 44: (1, {'@': 194}), 46: (1, {'@': 194}), 47: (1, {'@': 194}), 49: (1, {'@': 194}), 51: (1, {'@': 194}), 52: (1, {'@': 194}), 53: (1, {'@': 194}), 54: (1, {'@': 194}), 33: (1, {'@': 194})}, 496: {57: (1, {'@': 54}), 60: (1, {'@': 54}), 59: (1, {'@': 54}), 37: (1, {'@': 54}), 56: (1, {'@': 54}), 34: (1, {'@': 54})}, 497: {39: (0, 235), 96: (0, 239), 101: (0, 273), 40: (0, 196), 52: (0, 192), 43: (0, 189), 41: (1, {'@': 81}), 42: (1, {'@': 81}), 54: (1, {'@': 81}), 50: (1, {'@': 81}), 46: (1, {'@': 81}), 53: (1, {'@': 81}), 48: (1, {'@': 81}), 56: (1, {'@': 81}), 57: (1, {'@': 81}), 34: (1, {'@': 81}), 60: (1, {'@': 81}), 59: (1, {'@': 81}), 58: (1, {'@': 81}), 61: (1, {'@': 81}), 65: (1, {'@': 81}), 62: (1, {'@': 81}), 37: (1, {'@': 81}), 63: (1, {'@': 81}), 64: (1, {'@': 81})}, 498: {0: (0, 525), 1: (0, 229), 2: (0, 324), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 13: (0, 262), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 34: (0, 26), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 3: (0, 477), 38: (0, 152)}, 499: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 67: (0, 504), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 1: (0, 51), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 500: {39: (1, {'@': 323}), 42: (1, {'@': 323}), 57: (1, {'@': 323}), 43: (1, {'@': 323}), 46: (1, {'@': 323}), 50: (1, {'@': 323}), 37: (1, {'@': 323}), 52: (1, {'@': 323}), 34: (1, {'@': 323}), 60: (1, {'@': 323}), 64: (1, {'@': 323}), 33: (1, {'@': 323}), 65: (1, {'@': 323}), 56: (1, {'@': 323}), 40: (1, {'@': 323}), 41: (1, {'@': 323}), 62: (1, {'@': 323}), 47: (1, {'@': 323}), 48: (1, {'@': 323}), 59: (1, {'@': 323}), 61: (1, {'@': 323}), 63: (1, {'@': 323}), 53: (1, {'@': 323}), 54: (1, {'@': 323}), 58: (1, {'@': 323})}, 501: {57: (1, {'@': 166}), 60: (1, {'@': 166}), 59: (1, {'@': 166}), 34: (1, {'@': 166}), 58: (1, {'@': 166})}, 502: {39: (1, {'@': 321}), 42: (1, {'@': 321}), 57: (1, {'@': 321}), 43: (1, {'@': 321}), 46: (1, {'@': 321}), 50: (1, {'@': 321}), 37: (1, {'@': 321}), 52: (1, {'@': 321}), 34: (1, {'@': 321}), 60: (1, {'@': 321}), 64: (1, {'@': 321}), 65: (1, {'@': 321}), 56: (1, {'@': 321}), 40: (1, {'@': 321}), 41: (1, {'@': 321}), 62: (1, {'@': 321}), 48: (1, {'@': 321}), 59: (1, {'@': 321}), 61: (1, {'@': 321}), 63: (1, {'@': 321}), 53: (1, {'@': 321}), 54: (1, {'@': 321}), 58: (1, {'@': 321})}, 503: {57: (1, {'@': 301}), 60: (1, {'@': 301}), 59: (1, {'@': 301}), 37: (1, {'@': 301}), 56: (1, {'@': 301}), 34: (1, {'@': 301})}, 504: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 1: (0, 534), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 505: {66: (0, 280), 2: (0, 287), 72: (0, 257), 37: (0, 158), 59: (0, 536), 70: (0, 271), 73: (0, 543), 74: (0, 503), 67: (0, 272), 60: (0, 538), 57: (0, 547), 34: (1, {'@': 48})}, 506: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 49: (0, 314), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 13: (0, 387), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 67: (0, 393), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 507: {34: (0, 424)}, 508: {39: (1, {'@': 173}), 40: (1, {'@': 173}), 41: (1, {'@': 173}), 42: (1, {'@': 173}), 43: (1, {'@': 173}), 0: (1, {'@': 173}), 44: (1, {'@': 173}), 45: (1, {'@': 173}), 46: (1, {'@': 173}), 47: (1, {'@': 173}), 48: (1, {'@': 173}), 49: (1, {'@': 173}), 50: (1, {'@': 173}), 51: (1, {'@': 173}), 52: (1, {'@': 173}), 53: (1, {'@': 173}), 54: (1, {'@': 173}), 33: (1, {'@': 173}), 55: (1, {'@': 173}), 56: (1, {'@': 173}), 57: (1, {'@': 173}), 58: (1, {'@': 173}), 59: (1, {'@': 173}), 34: (1, {'@': 173}), 60: (1, {'@': 173}), 61: (1, {'@': 173}), 62: (1, {'@': 173}), 37: (1, {'@': 173}), 63: (1, {'@': 173}), 64: (1, {'@': 173}), 65: (1, {'@': 173})}, 509: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 13: (0, 177), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 510: {41: (1, {'@': 319}), 42: (1, {'@': 319}), 57: (1, {'@': 319}), 62: (1, {'@': 319}), 46: (1, {'@': 319}), 48: (1, {'@': 319}), 50: (1, {'@': 319}), 59: (1, {'@': 319}), 37: (1, {'@': 319}), 61: (1, {'@': 319}), 63: (1, {'@': 319}), 53: (1, {'@': 319}), 34: (1, {'@': 319}), 54: (1, {'@': 319}), 60: (1, {'@': 319}), 64: (1, {'@': 319}), 65: (1, {'@': 319}), 56: (1, {'@': 319}), 58: (1, {'@': 319})}, 511: {56: (1, {'@': 44})}, 512: {66: (0, 280), 67: (0, 45), 60: (0, 538), 59: (0, 536), 58: (0, 256), 57: (0, 547), 61: (0, 456)}, 513: {42: (1, {'@': 317}), 57: (1, {'@': 317}), 62: (1, {'@': 317}), 48: (1, {'@': 317}), 50: (1, {'@': 317}), 59: (1, {'@': 317}), 37: (1, {'@': 317}), 61: (1, {'@': 317}), 63: (1, {'@': 317}), 53: (1, {'@': 317}), 34: (1, {'@': 317}), 54: (1, {'@': 317}), 60: (1, {'@': 317}), 64: (1, {'@': 317}), 65: (1, {'@': 317}), 56: (1, {'@': 317}), 58: (1, {'@': 317})}, 514: {0: (0, 525), 1: (0, 229), 2: (0, 217), 13: (0, 41), 4: (0, 172), 5: (0, 170), 99: (0, 122), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 60: (0, 538), 18: (0, 292), 17: (0, 264), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 64: (0, 99), 26: (0, 442), 27: (0, 432), 28: (0, 13), 67: (0, 294), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 515: {11: (1, {'@': 92}), 0: (1, {'@': 92}), 31: (1, {'@': 92}), 8: (1, {'@': 92}), 9: (1, {'@': 92}), 37: (1, {'@': 92}), 12: (1, {'@': 92}), 30: (1, {'@': 92})}, 516: {66: (0, 280), 67: (0, 472), 61: (0, 488), 58: (0, 491), 59: (0, 536), 60: (0, 538), 57: (0, 547)}, 517: {42: (1, {'@': 195}), 57: (1, {'@': 195}), 0: (1, {'@': 195}), 45: (1, {'@': 195}), 62: (1, {'@': 195}), 48: (1, {'@': 195}), 50: (1, {'@': 195}), 59: (1, {'@': 195}), 37: (1, {'@': 195}), 61: (1, {'@': 195}), 63: (1, {'@': 195}), 34: (1, {'@': 195}), 55: (1, {'@': 195}), 60: (1, {'@': 195}), 64: (1, {'@': 195}), 65: (1, {'@': 195}), 56: (1, {'@': 195}), 58: (1, {'@': 195}), 39: (1, {'@': 195}), 40: (1, {'@': 195}), 43: (1, {'@': 195}), 41: (1, {'@': 195}), 44: (1, {'@': 195}), 46: (1, {'@': 195}), 47: (1, {'@': 195}), 49: (1, {'@': 195}), 51: (1, {'@': 195}), 52: (1, {'@': 195}), 53: (1, {'@': 195}), 54: (1, {'@': 195}), 33: (1, {'@': 195})}, 518: {2: (0, 287), 73: (0, 543), 72: (0, 257), 37: (0, 158), 70: (0, 261), 74: (0, 503), 34: (1, {'@': 48})}, 519: {37: (1, {'@': 307}), 9: (1, {'@': 307}), 12: (1, {'@': 307})}, 520: {37: (1, {'@': 308}), 9: (1, {'@': 308}), 12: (1, {'@': 308})}, 521: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 15: (0, 274), 16: (0, 259), 17: (0, 264), 19: (0, 465), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 6: (0, 47), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 522: {58: (0, 269), 66: (0, 280), 61: (0, 278), 67: (0, 281), 60: (0, 538), 59: (0, 536), 57: (0, 547)}, 523: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 13: (0, 57), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 524: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 67: (0, 482), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 13: (0, 293), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 61: (0, 399), 36: (0, 72), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 525: {13: (0, 200), 0: (0, 525), 80: (0, 8), 8: (0, 207), 9: (0, 231), 10: (0, 277), 90: (0, 119), 12: (0, 270), 60: (0, 538), 67: (0, 137), 18: (0, 292), 20: (0, 462), 22: (0, 497), 23: (0, 406), 16: (0, 259), 26: (0, 442), 27: (0, 432), 61: (0, 105), 2: (0, 217), 1: (0, 229), 11: (0, 279), 29: (0, 46), 59: (0, 536), 33: (0, 37), 66: (0, 280), 17: (0, 264), 37: (0, 158), 38: (0, 152), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 14: (0, 221), 15: (0, 274), 19: (0, 465), 21: (0, 238), 24: (0, 454), 25: (0, 452), 28: (0, 13), 30: (0, 17), 31: (0, 35), 32: (0, 476), 35: (0, 76), 36: (0, 72), 57: (0, 547)}, 526: {0: (0, 525), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 66: (0, 280), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 60: (0, 538), 21: (0, 238), 22: (0, 497), 1: (0, 414), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 59: (0, 536), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 67: (0, 417), 37: (0, 158), 38: (0, 152), 57: (0, 547)}, 527: {66: (0, 280), 67: (0, 290), 65: (0, 352), 60: (0, 538), 59: (0, 536), 86: (0, 426), 57: (0, 547), 61: (0, 446)}, 528: {11: (1, {'@': 86}), 0: (1, {'@': 86}), 31: (1, {'@': 86}), 8: (1, {'@': 86}), 9: (1, {'@': 86}), 37: (1, {'@': 86}), 12: (1, {'@': 86}), 30: (1, {'@': 86})}, 529: {39: (1, {'@': 144}), 40: (1, {'@': 144}), 41: (1, {'@': 144}), 42: (1, {'@': 144}), 43: (1, {'@': 144}), 0: (1, {'@': 144}), 44: (1, {'@': 144}), 45: (1, {'@': 144}), 46: (1, {'@': 144}), 47: (1, {'@': 144}), 48: (1, {'@': 144}), 49: (1, {'@': 144}), 50: (1, {'@': 144}), 51: (1, {'@': 144}), 52: (1, {'@': 144}), 53: (1, {'@': 144}), 54: (1, {'@': 144}), 33: (1, {'@': 144}), 55: (1, {'@': 144}), 56: (1, {'@': 144}), 57: (1, {'@': 144}), 58: (1, {'@': 144}), 59: (1, {'@': 144}), 34: (1, {'@': 144}), 60: (1, {'@': 144}), 61: (1, {'@': 144}), 62: (1, {'@': 144}), 37: (1, {'@': 144}), 63: (1, {'@': 144}), 64: (1, {'@': 144}), 65: (1, {'@': 144})}, 530: {61: (0, 388)}, 531: {2: (0, 287), 73: (0, 543), 70: (0, 392), 72: (0, 257), 37: (0, 158), 74: (0, 503), 59: (1, {'@': 48}), 57: (1, {'@': 48}), 60: (1, {'@': 48}), 56: (1, {'@': 48})}, 532: {39: (1, {'@': 148}), 40: (1, {'@': 148}), 41: (1, {'@': 148}), 42: (1, {'@': 148}), 43: (1, {'@': 148}), 0: (1, {'@': 148}), 44: (1, {'@': 148}), 45: (1, {'@': 148}), 46: (1, {'@': 148}), 47: (1, {'@': 148}), 48: (1, {'@': 148}), 49: (1, {'@': 148}), 50: (1, {'@': 148}), 51: (1, {'@': 148}), 52: (1, {'@': 148}), 53: (1, {'@': 148}), 54: (1, {'@': 148}), 33: (1, {'@': 148}), 55: (1, {'@': 148}), 56: (1, {'@': 148}), 57: (1, {'@': 148}), 58: (1, {'@': 148}), 59: (1, {'@': 148}), 34: (1, {'@': 148}), 60: (1, {'@': 148}), 61: (1, {'@': 148}), 62: (1, {'@': 148}), 37: (1, {'@': 148}), 63: (1, {'@': 148}), 64: (1, {'@': 148}), 65: (1, {'@': 148})}, 533: {57: (1, {'@': 165}), 60: (1, {'@': 165}), 59: (1, {'@': 165}), 34: (1, {'@': 165}), 58: (1, {'@': 165})}, 534: {66: (0, 280), 67: (0, 457), 60: (0, 538), 48: (0, 461), 59: (0, 536), 57: (0, 547)}, 535: {39: (1, {'@': 156}), 40: (1, {'@': 156}), 41: (1, {'@': 156}), 42: (1, {'@': 156}), 43: (1, {'@': 156}), 0: (1, {'@': 156}), 44: (1, {'@': 156}), 45: (1, {'@': 156}), 46: (1, {'@': 156}), 47: (1, {'@': 156}), 48: (1, {'@': 156}), 49: (1, {'@': 156}), 50: (1, {'@': 156}), 51: (1, {'@': 156}), 52: (1, {'@': 156}), 53: (1, {'@': 156}), 54: (1, {'@': 156}), 33: (1, {'@': 156}), 55: (1, {'@': 156}), 56: (1, {'@': 156}), 57: (1, {'@': 156}), 58: (1, {'@': 156}), 59: (1, {'@': 156}), 34: (1, {'@': 156}), 60: (1, {'@': 156}), 61: (1, {'@': 156}), 62: (1, {'@': 156}), 37: (1, {'@': 156}), 63: (1, {'@': 156}), 64: (1, {'@': 156}), 65: (1, {'@': 156})}, 536: {59: (1, {'@': 309}), 57: (1, {'@': 309}), 60: (1, {'@': 309}), 61: (1, {'@': 309}), 37: (1, {'@': 309}), 56: (1, {'@': 309}), 0: (1, {'@': 309}), 8: (1, {'@': 309}), 9: (1, {'@': 309}), 12: (1, {'@': 309}), 30: (1, {'@': 309}), 11: (1, {'@': 309}), 31: (1, {'@': 309}), 33: (1, {'@': 309}), 14: (1, {'@': 309}), 79: (1, {'@': 309}), 64: (1, {'@': 309}), 58: (1, {'@': 309}), 34: (1, {'@': 309}), 65: (1, {'@': 309}), 48: (1, {'@': 309}), 80: (1, {'@': 309})}, 537: {48: (0, 479)}, 538: {59: (1, {'@': 310}), 57: (1, {'@': 310}), 60: (1, {'@': 310}), 61: (1, {'@': 310}), 37: (1, {'@': 310}), 56: (1, {'@': 310}), 0: (1, {'@': 310}), 8: (1, {'@': 310}), 9: (1, {'@': 310}), 12: (1, {'@': 310}), 30: (1, {'@': 310}), 11: (1, {'@': 310}), 31: (1, {'@': 310}), 33: (1, {'@': 310}), 14: (1, {'@': 310}), 79: (1, {'@': 310}), 64: (1, {'@': 310}), 58: (1, {'@': 310}), 34: (1, {'@': 310}), 65: (1, {'@': 310}), 48: (1, {'@': 310}), 80: (1, {'@': 310})}, 539: {0: (0, 525), 1: (0, 229), 2: (0, 217), 13: (0, 134), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 540: {0: (0, 525), 1: (0, 229), 2: (0, 217), 4: (0, 172), 5: (0, 170), 6: (0, 214), 7: (0, 223), 8: (0, 207), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 61: (0, 450), 36: (0, 72), 37: (0, 158), 38: (0, 152), 13: (0, 410)}, 541: {0: (0, 525), 1: (0, 229), 2: (0, 217), 13: (0, 443), 4: (0, 172), 5: (0, 170), 6: (0, 214), 8: (0, 207), 7: (0, 223), 9: (0, 231), 10: (0, 277), 11: (0, 279), 12: (0, 270), 14: (0, 221), 15: (0, 274), 16: (0, 259), 17: (0, 264), 18: (0, 292), 19: (0, 465), 20: (0, 462), 21: (0, 238), 22: (0, 497), 23: (0, 406), 24: (0, 454), 25: (0, 452), 26: (0, 442), 27: (0, 432), 28: (0, 13), 29: (0, 46), 30: (0, 17), 31: (0, 35), 32: (0, 476), 33: (0, 37), 35: (0, 76), 36: (0, 72), 37: (0, 158), 38: (0, 152)}, 542: {39: (1, {'@': 150}), 40: (1, {'@': 150}), 41: (1, {'@': 150}), 42: (1, {'@': 150}), 43: (1, {'@': 150}), 0: (1, {'@': 150}), 44: (1, {'@': 150}), 45: (1, {'@': 150}), 46: (1, {'@': 150}), 47: (1, {'@': 150}), 48: (1, {'@': 150}), 49: (1, {'@': 150}), 50: (1, {'@': 150}), 51: (1, {'@': 150}), 52: (1, {'@': 150}), 53: (1, {'@': 150}), 54: (1, {'@': 150}), 33: (1, {'@': 150}), 55: (1, {'@': 150}), 56: (1, {'@': 150}), 57: (1, {'@': 150}), 58: (1, {'@': 150}), 59: (1, {'@': 150}), 34: (1, {'@': 150}), 60: (1, {'@': 150}), 61: (1, {'@': 150}), 62: (1, {'@': 150}), 37: (1, {'@': 150}), 63: (1, {'@': 150}), 64: (1, {'@': 150}), 65: (1, {'@': 150})}, 543: {2: (0, 287), 74: (0, 174), 72: (0, 165), 37: (0, 158), 59: (1, {'@': 47}), 57: (1, {'@': 47}), 60: (1, {'@': 47}), 56: (1, {'@': 47}), 34: (1, {'@': 47})}, 544: {42: (1, {'@': 196}), 57: (1, {'@': 196}), 0: (1, {'@': 196}), 45: (1, {'@': 196}), 62: (1, {'@': 196}), 48: (1, {'@': 196}), 50: (1, {'@': 196}), 59: (1, {'@': 196}), 37: (1, {'@': 196}), 61: (1, {'@': 196}), 63: (1, {'@': 196}), 34: (1, {'@': 196}), 55: (1, {'@': 196}), 60: (1, {'@': 196}), 64: (1, {'@': 196}), 65: (1, {'@': 196}), 56: (1, {'@': 196}), 58: (1, {'@': 196}), 39: (1, {'@': 196}), 40: (1, {'@': 196}), 43: (1, {'@': 196}), 41: (1, {'@': 196}), 44: (1, {'@': 196}), 46: (1, {'@': 196}), 47: (1, {'@': 196}), 49: (1, {'@': 196}), 51: (1, {'@': 196}), 52: (1, {'@': 196}), 53: (1, {'@': 196}), 54: (1, {'@': 196}), 33: (1, {'@': 196})}, 545: {0: (0, 471), 102: (0, 484), 69: (0, 489), 81: (0, 492), 45: (0, 150), 42: (1, {'@': 202}), 57: (1, {'@': 202}), 62: (1, {'@': 202}), 48: (1, {'@': 202}), 50: (1, {'@': 202}), 59: (1, {'@': 202}), 37: (1, {'@': 202}), 61: (1, {'@': 202}), 63: (1, {'@': 202}), 34: (1, {'@': 202}), 55: (1, {'@': 202}), 60: (1, {'@': 202}), 64: (1, {'@': 202}), 65: (1, {'@': 202}), 56: (1, {'@': 202}), 58: (1, {'@': 202}), 39: (1, {'@': 202}), 40: (1, {'@': 202}), 43: (1, {'@': 202}), 41: (1, {'@': 202}), 44: (1, {'@': 202}), 46: (1, {'@': 202}), 47: (1, {'@': 202}), 49: (1, {'@': 202}), 51: (1, {'@': 202}), 52: (1, {'@': 202}), 53: (1, {'@': 202}), 54: (1, {'@': 202}), 33: (1, {'@': 202})}, 546: {61: (0, 391)}, 547: {59: (1, {'@': 311}), 57: (1, {'@': 311}), 60: (1, {'@': 311}), 61: (1, {'@': 311}), 37: (1, {'@': 311}), 56: (1, {'@': 311}), 0: (1, {'@': 311}), 8: (1, {'@': 311}), 9: (1, {'@': 311}), 12: (1, {'@': 311}), 30: (1, {'@': 311}), 11: (1, {'@': 311}), 31: (1, {'@': 311}), 33: (1, {'@': 311}), 14: (1, {'@': 311}), 79: (1, {'@': 311}), 64: (1, {'@': 311}), 58: (1, {'@': 311}), 34: (1, {'@': 311}), 65: (1, {'@': 311}), 48: (1, {'@': 311}), 80: (1, {'@': 311})}, 548: {79: (0, 283)}}, 'start_states': {'eval': 16, 'module': 11}, 'end_states': {'eval': 66, 'module': 234}}, 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['eval', 'module'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['eval', 'module'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'STRING_LIT', 'pattern': {'value': '"(?:(?:(?:(?:(?:(?!\\${)([^"\\\\]|\\\\.))+)+|\\${ *(?:"(?:[^"\\\\]|\\\\.)*"|[^}"]+)+ *})|\\$\\{))*"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'DECIMAL', 'pattern': {'value': '[0-9]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'EXP_MARK', 'pattern': {'value': '(?:e|E)(?:(?:\\+|\\-))?', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': '__IGNORE_0', 'pattern': {'value': '[ \t]+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': '__IGNORE_1', 'pattern': {'value': '\\/\\*(.|\n)*?(\\*\\/)', 'flags': [], '_width': [4, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': '__ANON_0', 'pattern': {'value': '\n', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': '__ANON_1', 'pattern': {'value': '#.*\n', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': '__ANON_2', 'pattern': {'value': '\\/\\/.*\n', 'flags': [], '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': '__ANON_3', 'pattern': {'value': '[a-zA-Z_][a-zA-Z0-9_-]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'QMARK', 'pattern': {'value': '?', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'BANG', 'pattern': {'value': '!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': '__ANON_4', 'pattern': {'value': '||', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': '__ANON_5', 'pattern': {'value': '&&', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': '__ANON_6', 'pattern': {'value': '>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': '__ANON_7', 'pattern': {'value': '<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': '__ANON_8', 'pattern': {'value': '==', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_9', 'pattern': {'value': '!=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': '__ANON_10', 'pattern': {'value': '<<(?P<heredoc>[a-zA-Z][a-zA-Z0-9._-]+)\n(?:.|\n)+?\n+\\s*(?P=heredoc)', 'flags': [], '_width': [9, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': '__ANON_11', 'pattern': {'value': '<<-(?P<heredoc_trim>[a-zA-Z][a-zA-Z0-9._-]+)\n(?:.|\n)+?\n+\\s*(?P=heredoc_trim)', 'flags': [], '_width': [10, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': '__ANON_12', 'pattern': {'value': '...', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': '__ANON_13', 'pattern': {'value': '.*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': '__ANON_14', 'pattern': {'value': '=>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'origin': {'name': 'module', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'body', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 43: {'origin': {'name': 'module', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'body', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 44: {'origin': {'name': 'module', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'body', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 45: {'origin': {'name': 'module', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'body', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 46: {'origin': {'name': 'eval', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 47: {'origin': {'name': 'body', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__body_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 48: {'origin': {'name': 'body', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 49: {'origin': {'name': 'attribute', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 50: {'origin': {'name': 'attribute', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 51: {'origin': {'name': 'block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': '__block_star_1', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 52: {'origin': {'name': 'block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': '__block_star_1', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 53: {'origin': {'name': 'block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 54: {'origin': {'name': 'block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 55: {'origin': {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 56: {'origin': {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 57: {'origin': {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 58: {'origin': {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 59: {'origin': {'name': 'identifier', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_3', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 60: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'conditional', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 61: {'origin': {'name': 'conditional', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'operation', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 62: {'origin': {'name': 'conditional', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operation', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 63: {'origin': {'name': 'conditional', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'operation', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 64: {'origin': {'name': 'conditional', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operation', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 65: {'origin': {'name': 'conditional', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'operation', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 66: {'origin': {'name': 'conditional', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operation', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 67: {'origin': {'name': 'conditional', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'operation', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 68: {'origin': {'name': 'conditional', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operation', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operation', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 69: {'origin': {'name': 'conditional', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': 'operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'unary_op', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': 'operation', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_or_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': 'unary_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr_term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': 'unary_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr_term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'binary_or_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_and_op', '__type__': 'NonTerminal'}, {'name': '__binary_or_op_star_3', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'binary_or_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_and_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'binary_and_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_eq_op', '__type__': 'NonTerminal'}, {'name': '__binary_and_op_star_4', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'binary_and_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_eq_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'binary_eq_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_test_op', '__type__': 'NonTerminal'}, {'name': '__binary_eq_op_star_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'binary_eq_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_test_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'binary_test_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_term_op', '__type__': 'NonTerminal'}, {'name': '__binary_test_op_star_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'binary_test_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_term_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'binary_term_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_factor_op', '__type__': 'NonTerminal'}, {'name': '__binary_term_op_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'binary_term_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_factor_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'binary_factor_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}, {'name': '__binary_factor_op_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'binary_factor_op', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'binary_or_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_4', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'binary_and_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'binary_term_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'binary_term_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'binary_factor_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'binary_factor_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'binary_factor_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'binary_test_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'binary_test_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MORETHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'binary_test_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'binary_test_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LESSTHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'binary_eq_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'binary_eq_operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_lit', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int_lit', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'quoted_template_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'tuple', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'object', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_call', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'index_expr_term', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'get_attr_expr_term', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'heredoc_template', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'heredoc_template_trim', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'attr_splat_expr_term', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'full_splat_expr_term', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_tuple_expr', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_object_expr', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'string_lit', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING_LIT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'quoted_template_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING_LIT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'int_lit', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'float_lit', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}, {'name': 'EXP_MARK', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'float_lit', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'float_lit', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}, {'name': 'EXP_MARK', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 26, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 27, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 28, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'tuple', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 29, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': '__object_star_11', '__type__': 'NonTerminal'}, {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': '__object_star_11', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': '__object_star_11', '__type__': 'NonTerminal'}, {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': '__object_star_11', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'object', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'object_elem', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': 'object_elem', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': 'object_elem', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'object_elem', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': 'heredoc_template', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'heredoc_template_trim', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': 'function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_10', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'arguments', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': 'index_expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}, {'name': 'index', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': 'get_attr_expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}, {'name': 'get_attr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'attr_splat_expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}, {'name': 'attr_splat', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'full_splat_expr_term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}, {'name': 'full_splat', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'index', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'index', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'index', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'index', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': 'index', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'int_lit', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'get_attr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'attr_splat', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__attr_splat_star_12', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'attr_splat', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': 'full_splat', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__full_splat_star_13', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'full_splat', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 26, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'for_tuple_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 27, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 26, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': 'for_object_expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 27, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 26, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 27, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 28, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 29, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 30, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 31, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 32, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 33, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 34, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 35, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 36, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 37, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 38, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': 'for_intro', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 39, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': 'for_cond', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': 'for_cond', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': '__body_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'attribute', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': '__body_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': '__body_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__body_star_0', '__type__': 'NonTerminal'}, {'name': 'attribute', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': '__body_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__body_star_0', '__type__': 'NonTerminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': '__block_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': '__block_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string_lit', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': '__block_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__block_star_1', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': '__block_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__block_star_1', '__type__': 'NonTerminal'}, {'name': 'string_lit', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_2', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, {'name': '__ANON_1', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, {'name': '__ANON_2', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': '__binary_or_op_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_or_operator', '__type__': 'NonTerminal'}, {'name': 'binary_and_op', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': '__binary_or_op_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__binary_or_op_star_3', '__type__': 'NonTerminal'}, {'name': 'binary_or_operator', '__type__': 'NonTerminal'}, {'name': 'binary_and_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': '__binary_and_op_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_and_operator', '__type__': 'NonTerminal'}, {'name': 'binary_eq_op', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': '__binary_and_op_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__binary_and_op_star_4', '__type__': 'NonTerminal'}, {'name': 'binary_and_operator', '__type__': 'NonTerminal'}, {'name': 'binary_eq_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': '__binary_eq_op_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_eq_operator', '__type__': 'NonTerminal'}, {'name': 'binary_test_op', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': '__binary_eq_op_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__binary_eq_op_star_5', '__type__': 'NonTerminal'}, {'name': 'binary_eq_operator', '__type__': 'NonTerminal'}, {'name': 'binary_test_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': '__binary_test_op_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_test_operator', '__type__': 'NonTerminal'}, {'name': 'binary_term_op', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': '__binary_test_op_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__binary_test_op_star_6', '__type__': 'NonTerminal'}, {'name': 'binary_test_operator', '__type__': 'NonTerminal'}, {'name': 'binary_term_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': '__binary_term_op_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_term_operator', '__type__': 'NonTerminal'}, {'name': 'binary_factor_op', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': '__binary_term_op_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__binary_term_op_star_7', '__type__': 'NonTerminal'}, {'name': 'binary_term_operator', '__type__': 'NonTerminal'}, {'name': 'binary_factor_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': '__binary_factor_op_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_factor_operator', '__type__': 'NonTerminal'}, {'name': 'expr_term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': '__binary_factor_op_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__binary_factor_op_star_8', '__type__': 'NonTerminal'}, {'name': 'binary_factor_operator', '__type__': 'NonTerminal'}, {'name': 'expr_term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DECIMAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__int_lit_plus_9', '__type__': 'NonTerminal'}, {'name': 'DECIMAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': '__tuple_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__tuple_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': '__object_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': '__object_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__object_star_11', '__type__': 'NonTerminal'}, {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': '__attr_splat_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'get_attr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': '__attr_splat_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__attr_splat_star_12', '__type__': 'NonTerminal'}, {'name': 'get_attr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 341: {'origin': {'name': '__full_splat_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'get_attr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': '__full_splat_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'index', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': '__full_splat_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__full_splat_star_13', '__type__': 'NonTerminal'}, {'name': 'get_attr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': '__full_splat_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__full_splat_star_13', '__type__': 'NonTerminal'}, {'name': 'index', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
