(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{369:function(t,a,s){"use strict";s.r(a);var e=s(44),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"concepts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concepts"}},[t._v("#")]),t._v(" Concepts")]),t._v(" "),s("h2",{attrs:{id:"flow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flow"}},[t._v("#")]),t._v(" Flow")]),t._v(" "),s("h3",{attrs:{id:"what-is-flow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-flow"}},[t._v("#")]),t._v(" What is Flow?")]),t._v(" "),s("p",[t._v("A flow is a network of tasks that can run concurrently or in order.")]),t._v(" "),s("h3",{attrs:{id:"what-does-flow-look-like"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-does-flow-look-like"}},[t._v("#")]),t._v(" What does Flow Look Like?")]),t._v(" "),s("p",[t._v("In Runflow, the flow is written in "),s("a",{attrs:{href:"https://github.com/hashicorp/hcl",target:"_blank",rel:"noopener noreferrer"}},[t._v("HCL2"),s("OutboundLink")],1),t._v(" syntax and follows the "),s("RouterLink",{attrs:{to:"/flow-spec.html"}},[t._v("Flow Spec")]),t._v(".")],1),t._v(" "),s("p",[t._v("Here is a basic example Flow:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/complex_flow_dependency_visualize.svg",alt:"complex_flow_dependency_visualize"}})]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("Click me to view the flow definition")]),t._v(" "),s("div",{staticClass:"language-hcl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hcl"}},[s("code",[t._v("flow "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"complex_flow_dependency"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("variable"),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v(' "echo_content" ')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("echo_content")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bash_run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo2"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bash_run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo3"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bash_run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo4"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bash_run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("echo2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo5"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bash_run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("echo3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo6"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo echo6"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("_depends_on")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      task.bash_run.echo4,\n      task.bash_run.echo5,\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo7"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo echo7"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("_depends_on")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      task.bash_run.echo1,\n      task.bash_run.echo6,\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("It defines 8 tasks. All of them are connected with arrowed lines, indicating the downstream task will be executed only after all of the upstream tasks are successful. For example,")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("task.bash_run.echo1")]),t._v(" will be executed only after "),s("code",[t._v("task.bash_run.echo")]),t._v(" is successful.")]),t._v(" "),s("li",[s("code",[t._v("task.bash_run.echo7")]),t._v(" won't be executed if "),s("code",[t._v("task.bash_run.echo1")]),t._v(" is unsuccessful.")])]),t._v(" "),s("h3",{attrs:{id:"what-is-flow-for"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-flow-for"}},[t._v("#")]),t._v(" What is Flow for?")]),t._v(" "),s("p",[t._v("In Runflow, task and flow are two separate of concerns.\nThe flow does not care how the tasks are actually executed.")]),t._v(" "),s("p",[t._v("Instead, it manages")]),t._v(" "),s("ul",[s("li",[t._v("The import of tasks and functions from Python interpreter.")]),t._v(" "),s("li",[t._v("The order of task executions, e.g, which task gets executed first, and which task gets executed afterward.")]),t._v(" "),s("li",[t._v("The control flow of task executions, e.g, whether to execute a task based on previous task executions.")]),t._v(" "),s("li",[t._v("Retry the task executions if they fails.")]),t._v(" "),s("li",[t._v("Abort the task executions if they timeout.")]),t._v(" "),s("li",[t._v("Some flow-specific metadata, such as documentation, authorship, license, etc.")])]),t._v(" "),s("h2",{attrs:{id:"task"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#task"}},[t._v("#")]),t._v(" Task")]),t._v(" "),s("h3",{attrs:{id:"what-is-task"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-task"}},[t._v("#")]),t._v(" What is Task?")]),t._v(" "),s("p",[t._v("A task is the minimal execution unit and has to be defined within the flow.\nEach task in the flow is standalone and shouldn't interfere with each other if implemented properly.")]),t._v(" "),s("h3",{attrs:{id:"what-does-task-look-like"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-does-task-look-like"}},[t._v("#")]),t._v(" What does Task Look Like?")]),t._v(" "),s("p",[t._v("In the flow spec, each task has a type, a name, and a body declaring all arguments. The task type is always associated with a Python class having "),s("code",[t._v(".run()")]),t._v(" method. When the task is executed using Runflow CLI, such a Task is instantiated with arguments declared in the body. You can easily register your own Task implementations by importing it in the flow definition.")]),t._v(" "),s("p",[t._v("For example,")]),t._v(" "),s("div",{staticClass:"language-hcl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hcl"}},[s("code",[t._v("task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("echo_content")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"what-is-task-for"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-task-for"}},[t._v("#")]),t._v(" What is Task for?")]),t._v(" "),s("p",[t._v("In general, each task is performing a logical step in your flow. It is recommended to keep a task as minimal as possible.")]),t._v(" "),s("p",[t._v("Just name a few:")]),t._v(" "),s("ul",[s("li",[t._v("Read/write a file.")]),t._v(" "),s("li",[t._v("Run a SQL statement.")]),t._v(" "),s("li",[t._v("Run a bash command/script.")]),t._v(" "),s("li",[t._v("Send an HTTP/RPC request.")]),t._v(" "),s("li",[t._v("Transform DataFrame.")]),t._v(" "),s("li",[t._v("Fetch a RSS Feed.")]),t._v(" "),s("li",[t._v("Tweet.")]),t._v(" "),s("li",[t._v("Publish a Jira comment.")]),t._v(" "),s("li",[t._v("Send a Slack message.")]),t._v(" "),s("li",[t._v("Persist "),s("code",[t._v("GradientBoostingRegressor()")]),t._v(" model to disk in pickle form.")]),t._v(" "),s("li",[t._v("... (my fingers are not enough to count now)")])]),t._v(" "),s("h2",{attrs:{id:"task-dependency"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#task-dependency"}},[t._v("#")]),t._v(" Task Dependency")]),t._v(" "),s("h3",{attrs:{id:"what-is-task-dependency"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-task-dependency"}},[t._v("#")]),t._v(" What is Task Dependency?")]),t._v(" "),s("p",[t._v("A task can have upstream and downstream dependencies. Usually, you don't need to explicitly declare which task depends on the other - Runflow does that for you as long as the task definition has argument/attribute references from the other tasks. This is done by using HCL2 string interpolation.")]),t._v(" "),s("h3",{attrs:{id:"what-does-task-dependency-look-like"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-does-task-dependency-look-like"}},[t._v("#")]),t._v(" What does Task Dependency Look Like?")]),t._v(" "),s("p",[t._v("In this example, "),s("code",[t._v("task.bash_run.echo1")]),t._v(" depends on "),s("code",[t._v("task.bash_run.echo")]),t._v(" because it has an attribute reference "),s("code",[t._v("stdout")]),t._v(" from "),s("code",[t._v("task.bash_run.echo")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-hcl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hcl"}},[s("code",[t._v("task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bash_run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"what-is-task-dependency-for"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-task-dependency-for"}},[t._v("#")]),t._v(" What is Task Dependency For?")]),t._v(" "),s("p",[t._v("The task dependency determines the execution order of a flow.\nUpstream tasks always get executed first.\nDownstream tasks always get executed afterward.\nDownstream tasks will be canceled if any execution of the upstream tasks is unsuccessful.")]),t._v(" "),s("h2",{attrs:{id:"variable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variable"}},[t._v("#")]),t._v(" Variable")]),t._v(" "),s("h3",{attrs:{id:"what-is-variable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-variable"}},[t._v("#")]),t._v(" What is Variable?")]),t._v(" "),s("p",[t._v("A variable is a key-value pair. At runtime, Runflow maintains an environment storing variables and enables variable referencing in later task definitions.")]),t._v(" "),s("h3",{attrs:{id:"what-does-variable-look-like"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-does-variable-look-like"}},[t._v("#")]),t._v(" What does Variable Look Like?")]),t._v(" "),s("p",[t._v("In this example,")]),t._v(" "),s("ul",[s("li",[t._v("Block "),s("code",[t._v('variable "greeter" {}')]),t._v(" declares a variable named "),s("code",[t._v("greeter")]),t._v(" and must not be None.")]),t._v(" "),s("li",[t._v("Block "),s("code",[t._v('task "bash_run" "echo" {}')]),t._v(" has a variable reference "),s("code",[t._v("${var.greeter}")]),t._v(", which interpolates the command string dynamically at runtime.")])]),t._v(" "),s("div",{staticClass:"language-hcl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hcl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: hello_vars.hcl")]),t._v("\nflow "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello_vars"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("variable"),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v(' "greeter" ')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("required")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"echo 'hello "),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("greeter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("'\"")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("You can overwrite it using Runflow CLI "),s("code",[t._v("--var greeter=WORLD")]),t._v(", "),s("code",[t._v("--var-file /path/to/vars.hcl")]),t._v(" or environment variable "),s("code",[t._v("RUNFLOW_VAR_greeter=WORLD")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"what-is-variable-for"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-variable-for"}},[t._v("#")]),t._v(" What is Variable For?")]),t._v(" "),s("p",[t._v("If we say a flow is a callable function, then the variables are conceptually function parameters.")]),t._v(" "),s("h2",{attrs:{id:"runflow-cli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runflow-cli"}},[t._v("#")]),t._v(" Runflow CLI")]),t._v(" "),s("h3",{attrs:{id:"what-is-runflow-cli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-runflow-cli"}},[t._v("#")]),t._v(" What is Runflow CLI?")]),t._v(" "),s("p",[t._v("Runflow provides a command-line interface for running and inspecting flows.")]),t._v(" "),s("h3",{attrs:{id:"what-does-runflow-cli-look-like"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-does-runflow-cli-look-like"}},[t._v("#")]),t._v(" What does Runflow CLI Look Like?")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("runflow run")]),t._v(" can collect variables from options and environment variables, and then execute all tasks in the right order. When the flow is complete, the program exits.")]),t._v(" "),s("li",[s("code",[t._v("runflow visualize")]),t._v(" can draw the tasks and task dependency as a diagram. The output format can be SVG, PNG, DOT, etc. It's useful for understanding the relationship between tasks.")])])])}),[],!1,null,null,null);a.default=n.exports}}]);