(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{379:function(t,e,s){"use strict";s.r(e);var n=s(44),o=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"docker-run"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-run"}},[t._v("#")]),t._v(" Docker Run")]),t._v(" "),s("p",[t._v("Run a Docker container.")]),t._v(" "),s("p",[t._v("This feature requires "),s("code",[t._v("runflow[docker]")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ pip install runflow[docker]\n")])])]),s("p",[t._v("Added in v0.3.0.")]),t._v(" "),s("h2",{attrs:{id:"example-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-usage"}},[t._v("#")]),t._v(" Example Usage")]),t._v(" "),s("ul",[s("li",[t._v('Set task type to "docker_run".')]),t._v(" "),s("li",[t._v("Set docker image.")]),t._v(" "),s("li",[t._v("Set the command.")])]),t._v(" "),s("div",{staticClass:"language-hcl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hcl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: docker-hello-world.hcl")]),t._v("\nflow "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-hello-world"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("variable"),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v(' "out" ')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("image")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ubuntu:latest"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo hello world"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file_write"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello-world"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("filename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" var.out\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" task.docker_run.echo.stdout\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Run:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$ runflow run docker-hello-world.hcl --var out=/tmp/out.txt\n[2021-06-12 15:14:01,654] Task "echo" is started.\n[2021-06-12 15:14:02,158] Task "echo" is successful.\n[2021-06-12 15:14:02,160] Task "save" is started.\n[2021-06-12 15:14:02,234] Task "save" is successful.\n\n$ cat /tmp/out.txt\nhello world\n')])])]),s("h2",{attrs:{id:"set-environment-variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-environment-variables"}},[t._v("#")]),t._v(" Set Environment Variables")]),t._v(" "),s("ul",[s("li",[t._v("Set argument "),s("code",[t._v("environment")]),t._v(" to key-value pairs.")])]),t._v(" "),s("div",{staticClass:"language-hcl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hcl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: docker-env.hcl")]),t._v("\nflow "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-env"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("variable"),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v(' "out" ')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("image")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ubuntu:latest"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"env"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("environment")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"greeter"')]),t._v(": "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file_write"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("filename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" var.out\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" task.docker_run.this.stdout\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Run:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$ runflow run docker-env.hcl --var out=/tmp/out.txt\n[2021-06-12 15:24:08,870] Task "echo" is started.\n[2021-06-12 15:24:09,399] Task "echo" is successful.\n[2021-06-12 15:24:09,401] Task "save" is started.\n[2021-06-12 15:24:09,415] Task "save" is successful.\n\n$ cat /tmp/out.txt\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=9389736c56f1\ngreeter=world\nHOME=/root\n')])])]),s("h2",{attrs:{id:"set-entrypoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-entrypoint"}},[t._v("#")]),t._v(" Set Entrypoint")]),t._v(" "),s("ul",[s("li",[t._v("Set argument "),s("code",[t._v("entrypoint")]),t._v(" to a list of strings.")])]),t._v(" "),s("div",{staticClass:"language-hcl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hcl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: docker-entrypoint.hcl")]),t._v("\nflow "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-entrypoint"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("variable"),s("span",{pre:!0,attrs:{class:"token type variable"}},[t._v(' "out" ')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("image")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ubuntu:latest"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("entrypoint")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/echo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"runflow is awesome"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file_write"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("filename")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" var.out\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" task.docker_run.this.stdout\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Run:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$ runflow run docker-entrypoint.hcl --var out=/tmp/out.txt\n[2021-06-12 15:37:25,390] Task "setup" is started.\n[2021-06-12 15:37:25,903] Task "setup" is successful.\n[2021-06-12 15:37:25,906] Task "save" is started.\n[2021-06-12 15:37:25,921] Task "save" is successful.\n\n$ cat /tmp/out.txt\nrunflow is awesome\n')])])]),s("h2",{attrs:{id:"failed-execution"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#failed-execution"}},[t._v("#")]),t._v(" Failed Execution")]),t._v(" "),s("p",[t._v("When the docker container exits with non-zero code, the task run is marked as failed.")]),t._v(" "),s("div",{staticClass:"language-hcl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hcl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: docker-failed-run.hcl")]),t._v("\nflow "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-failed-run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  task "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker_run"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"exit"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("image")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ubuntu:latest"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"/bin/bash -c 'exit 1'\"")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Run:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ runflow run examples/docker-failed-run.hcl\n[2021-06-12 15:41:02,979] Task \"exit\" is started.\n[2021-06-12 15:41:03,496] Task \"exit\" is failed.\nTraceback (most recent call last):\n... (truncated)\ndocker.errors.ContainerError: Command \"/bin/bash -c 'exit 1'\" in image 'ubuntu:latest' returned non-zero exit status 1: b''\n")])])]),s("p",[t._v("If you want the task to keep running, please wrap up your script to recover the error.")]),t._v(" "),s("h2",{attrs:{id:"argument-reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#argument-reference"}},[t._v("#")]),t._v(" Argument Reference")]),t._v(" "),s("p",[t._v("The following arguments are supported:")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("image")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – The image to run.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("command")]),t._v(" ("),s("em",[t._v("str or list")]),t._v(") – The command to run in the container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("auto_remove")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – enable auto-removal of the container on daemon side when the container’s process exits.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("blkio_weight_device")]),t._v(" – Block IO weight (relative device weight) in the form of: "),s("code",[t._v('[{"Path": "device_path", "Weight": weight}]')]),t._v(".")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("blkio_weight")]),t._v(" – Block IO weight (relative weight), accepts a weight value between 10 and 1000.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cap_add")]),t._v(" ("),s("em",[t._v("list of str")]),t._v(") – Add kernel capabilities. For example, "),s("code",[t._v('["SYS_ADMIN", "MKNOD"]')]),t._v(".")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cap_drop")]),t._v(" ("),s("em",[t._v("list of str")]),t._v(") – Drop kernel capabilities.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cgroup_parent")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Override the default parent cgroup.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cpu_count")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – Number of usable CPUs (Windows only).")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cpu_percent")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – Usable percentage of the available CPUs (Windows only).")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cpu_period")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – The length of a CPU period in microseconds.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cpu_quota")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – Microseconds of CPU time that the container can get in a CPU period.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cpu_rt_period")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – Limit CPU real-time period in microseconds.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cpu_rt_runtime")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – Limit CPU real-time runtime in microseconds.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cpu_shares")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – CPU shares (relative weight).")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cpuset_cpus")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – CPUs in which to allow execution ("),s("code",[t._v("0-3")]),t._v(", "),s("code",[t._v("0,1")]),t._v(").")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("cpuset_mems")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Memory nodes (MEMs) in which to allow execution ("),s("code",[t._v("0-3")]),t._v(", "),s("code",[t._v("0,1")]),t._v("). Only effective on NUMA systems.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("detach")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Run container in the background and return a "),s("a",{attrs:{href:"#docker.models.containers.Container",title:"docker.models.containers.Container"}},[s("code",[t._v("Container")])]),t._v(" object.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("device_cgroup_rules")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") – A list of cgroup rules to apply to the container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("device_read_bps")]),t._v(" – Limit read rate (bytes per second) from a device in the form of: [{“Path”: “device_path”, “Rate”: rate}]")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("device_read_iops")]),t._v(" – Limit read rate (IO per second) from a device.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("device_write_bps")]),t._v(" – Limit write rate (bytes per second) from a device.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("device_write_iops")]),t._v(" – Limit write rate (IO per second) from a device.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("devices")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") –")]),t._v(" "),s("p",[t._v("Expose host devices to the container, as a list of strings in the form "),s("code",[t._v("<path_on_host>:<path_in_container>:<cgroup_permissions>")]),t._v(".")]),t._v(" "),s("p",[t._v("For example, "),s("code",[t._v("/dev/sda:/dev/xvda:rwm")]),t._v(" allows the container to have read-write access to the host’s "),s("code",[t._v("/dev/sda")]),t._v(" via a node named "),s("code",[t._v("/dev/xvda")]),t._v(" inside the container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("device_requests")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") – Expose host resources such as GPUs to the container, as a list of "),s("code",[t._v("docker.types.DeviceRequest")]),t._v(" instances.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("dns")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") – Set custom DNS servers.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("dns_opt")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") – Additional options to be added to the container’s "),s("code",[t._v("resolv.conf")]),t._v(" file.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("dns_search")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") – DNS search domains.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("domainname")]),t._v(" ("),s("em",[t._v("str or list")]),t._v(") – Set custom DNS search domains.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("entrypoint")]),t._v(" ("),s("em",[t._v("str or list")]),t._v(") – The entrypoint for the container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("environment")]),t._v(" ("),s("em",[t._v("map or list")]),t._v(") – Environment variables to set inside the container, as a map or a list of strings in the format "),s("code",[t._v('["SOMEVARIABLE=xxx"]')]),t._v(".")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("extra_hosts")]),t._v(" ("),s("em",[t._v("map")]),t._v(") – Additional hostnames to resolve inside the container, as a mapping of hostname to IP address.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("group_add")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") – List of additional group names and/or IDs that the container process will run as.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("healthcheck")]),t._v(" ("),s("em",[t._v("map")]),t._v(") – Specify a test to perform to check that the container is healthy.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("hostname")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Optional hostname for the container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("init")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Run an init inside the container that forwards signals and reaps processes")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("init_path")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Path to the docker-init binary")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ipc_mode")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Set the IPC mode for the container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("isolation")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Isolation technology to use. Default: None.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("kernel_memory")]),t._v(" ("),s("em",[t._v("int or str")]),t._v(") – Kernel memory limit")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("labels")]),t._v(" ("),s("em",[t._v("map or list")]),t._v(") – A map of name-value labels (e.g. "),s("code",[t._v('{"label1": "value1", "label2": "value2"}')]),t._v(") or a list of names of labels to set with empty values (e.g. "),s("code",[t._v('["label1", "label2"]')]),t._v(")")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("links")]),t._v(" ("),s("em",[t._v("map")]),t._v(") – Mapping of links using the "),s("code",[t._v('{"container": "alias"}')]),t._v(" format. The alias is optional. Containers declared in this map will be linked to the new container using the provided alias. Default: "),s("code",[t._v("None")]),t._v(".")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("log_config")]),t._v(" ("),s("RouterLink",{attrs:{to:"/tasks/api.html#docker.types.LogConfig",title:"docker.types.LogConfig"}},[s("em",[t._v("LogConfig")])]),t._v(") – Logging configuration.")],1)]),t._v(" "),s("li",[s("p",[s("strong",[t._v("lxc_conf")]),t._v(" ("),s("em",[t._v("map")]),t._v(") – LXC config.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("mac_address")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – MAC address to assign to the container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("mem_limit")]),t._v(" ("),s("em",[t._v("int or str")]),t._v(") – Memory limit. Accepts float values (which represent the memory limit of the created container in bytes) or a string with a units identification char ("),s("code",[t._v("100000b")]),t._v(", "),s("code",[t._v("1000k")]),t._v(", "),s("code",[t._v("128m")]),t._v(", "),s("code",[t._v("1g")]),t._v("). If a string is specified without a units character, bytes are assumed as an intended unit.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("mem_reservation")]),t._v(" ("),s("em",[t._v("int or str")]),t._v(") – Memory soft limit.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("mem_swappiness")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – Tune a container’s memory swappiness behavior. Accepts number between 0 and 100.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("memswap_limit")]),t._v(" ("),s("em",[t._v("str or int")]),t._v(") – Maximum amount of memory + swap a container is allowed to consume.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("mounts")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") – Specification for mounts to be added to the container. More powerful alternative to "),s("code",[t._v("volumes")]),t._v(". Each item in the list is expected to be a "),s("RouterLink",{attrs:{to:"/tasks/api.html#docker.types.Mount",title:"docker.types.Mount"}},[s("code",[t._v("docker.types.Mount")])]),t._v(" object.")],1)]),t._v(" "),s("li",[s("p",[s("strong",[t._v("name")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – The name for this container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("nano_cpus")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – CPU quota in units of 1e-9 CPUs.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("network")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Name of the network this container will be connected to at creation time. You can connect to additional networks using "),s("code",[t._v("Network.connect()")]),t._v(". Incompatible with "),s("code",[t._v("network_mode")]),t._v(".")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("network_disabled")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Disable networking.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("network_mode")]),t._v(" ("),s("em",[t._v("str")]),t._v(") –")]),t._v(" "),s("p",[t._v("One of:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("bridge")]),t._v(" Create a new network stack for the container on on the bridge network.")]),t._v(" "),s("li",[s("code",[t._v("none")]),t._v(" No networking for this container.")]),t._v(" "),s("li",[s("code",[t._v("container:<name|id>")]),t._v(" Reuse another container’s network stack.")]),t._v(" "),s("li",[s("code",[t._v("host")]),t._v(" Use the host network stack. This mode is incompatible with "),s("code",[t._v("ports")]),t._v(".")])]),t._v(" "),s("p",[t._v("Incompatible with "),s("code",[t._v("network")]),t._v(".")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("oom_kill_disable")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Whether to disable OOM killer.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("oom_score_adj")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – An integer value containing the score given to the container in order to tune OOM killer preferences.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("pid_mode")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – If set to "),s("code",[t._v("host")]),t._v(", use the host PID namespace inside the container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("pids_limit")]),t._v(" ("),s("em",[t._v("int")]),t._v(") – Tune a container’s pids limit. Set "),s("code",[t._v("-1")]),t._v(" for unlimited.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("platform")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Platform in the format "),s("code",[t._v("os[/arch[/variant]]")]),t._v(". Only used if the method needs to pull the requested image.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ports")]),t._v(" ("),s("em",[t._v("map")]),t._v(") –")]),t._v(" "),s("p",[t._v("Ports to bind inside the container.")]),t._v(" "),s("p",[t._v("The keys of the map are the ports to bind inside the container, either as an integer or a string in the form "),s("code",[t._v("port/protocol")]),t._v(", where the protocol is either "),s("code",[t._v("tcp")]),t._v(", "),s("code",[t._v("udp")]),t._v(", or "),s("code",[t._v("sctp")]),t._v(".")]),t._v(" "),s("p",[t._v("The values of the map are the corresponding ports to open on the host, which can be either:")]),t._v(" "),s("ul",[s("li",[t._v("The port number, as an integer. For example, "),s("code",[t._v('{"2222/tcp": 3333}')]),t._v(" will expose port 2222 inside the container as port 3333 on the host.")]),t._v(" "),s("li",[s("code",[t._v("None")]),t._v(", to assign a random host port. For example, "),s("code",[t._v('{"2222/tcp": None}')]),t._v(".")]),t._v(" "),s("li",[t._v("A tuple of "),s("code",[t._v("(address, port)")]),t._v(" if you want to specify the host interface. For example, "),s("code",[t._v('{"1111/tcp": ("127.0.0.1", 1111)}')]),t._v(".")]),t._v(" "),s("li",[t._v("A list of integers, if you want to bind multiple host ports to a single container port. For example, "),s("code",[t._v('{"1111/tcp": [1234, 4567]}')]),t._v(".")])]),t._v(" "),s("p",[t._v("Incompatible with "),s("code",[t._v("host")]),t._v(" network mode.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("privileged")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Give extended privileges to this container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("publish_all_ports")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Publish all ports to the host.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("read_only")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Mount the container’s root filesystem as read only.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("remove")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Remove the container when it has finished running. Default: "),s("code",[t._v("False")]),t._v(".")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("restart_policy")]),t._v(" ("),s("em",[t._v("map")]),t._v(") –")]),t._v(" "),s("p",[t._v("Restart the container when it exits. Configured as a map with keys:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Name")]),t._v(" One of "),s("code",[t._v("on-failure")]),t._v(", or "),s("code",[t._v("always")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("MaximumRetryCount")]),t._v(" Number of times to restart the container on failure.")])]),t._v(" "),s("p",[t._v("For example: "),s("code",[t._v('{"Name": "on-failure", "MaximumRetryCount": 5}')])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("runtime")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Runtime to use with this container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("security_opt")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") – A list of string values to customize labels for MLS systems, such as SELinux.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("shm_size")]),t._v(" ("),s("em",[t._v("str or int")]),t._v(") – Size of /dev/shm (e.g. "),s("code",[t._v("1G")]),t._v(").")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("stdin_open")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Keep "),s("code",[t._v("STDIN")]),t._v(" open even if not attached.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("stdout")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Return logs from "),s("code",[t._v("STDOUT")]),t._v(" when "),s("code",[t._v("detach=False")]),t._v(". Default: "),s("code",[t._v("True")]),t._v(".")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("stderr")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Return logs from "),s("code",[t._v("STDERR")]),t._v(" when "),s("code",[t._v("detach=False")]),t._v(". Default: "),s("code",[t._v("False")]),t._v(".")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("stop_signal")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – The stop signal to use to stop the container (e.g. "),s("code",[t._v("SIGINT")]),t._v(").")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("storage_opt")]),t._v(" ("),s("em",[t._v("map")]),t._v(") – Storage driver options per container as a key-value mapping.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("stream")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – If true and "),s("code",[t._v("detach")]),t._v(" is false, return a log generator instead of a string. Ignored if "),s("code",[t._v("detach")]),t._v(" is true. Default: "),s("code",[t._v("False")]),t._v(".")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("sysctls")]),t._v(" ("),s("em",[t._v("map")]),t._v(") – Kernel parameters to set in the container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("tmpfs")]),t._v(" ("),s("em",[t._v("map")]),t._v(") –")]),t._v(" "),s("p",[t._v("Temporary filesystems to mount, as a map mapping a path inside the container to options for that path.")]),t._v(" "),s("p",[t._v("For example:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v('{\n    "/mnt/vol2": "",\n    "/mnt/vol1": "size=3G,uid=1000"\n}\n')])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("tty")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – Allocate a pseudo-TTY.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ulimits")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") – Ulimits to set inside the container, as a list of "),s("RouterLink",{attrs:{to:"/tasks/api.html#docker.types.Ulimit",title:"docker.types.Ulimit"}},[s("code",[t._v("docker.types.Ulimit")])]),t._v(" instances.")],1)]),t._v(" "),s("li",[s("p",[s("strong",[t._v("use_config_proxy")]),t._v(" ("),s("em",[t._v("bool")]),t._v(") – If "),s("code",[t._v("True")]),t._v(", and if the docker client configuration file ("),s("code",[t._v("~/.docker/config.json")]),t._v(" by default) contains a proxy configuration, the corresponding environment variables will be set in the container being built.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("user")]),t._v(" ("),s("em",[t._v("str or int")]),t._v(") – Username or UID to run commands as inside the container.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("userns_mode")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Sets the user namespace mode for the container when user namespace remapping option is enabled. Supported values are: "),s("code",[t._v("host")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("uts_mode")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Sets the UTS namespace mode for the container. Supported values are: "),s("code",[t._v("host")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("version")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – The version of the API to use. Set to "),s("code",[t._v("auto")]),t._v(" to automatically detect the server’s version. Default: "),s("code",[t._v("1.35")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("volume_driver")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – The name of a volume driver/plugin.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("volumes")]),t._v(" ("),s("em",[t._v("map or list")]),t._v(") –")]),t._v(" "),s("p",[t._v("A map to configure volumes mounted inside the container. The key is either the host path or a volume name, and the value is a map with the keys:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("bind")]),t._v(" The path to mount the volume inside the container")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" Either "),s("code",[t._v("rw")]),t._v(" to mount the volume read/write, or "),s("code",[t._v("ro")]),t._v(" to mount it read-only.")])]),t._v(" "),s("p",[t._v("For example:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v(' {"/home/user1/": {"bind": "/mnt/vol2", "mode": "rw"},\n "/var/www": {"bind": "/mnt/vol1", "mode": "ro"}}\n')])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("volumes_from")]),t._v(" ("),s("a",{attrs:{href:"#docker.models.containers.ContainerCollection.list",title:"docker.models.containers.ContainerCollection.list"}},[s("code",[t._v("list")])]),t._v(") – List of container names or IDs to get volumes from.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("working_dir")]),t._v(" ("),s("em",[t._v("str")]),t._v(") – Path to the working directory.")])])]),t._v(" "),s("h2",{attrs:{id:"attributes-reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#attributes-reference"}},[t._v("#")]),t._v(" Attributes Reference")]),t._v(" "),s("p",[t._v("The following attributes are supported:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("stdout")]),t._v(" - String. The output of command run.")])])])}),[],!1,null,null,null);e.default=o.exports}}]);