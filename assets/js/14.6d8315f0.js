(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{372:function(t,e,a){"use strict";a.r(e);var s=a(44),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"flow-specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flow-specification"}},[t._v("#")]),t._v(" Flow Specification")]),t._v(" "),a("p",[t._v("The Runflow specification, or Runflow spec, defines the schema for\nworkflows.  The Runflow spec is parsed and executed by Runflow\ncommand-line interface.")]),t._v(" "),a("p",[t._v('Each Runflow spec file has the extension ".hcl" and should has only a\nsingle flow.')]),t._v(" "),a("h2",{attrs:{id:"hcl2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hcl2"}},[t._v("#")]),t._v(" HCL2")]),t._v(" "),a("p",[t._v("In Runflow, one can concisely chain up task executions without loosing\ncode readability.  Thanks for the\n"),a("a",{attrs:{href:"https://github.com/hashicorp/hcl",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hashicorp Configuration Language - HCL"),a("OutboundLink")],1),t._v("\nlanguage.")]),t._v(" "),a("p",[t._v("The full HCL2 syntax is defined\n"),a("a",{attrs:{href:"https://github.com/hashicorp/hcl/blob/main/hclsyntax/spec.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("All Runflow specs are valid HCL2 files, but not every HCL2 file is valid\nRunflow spec.  Based on the HCL2 syntax, we standardize the way how\nattributes and blocks are grouped together and make no change to the\nsemantic of HCL2.")]),t._v(" "),a("p",[t._v("// If you are curious what is HCL1 and why not HCL1, HCL1 is superseded\nby more advanced HCL2 and we will not support HCL1 at all.")]),t._v(" "),a("p",[t._v("A minimal Runflow spec looks like this:")]),t._v(" "),a("div",{staticClass:"language-hcl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hcl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: hello.hcl")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Define a flow naming as "hello".')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# There can only be only one flow declaration per flow file.")]),t._v("\nflow "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The task defines what should be done.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# In this example, we run a bash command `echo`.")]),t._v("\n  task "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"echo 'hello world'\"")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("The HCL2 syntax consists of only a few basic elements, merely a little\nmore than "),a("a",{attrs:{href:"http://json.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON"),a("OutboundLink")],1),t._v(". Here lists some:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Blocks")]),t._v(" groups attributes and the other blocks.\nIn this example, we have flow block and task block.")]),t._v(" "),a("li",[a("code",[t._v("Attributes")]),t._v(" associate a value with a name.\nIn this example, "),a("code",[t._v("command")]),t._v(" is an attribute.")]),t._v(" "),a("li",[a("code",[t._v("Expressions")]),t._v(" represent a value, either a constant or referencing\nother values.\nIn this example, "),a("code",[t._v("\"echo 'hello world'\"")]),t._v(" is an expression of type string.")])]),t._v(" "),a("h2",{attrs:{id:"encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#encoding"}},[t._v("#")]),t._v(" Encoding")]),t._v(" "),a("p",[t._v("Runflow spec should be UTF-8 encoded.")]),t._v(" "),a("h2",{attrs:{id:"comments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[t._v("#")]),t._v(" Comments")]),t._v(" "),a("p",[t._v("Runlow spec supports two types of comments:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("#")]),t._v(" followed by any characters until the end of line.")]),t._v(" "),a("li",[a("code",[t._v("//")]),t._v(" followed by any characters until the end of line.")])]),t._v(" "),a("p",[t._v("We do prefer to use "),a("code",[t._v("#")]),t._v("-style comment at all cases for code consistency.")]),t._v(" "),a("h2",{attrs:{id:"identifiers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identifiers"}},[t._v("#")]),t._v(" Identifiers")]),t._v(" "),a("p",[t._v("An identifier is a sequence of alphabets, digits, underscores ("),a("code",[t._v("_")]),t._v(") and\nhyphens ("),a("code",[t._v("-")]),t._v("), with the first character not being a digit. Identifiers\nappear in attribute names, block type names, input variables, etc.")]),t._v(" "),a("h2",{attrs:{id:"attributes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attributes"}},[t._v("#")]),t._v(" Attributes")]),t._v(" "),a("p",[t._v("An attribute associate a value with a name.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("command = \"echo 'hello world'\"\n")])])]),a("p",[t._v("The left-hand side of '=' is the attribute name; the right-hand side\nof '=' is the attribute value.")]),t._v(" "),a("p",[t._v("To know what attribute name should be used and what kinds of attribute\nvalues should be associated, please refer to the specific block section.")]),t._v(" "),a("h2",{attrs:{id:"blocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blocks"}},[t._v("#")]),t._v(" Blocks")]),t._v(" "),a("p",[t._v("A block groups attributes and the other blocks.")]),t._v(" "),a("div",{staticClass:"language-hcl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hcl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: hello-env.hcl")]),t._v("\nflow "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello-env"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  task "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo hello $GREETER"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("env")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"GREETER"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("A block has a type ("),a("code",[t._v("flow")]),t._v(" and "),a("code",[t._v("task")]),t._v(" in this example).\nEach block type requires some fixed number of labels (1 for "),a("code",[t._v("flow")]),t._v(",\n2 for "),a("code",[t._v("task")]),t._v(" in this example).\nSome block type may not require any labels.\nAll block types must have body enclosed by "),a("code",[t._v("{")]),t._v(" and "),a("code",[t._v("}")]),t._v(".\nInside the block body, there may be zero or more attributes or blocks.")]),t._v(" "),a("h3",{attrs:{id:"flow-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flow-block"}},[t._v("#")]),t._v(" Flow Block")]),t._v(" "),a("p",[t._v("The flow block is a block with type "),a("code",[t._v("flow")]),t._v(". It's the only top-level\nblock type that Runflow spec supports.")]),t._v(" "),a("p",[t._v("The flow block requires one label as the name for the flow.")]),t._v(" "),a("p",[t._v("Inside the flow block body, available attributes and blocks include:")]),t._v(" "),a("ul",[a("li",[t._v("Task block.")]),t._v(" "),a("li",[t._v("Variable block.")]),t._v(" "),a("li",[t._v("Import block.")])]),t._v(" "),a("h3",{attrs:{id:"task-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task-block"}},[t._v("#")]),t._v(" Task Block")]),t._v(" "),a("p",[t._v("The task block is a block with type "),a("code",[t._v("task")]),t._v(".")]),t._v(" "),a("p",[t._v("The task block requires two labels, the first one as the type of the task,\nthe second one as the name of the task. For example,")]),t._v(" "),a("div",{staticClass:"language-hcl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hcl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: file_read.hcl")]),t._v("\nflow "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file_read"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  task "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file_read"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("filename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pyproject.toml"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  task "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tojson")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("file_read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("this"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("The combination of the task type and task name should appear only once.\nSo this is invalid:")]),t._v(" "),a("div",{staticClass:"language-hcl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hcl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: invalid_task_with_same_type_and_name.hcl")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# INVALID!")]),t._v("\n\nflow "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"invalid_task_with_same_type_and_name"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  task "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"example"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo hello world"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  task "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"example"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo hello 世界"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"variable-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variable-block"}},[t._v("#")]),t._v(" Variable Block")]),t._v(" "),a("p",[t._v("The variable block is a block with type "),a("code",[t._v("variable")]),t._v(".")]),t._v(" "),a("p",[t._v("The variable block requires one label as the name of the variable.\nThe Runflow spec allows referencing the value of the variable in\nan expression using "),a("code",[t._v("var.<NAME>")]),t._v(" syntax.")]),t._v(" "),a("p",[t._v("One can provide a default value optionally.")]),t._v(" "),a("p",[t._v("For example,")]),t._v(" "),a("div",{staticClass:"language-hcl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hcl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: hello_vars.hcl")]),t._v("\nflow "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello_vars"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("variable"),a("span",{pre:!0,attrs:{class:"token type variable"}},[t._v(' "greeter" ')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("required")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  task "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bash_run"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("command")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"echo 'hello "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token type variable"}},[t._v("greeter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("'\"")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("To provide the task run with non-default variable, use "),a("code",[t._v("--var")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ runflow run hello-vars.hcl --var "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("greeter")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("runflow\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v("-06-13 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(":36:27,477"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"task.bash_run.echo"')]),t._v(" is started.\nhello runflow2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v("-06-13 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(":36:27,489"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"task.bash_run.echo"')]),t._v(" is successful.\n")])])]),a("h3",{attrs:{id:"import-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-block"}},[t._v("#")]),t._v(" Import Block")]),t._v(" "),a("p",[t._v("The import block is a block with type "),a("code",[t._v("import")]),t._v(" and requires no labels.")]),t._v(" "),a("p",[t._v("The import block supports two attributes, both requiring a list of modules\nto import.")]),t._v(" "),a("ul",[a("li",[t._v("Attribute "),a("code",[t._v("tasks")]),t._v(" is an array of import string of Python Task classes.\nThe task class should have "),a("code",[t._v("async def run(self, context)")]),t._v(" method.\nThe task class name should end with "),a("code",[t._v("Task")]),t._v(".\nA new task type is available after importing the task.\nThe task type name is the task class name in camel case split and\njoined by underscores ("),a("code",[t._v("_")]),t._v(").")]),t._v(" "),a("li",[t._v("Attribute "),a("code",[t._v("functions")]),t._v(" is an array of import string of any Python functions.")])]),t._v(" "),a("p",[t._v("The import string is in the form of "),a("code",[t._v("path.to.module:target")]),t._v(".")]),t._v(" "),a("p",[t._v("The import block is the main mechanism for the flow to interact with Python\ninterpreter. You can extend the functionality of Runflow spec by providing\ncustomized task types and functions.")]),t._v(" "),a("p",[t._v("Please read more docs "),a("RouterLink",{attrs:{to:"/customize-task.html"}},[t._v("here")]),t._v(".")],1),t._v(" "),a("h2",{attrs:{id:"expressions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expressions"}},[t._v("#")]),t._v(" Expressions")]),t._v(" "),a("p",[t._v("Expressions can be simple literal values, such as")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("string")]),t._v(": "),a("code",[t._v('"hello"')]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("number")]),t._v(": "),a("code",[t._v("1")]),t._v(", "),a("code",[t._v("1.0")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("bool")]),t._v(": "),a("code",[t._v("true")]),t._v(", "),a("code",[t._v("false")]),t._v(" (not "),a("code",[t._v("True")]),t._v("/"),a("code",[t._v("False")]),t._v(" like in Python);")]),t._v(" "),a("li",[a("code",[t._v("list")]),t._v(" (or "),a("code",[t._v("tuple")]),t._v("): "),a("code",[t._v("[1, 2, 3]")]),t._v(", "),a("code",[t._v('["a", "b"]')]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("map")]),t._v(" (or "),a("code",[t._v("object")]),t._v("): "),a("code",[t._v('{"key": "value"}')]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("null")]),t._v(".")])]),t._v(" "),a("p",[t._v("Expressions can be a reference. There should be a "),a("code",[t._v('variable "command" {}')]),t._v("\nblock in the Runflow spec and a value for "),a("code",[t._v("var.command")]),t._v(" provided for\nexecution.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("command = var.command\n")])])]),a("p",[t._v("Expression can be a function call.\nAll Python "),a("a",{attrs:{href:"https://docs.python.org/3/library/functions.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("built-in"),a("OutboundLink")],1),t._v("\nfunctions can be used, just name a few: "),a("code",[t._v("sum()")]),t._v(", "),a("code",[t._v("min()")]),t._v(", "),a("code",[t._v("max()")]),t._v(",\n"),a("code",[t._v("hex()")]),t._v(", etc.")]),t._v(" "),a("p",[t._v("More python classes and functions can be imported.\nFor example, if you have\n"),a("a",{attrs:{href:"https://amoffat.github.io/sh/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("sh")]),a("OutboundLink")],1),t._v(" installed, you can\nset the value for attribute "),a("code",[t._v("content")]),t._v(" with expression\n"),a("code",[t._v('ifconfig("lo0")')]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-hcl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hcl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# File: sh_example.hcl")]),t._v("\nflow "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sh_example"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("functions")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sh:ifconfig"')]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("variable"),a("span",{pre:!0,attrs:{class:"token type variable"}},[t._v(' "out" ')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/tmp/out.txt"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  task "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file_write"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("filename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" var.out\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" ifconfig("),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lo0"')]),t._v(")\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Runflow execution engine provides some additional built-in functions,\nsuch as "),a("code",[t._v("lower()")]),t._v(", "),a("code",[t._v("upper()")]),t._v(", "),a("code",[t._v("split()")]),t._v(", etc.")]),t._v(" "),a("p",[t._v("If the final argument is list and followed by "),a("code",[t._v("...")]),t._v(", the final argument is expanded as Python star args.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('str(value, ["utf-8", "strict"]...)\n\n# equivalent to Python `str(value, *["utf-8", "strict"])`\n')])])]),a("p",[t._v("If the final argument is dict and followed by "),a("code",[t._v("...")]),t._v(", the final argument is expanded as Python double-star kwargs. For example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('tojson(value, {indent=2}...)\n\n# equivalent to Python `json.dumps(value, **{"indent": 2})`\n')])])]),a("p",[t._v("For a full list of available functions, see the\n"),a("RouterLink",{attrs:{to:"/builtin-functions.html"}},[t._v("function reference")]),t._v(".")],1),t._v(" "),a("p",[t._v("Expression can also be an string with interpolated expressions.\nInside the interpolated string, you can wrap up another expression\nwith "),a("code",[t._v("${")]),t._v(" and "),a("code",[t._v("}")]),t._v(". This allows dynamically construct strings from\nother values.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('command = "echo hello ${var.greeter}"\n')])])]),a("p",[t._v("You can even have string inside the interpolated string:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('command = "echo hello ${lower("WORLD")}"\n')])])]),a("p",[t._v("Heredoc string expression allows multiple-line string:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("command = <<EOT\necho 'a\nb\nc'\nEOT\n")])])]),a("p",[t._v("If the string literal has nothing but a single interpolated expression,\nlike "),a("code",[t._v('"${ var.greeter }"')]),t._v(", it is equivalent to "),a("code",[t._v("var.greeter")]),t._v(".\nIf you want it as a string anyway, wrap it up using "),a("code",[t._v('"${ str(var.greeter) }"')]),t._v(".")]),t._v(" "),a("p",[t._v("Runflow spec supports For expression as well. For example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('command = join(" ", concat(["echo"], [for s in var.list : lower(s)]))\n')])])]),a("p",[t._v("The value of "),a("code",[t._v("var.list")]),t._v(" can be any Python iterables, such as tuple,\nlist, object, set, etc.")]),t._v(" "),a("p",[t._v("For expression can turn into a map:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{for s in var.list : s => upper(s)}\n")])])]),a("p",[t._v("Runflow spec supports two identifiers in between "),a("code",[t._v("for")]),t._v(" and "),a("code",[t._v("in")]),t._v(",\nseparated by comma "),a("code",[t._v(",")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("For tuple and list types, the key is the zero-based index into the sequence for each element, and the value is the element value. The elements are visited in index order.")]),t._v(" "),a("li",[t._v("For object and map types, the key is the string attribute name or element key, and the value is the attribute or element value. The elements are visited in the order defined by a lexicographic sort of the attribute names or keys.")]),t._v(" "),a("li",[t._v("For set types, the key and value are both the element value. The elements are visited in an undefined but consistent order.")])]),t._v(" "),a("p",[t._v("For example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[for k, v in var.map : len(k) + len(v)]\n")])])]),a("p",[t._v("Just right before the end character ("),a("code",[t._v("]")]),t._v(") of a for expression, an optional\n"),a("code",[t._v("if condition_expression")]),t._v(" is allowed:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[for s in var.list : upper(s) if s != ""]\n')])])])])}),[],!1,null,null,null);e.default=n.exports}}]);